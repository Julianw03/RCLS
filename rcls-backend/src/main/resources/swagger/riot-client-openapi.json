{
  "openapi": "3.0.0",
  "info": {
    "title": "Riot Client API",
    "version": "109.0.1.3179",
    "description": "Created with SDK - Version 25.4.4.5664"
  },
  "paths": {
    "/agent/v1/requests/third-party-dependency/{requestId}": {
      "delete": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Cancel a third party dependency job ",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Get the current status for a third party dependency job ",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
                }
              }
            }
          }
        }
      }
    },
    "/agent/v1/session": {
      "delete": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Stop the agent ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Get the running state of the agent ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSession"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Start the agent ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/app-command/v1/auth/status": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the stored authentication status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the authentication status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCommandAuthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/app-command/v1/focus-request": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the current app focus request, if one exists \n [Help] Delete the current app focus request, if one exists",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current app focus request, if one exists \n [Help] Get the current app focus request, if one exists",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFocusRequest"
                }
              }
            }
          }
        }
      }
    },
    "/apple-account/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete authorization status for Apple ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve authorization from the Sign In with Apple Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppleAccountAppleAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create authorization from the Sign In with Apple Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppleAccountAppleAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/chat/v2/me": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete multi-game presence of a specific product \n [Help] Endpoint deleted August 2021; Please use '/chat/v3/me'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatPresenceProduct"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`. \n [Help] Endpoint deleted August 2021; Please use '/chat/v3/me'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGamePresence"
              }
            }
          }
        }
      }
    },
    "/chat/v3/blocked": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Unblock a player \n [Help] Endpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatBlockPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get blocked players \n [Help] **Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatBlockedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Block a player \n [Help] Endpoint deleted August 2021; Please use '/chat/v4/blocked'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          }
        }
      }
    },
    "/chat/v3/errors": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete a specific error ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatErrorId"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a specific error \n [Help] **Response:** list of error objects (could have zero or more entries):\n\n```\n{ \"errors\": [\n              { \"class\":   \"[class]\",        //source of error (muc, presence, friend, etc)\n                \"subtype\": \"[subtype]\",      //extra detail; usually most descriptive - along with text field\n                \"type\":    \"[type]\",         //detail - usually action based on error??? (cancel, ignore, etc)\n                \"code\":    \"[code]\",         //numeric error code\n                \"text\":    \"[description]\",  //if available; usually most descriptive (when provided) - along with subtype field\n                \"[key]\":   \"[value]\",        //extra available data, such as...\n                \"pid\":     \"[{pid}]\",        //player id if available\n                \"cid\":     \"[{cid}]\",        //conversation id if available\n                \"id\":      \"[error id]\",     //unique among all errors\n                \"ts\":      \"[timestamp]\"     //integer value: milliseconds UTC\n              },\n              { \"class\":   \"muc\",           //EXAMPLE ERROR OF FAILURE TO JOIN MUC\n                \"subtype\": \"not-allowed\",\n                \"type\":    \"cancel\",\n                \"text\":    \"\",\n                \"code\":    \"405\",\n                \"pid\":     \"sum3530124@pvp.net\",\n                \"cid\":     \"2785eb60-495f-4037-9fa0-98d70bac1b00@pgc.pvp.net\",\n                \"id\":      \"e_1491935420384\"\n                \"ts\":      \"1491935419627\"\n              },\n              { \"class\":   \"auth\",          //EXAMPLE ERROR OF FAILURE TO LOGIN TO CHAT\n                \"id\":      \"e_auth\",\n                \"code\":    \"401\",\n                \"type\":    \"temporary-auth-failure\"\n                \"ts\":      \"1497989043000\",\n                \"cid\":     \"\",\n                \"pid\":     \"\",\n                \"subtype\": \"\",\n                \"text\":    \"\",\n              },\n              ...\n            ]\n}\n```\n\n**Notes:**\n\n* Errors for group chat (multi-user chat: MUC) will have \"class\":\"muc\" and a \"cuuid\" field\n* Usually the \"subtype\" and the \"text\" fields are most descriptive, if they exist\n",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatErrorList"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v3/friendrequests": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove or decline friend request \n [Help] Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatRequestPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friend requests \n [Help] **Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add friend request / invite friend \n [Help] Endpoint deleted July 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestAdd"
              }
            }
          }
        }
      }
    },
    "/chat/v3/friends": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove friend \n [Help] Endpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatFriendPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friends \n [Help] **Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\": \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":        \"[group name]\",           // The group this friend is a part of\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",\n      \"pid\":          \"[friend pid]\",\n      \"priority\":     \"[group priority value]\"\n    }\n    ...\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatFriends"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update a friend \n [Help] **Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/friends'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v3/groups": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete a friend group \n [Help] Endpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatFriendGroupName"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get groups \n [Help] **Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups/order'.",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatGroupList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a friend group \n [Help] **Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupCreate"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update a friend group \n [Help] **Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v4/groups'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGroupUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v3/me": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete multi-game presence of a specific product ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatPresenceProduct"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Put/update a multi-game presence for a specific product. This implicitly sets the product's chat session state to `active`. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGamePresence"
              }
            }
          }
        }
      }
    },
    "/chat/v4/blocked": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Unblock a player ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatBlockPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get blocked players \n [Help] **Response**:\n\n```\n{\n  \"blocked\": [\n    {\n      \"action\": \"[action]\",         // \"deny\" for blocked\n      \"name\": \"[name]\",             // player name\n      \"order\": \"[order],            // order in block list\n      \"pid\": \"[pid]\"                // player id\n    }\n  ]\n}\n```\n",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatBlockedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Block a player ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatBlockPid"
              }
            }
          }
        }
      }
    },
    "/chat/v4/friendrequests": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove or decline friend request \n [Help] Endpoint deleted August 2023; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatRequestPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friend requests \n [Help] **Response:** named requests root object: a flat list of friend request property groups with 'pid' and 'name' inside (could have zero or more entries):\n\n```\n{\n  \"requests\": [\n    {\n      \"name\":         \"[friend name]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"pid\":          \"[friend pid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2023; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add friend request / invite friend \n [Help] Endpoint deleted August 2023; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestList"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestAdd"
              }
            }
          }
        }
      }
    },
    "/chat/v4/friends": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove friend ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatFriendPid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friends \n [Help] **Response:** named friends root object: a flat list of friend property groups with 'pid' and 'name' inside (could have zero or more entries):```\n{\n  \"friends\": [\n    {\n      \"displayGroup\":   \"[display group name]\",   // The current display group of this friend. This will either be the regular group or a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"group\":          \"[group name]\",           // The group this friend is a part of\n      \"name\":           \"[friend name]\",\n      \"note\":           \"[friend note]\",\n      \"pid\":            \"[friend pid]\",\n      \"priority\":       \"[group priority value]\"\n      \"last_online_ts\": \"[last online timestamp]\"\n    }\n    ...\n  ]\n}\n```\n",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatFriends"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update a friend \n [Help] **Data:**\n\n```\n{\n  \"puuid\":  \"[puuid]\",           //specify player to update\n  \"pid\":    \"[pid]\",             //specify player to update, JID format, if not using puuid\n  \"group\":  \"[new group name]\",  //if moving friend to different group, specify it here\n  \"note\":   \"[new friend note]\"  //if changing friend note, specify it here\n}\n```\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v4/groups": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete a friend group ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatFriendGroupName"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get groups \n [Help] **Response:** named groups root object: an ordered list of friend groups. First is highest displayed.  Could have one or more entries, always has a default group:\n\n```\n{\n  \"groups\": [\n    {\n      \"collapsed\":    [collapsed],                  // If the group is open or closed\n      \"isMetaGroup\":  [isMetaGroup],                // If the group is a meta group (ex. \"MOBILE\", \"OFFLINE\")\n      \"name\":        \"[group name]\"\n    }\n    ...\n  ]\n}\n```\n\n**Mobile and Offline Groups**\n\nThe mobile and offline groups will appear in the list of groups if the \"chatGroupMobile\" or \"chatGroupOffline\" settings are set to true. They will appear like this:\n\n```\n{\n  \"groups\": [\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"MOBILE\"\n    },\n    ...\n    {\n      \"collapsed\": [collapsed],\n      \"isMetaGroup\": true,\n      \"name\": \"OFFLINE\"\n    }\n    ...\n  ]\n}\n```\n\nFriends who are either in the \"offline\" or \"mobile\" state will automatically be given the corresponding \"displayGroup\" (ex. either \"OFFLINE\" or \"MOBILE\") in place of their regular group name. If the settings are turned off the groups will be removed and the friends' \"displayGroup\"s will be set back to their regular group names.\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatGroupList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a friend group \n [Help] **Data:**\n\n```\n{\n\"name\":  \"[new group name]\"\n}\n```\nRequirements to create a friend group:\n\n1. name can't be empty --> error 400\n2. name can't happen to be the default group \"**Default\" --> error 403\n3. name can't happen to be a meta group, neither \"OFFLINE\" nor \"MOBILE\" --> error 403\n4. name can't already be the name of another group --> error 409\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupCreate"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update a friend group \n [Help] **Data:**\n\n```\n{\n\"collapsed\": [new collapsed]   //if collapsing or uncollapsing, specify it here\n\"name\":      \"[current name]\", //current name of group\n\"new_name\":  \"[new name]\",     //same name, or new name if renaming\n}\n```\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatChatGroupUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v5/conversations": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete or leave a conversation \n [Help] Endpoint deleted July 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatConvoCid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a conversation by cid \n [Help] Endpoint deleted July 2021; Please use '/chat/v7/conversations' or '/chat/v7/conversations/{domain}'.",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create or join a conversation \n [Help] Endpoint deleted July 2021; Please use '/chat/v7/conversations'. It supports federated chat better.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoin"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Edit conversation \n [Help] Endpoint deleted July 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v5/friendrequests": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove or decline friend request \n [Help] Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatRequestPuuid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friend requests \n [Help] **Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n\n\nEndpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add friend request / invite friend \n [Help] Endpoint deleted August 2021; Please use '/chat/v6/friendrequests'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestPost"
              }
            }
          }
        }
      }
    },
    "/chat/v5/messages": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Clear conversation message history \n [Help] Endpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatConvoCid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get conversation messages \n [Help] **Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a new chat message to a room or individual \n [Help] **Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n\n\nEndpoint deleted August 2021; Please use 'chat/v6/messages'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessagePost"
              }
            }
          }
        }
      }
    },
    "/chat/v6/conversations": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete or leave a conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatConvoCid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a conversation by cid \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create or join a conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoinFederated"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Edit conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v6/conversations/active": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Clear active conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get active conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set active conversation \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatActiveConvo"
              }
            }
          }
        }
      }
    },
    "/chat/v6/friendrequests": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove or decline friend request ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatRequestPuuid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friend requests \n [Help] **Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n",
        "parameters": [
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add friend request / invite friend ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFriendRequestListPuuid"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendRequestPost"
              }
            }
          }
        }
      }
    },
    "/chat/v6/messages": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Clear conversation message history ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatConvoCid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get conversation messages \n [Help] **Response**: named messages root object: a flat list of message property groups (could have zero or more entries):\n\n```\n{ \"messages\": [\n                  { \"body\": \"[message]\",            //actual text of this message\n                    \"pid\":  \"[{pid}]\",              //pid of sender\n                    \"name\": \"[name]\",               //name of sender\n                    \"ts\":   \"[timestamp]\",          //integer value: milliseconds UTC\n                    \"cid\":  \"[cid]\",                //conversation id\n                    \"id\":   \"[message id]\",         //unique key within the conversation - for storage\n                    \"read\": true/false,               //whether message has been marked as read or not\n                    \"type\": \"[chat, groupchat, dm]\" //how the message was sent: from friend, from group chat, or a direct message from player in a group chat\n                  },\n                  { \"body\": \"[message]\",\n                    \"pid\":  \"[{pid}]\",\n                    \"ts\":   \"[timestamp]\",\n                    \"cid\":  \"[cid]\",\n                    \"id\":   \"[message id]\",\n                    \"read\": true/false,\n                    \"type\": \"[chat, groupchat, dm]\"\n                  },\n                  ...\n                ]\n}\n```\n\n**NOTE**: messages are sorted by time-stamp, earliest first, latest last\n",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a new chat message to a room or individual \n [Help] **Sending A Message**\nA conversation id (cid) can be a MUC cid or for peer to peer messages, a player id (pid) can be used as a cid.\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //cid is the conversation id passed as a path argument\n```\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"[chat, groupchat, dm]\"\n}\n```\nAdditional notes:\n\n* type - used to specify the type of message (inferred from conversation type if left blank)\n  * chat: for P2P messages with friends\n  * groupchat: for group messages within a group chat\n  * dm: for Direct Messages with somebody in a group chat with you, or with a friend\n\nAs players post messages to a conversation, chat notifies on REST in this order:\n\n* /chat/v3/conversations/\n  * with updated data:  \"unread_count\" and the last message ID in the conversation\n* /chat/v3/conversations/{cid}/messages\n  * a list of new messages for the conversation (earliest first, latest last, but many times just one new message)\n\n**Direct Messages (private messages within a group chat)**\n\nPrivate messages between players that are not friends are possible, and this messaging is always tied to a JWT authenticated group chat (MUC) that both players are a part of. The MUC they are a part of has its own conversation-id (cid) and the private conversation between participants includes that cid in its derived cid.  For example if players \"Brad\" and \"Sue\" are both in MUC \"lobby01@league.pvp.net\" and Brad sends a direct message to Sue, then his client will...\n\n```\nPOST /chat/v3/conversations/{cid}/messages      //where cid = \"lobby01@league.pvp.net/Sue\"\n```\nNOTE: all {cid} values should be URL encoded, so the example cid when sent url encoded is \"lobby01%40league.pvp.net%2FSue\"\n\nData:\n\n```\n{\n  \"message\": \"[message]\" //the text to send\n  \"type\"   : \"dm\"\n}      \n```\nAdditional notes:\n\n* The conversation object (and child objects like messages) from Brad's perspective will be at: /chat/v3/conversations/lobby01%40league.pvp.net%2FSue\n* The conversation from Sue's perspective will be at:  /chat/v3/conversations/lobby01%40league.pvp.net%2FBrad\n* All operations (GET participants, GET messages, POST messages, etc) are the same as regular conversations\n* for direct messaging, the conversation \"type\" and the message \"type\" will always be \"dm\" \n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessagePost"
              }
            }
          }
        }
      }
    },
    "/chat/v7/conversations": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete or leave a conversation ",
        "parameters": [
          {
            "in": "path",
            "name": "body",
            "schema": {
              "$ref": "#/components/schemas/ChatConvoCid"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a conversation by cid ",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create or join a conversation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoJoinFederated"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Edit conversation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoUpdate"
              }
            }
          }
        }
      }
    },
    "/chat/v7/conversations/active": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Clear active conversation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get active conversation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set active conversation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatActiveConvo"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxChannelResource"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/channels/{channelName}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/client-config/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes the authorization. Triggers revocation of player configuration. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Updates the authorization information for this plugin. Pushed by the ClientConfigDepInjector. If this is the first authorization of session, triggers an initial fetch of player configuration. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigRiotClientAuthAuthorization"
              }
            }
          }
        }
      }
    },
    "/client-config/v2/entitlements-token": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the entitlements token, if set. Triggers revocation of player configuration. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Accepts updated entitlements token. Pushed by the ClientConfigDepInjector. Changes in entitlements trigger refresh of player configuration. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigTokenV2"
              }
            }
          }
        }
      }
    },
    "/client-feature-flags/v1/debug/mock-mode": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leaves mock mode, and deletes mock data. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen leaving mock mode, all data is refreshed from client-config and restored to normal.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether the plugin is in mock mode or not. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe return type is a boolean -- `true` indicates that plugin data is currently being mocked.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Enters mock mode, which allows using fake client-config data. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nWhen entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/client-feature-flags/v1/debug/overrides/flags/{namespace}/{flag}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes an override for a feature flag. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRemoves the override for the specified feature flag. The value of the flag will immediately reflect that being reported by client-config.",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "flag",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Forcibly sets the value of a particular feature flag. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nForcibly sets the value of a particular feature flag. The override will be in place until a subsequent `DELETE` on the override.",
        "parameters": [
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "flag",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommercePluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommercePluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/cookie-jar/v1/cookies": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete existing cookies. ",
        "parameters": [
          {
            "in": "path",
            "name": "cookies",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CookieJarCookie"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all cookies. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CookieJarCookie"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set new cookies. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CookieJarCookie"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/product-context": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resets the current product context. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the current product context. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaProductContext"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set the current product context. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EulaProductContext"
              }
            }
          }
        }
      }
    },
    "/external-message-handler/v1/patch-request": {
      "delete": {
        "tags": [
          "Plugin external-message-handler"
        ],
        "description": "Delete patch request, which suggests that the request is already handled ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin external-message-handler"
        ],
        "description": "Get patch request ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalMessageHandlerPatchRequest"
                }
              }
            }
          }
        }
      }
    },
    "/facebook-account/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete authorization status for Facebook ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve authorization from the Sign In with Facebook Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacebookAccountFacebookAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create authorization from the Sign In with Facebook Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacebookAccountFacebookAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaRestrictionPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaRestrictionPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/debug/penalty-notifications-data": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete all penalty notifications for all products. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the raw data for the cached Penalty Notifications that this plugin received. This intended for debugging only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionCachedPenaltyNotificationDtoV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/debug/penalty-notifications-data/{messageId}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the penalty notification for a specific message ID. Note that you'll still be able to see the message until your next relog. ",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add some arbitrary penalty notification. Uses your current callerId's productId. Note that if you acknowledge or delete this message, the plugin will still attempt to tell Mailbox, which may result in an error log. ",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaRestrictionCachedPenaltyNotificationDtoV2"
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/debug/time": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the current mocked time, so that we use the real time again. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check what the plugin is using as the current time. If the time is being mocked, uses the mock. Otherwise uses the real current time. Uses milliseconds since epoch. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/ga-warning/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaWarningPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GaWarningPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/ga-warning/v1/warnings/ack": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Acknowledges all warnings for the current game. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/ga-warning/v1/warnings/ack/{id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Acknowledges a specific GA player warning. \n [Help] \n**Description**\n\nAcknowledges warning that has ID with {id}. See GET warnings endpoint for more info on how to find `{id}`.\n\n**Response Codes**\n* `404`: No warning with that ID found.\n* `204`: Warning found and acknowledged (deleted).\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/game-session/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameSessionPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/game-session/v1/sessions/{sessionId}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Requests to disconnect the player from the session. ",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the status of the specified session. ",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/gamecenter-account/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete authorization status of Game Center ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve authorization for the Game Center Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GamecenterAccountGameCenterAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create authorization for the Game Center Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/google-account/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the current Google authorization session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the current Google authorization status. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAccountGoogleAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Start an authorization request with Google. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleAccountGoogleAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/info-radiator/v1/custom-heartbeat-metric/{name}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete a custom heartbeat metric, if it exists ",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create or update the value of a custom heartbeat metric ",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/mobile-push/v1/filter/{application}/{filterId}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete specific filter/unmute conversation, after this call conversation will again receive push notifications ",
        "parameters": [
          {
            "in": "path",
            "name": "application",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filterId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch specific filter data for logged in user ",
        "parameters": [
          {
            "in": "path",
            "name": "application",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "filterId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/network-connectivity/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkConnectivityPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkConnectivityPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/nintendo-account/v2/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the current Nintendo authorization session ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets current Nintendo authorization status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NintendoAccountV2AuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Nintendo Account of the player logged in the Nintendo or start authentication with native browser ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NintendoAccountV2AuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/okta-account/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete authorization status for Okta Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve authorization from the Okta Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OktaAccountOktaAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create authorization using Okta Account ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OktaAccountOktaAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs/all": {
      "delete": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Delete all patch jobs from the scheduler. This will stop patch in progress. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Delete patch job from the scheduler. This will stop patch in progress. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Add a patch job to the scheduler. ",
        "parameters": [
          {
            "in": "query",
            "name": "repair",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/PatchProxyPatchRequestOptions"
            }
          },
          {
            "in": "query",
            "name": "tempPath",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchProxyPatchProxyRequest"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/patch-jobs/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Delete patch job from the scheduler. This will stop the current patch job in progress and any related jobs that share the same install ID. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the install resource \n [Help] \nDelete an install resource. All outstanding requests will be cancelled but the files on disk will be left intact.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get detailed information about an install, including current requests and status. ",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchInstall"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Register a new install \n [Help] \n**Data**\n* `excluded_paths`: List of paths (relative to the install root) that are excluded from the update. Files under these paths won't be checked during the verification and repair processes.\n* `metadata_path`:  The location for the install .db and .manifest files. The extension will be directly appended to this path.\n* `seed_path`: The location where updated chunks will be stored for this install when performing a seed operation, and the location where chunks will be sourced from when performing a patch operation.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstallParams"
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/requests/patch": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete patch request for install \n [Help] \nDelete the patch request, interrupting any ongoing patching operations.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Submit patch request for install \n [Help] \n**Note**\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `repair`: Whether a full repair should be performed prior to the update.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `stage`: Only patch up to the specified stage.\n* `temp_path`: (Optional) Custom directory to use for working storage during patching.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPatchRequest"
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/requests/preview": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete preview request for install \n [Help] \nDelete the preview request, interrupting any ongoing preview operations.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Submit preview request for install \n [Help] \n**Notes**\n* The request contains all the info needed, including the full url to the release manifest, http headers and tags.\n* If a request already exists it will be replaced by the new resource.\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `stage`: Only patch up to the specified stage.\n* `fast`: Whether to perform a fast (but less accurate) estimation.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPreviewRequest"
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/requests/repair": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the repair request, interrupting any ongoing repair operations. ",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Triggers a repair operation \n [Help] \n**Notes**\n* Allows you to perform a repair on a set of files or a full repair without having to wait or game client to exit. Only use this if you're\nabsolutely certain that the files are not currently in use.\n* Game is responsible for displaying repair progress and can get progress using the GET /patch/v1/installs/{install-id}/status/repair endpoint.\n\n**Data**\n* `files`: a list of file paths for files that need to be repaired. If none specified then the patcher will perform a full repair. File paths must\nbe relative to the install root.\n* `manifest_url`: Url for the release manifest.\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `allowed_http_fallback_hostnames`: List of hostnames for which we'll fall back to HTTP instead of HTTPS if they resolve to an RFC1918 private IP address.\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRepairRequest"
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/requests/seed": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete seed request for install \n [Help] \nDelete the seed request, interrupting any ongoing seed operations.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Submit seed request for install \n [Help] \n**Notes**\n* Seeding will download any chunks needed to the seed path, but will not modify any files in the install directory. The seed path is specified in the install.\n* If a request already exists it will be replaced by the new resource. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/concepts/seeding/\n\n**Data**\n* `headers`: Headers to send with every request. If the manifest url is behind SCD then a Cookie header is required.\n* `url`: Url for the release manifest.\n* `max_download_speed`: Maximum download speed, in bytes/sec. If zero then no limits will be applied.\n* `stage`: Only patch up to the specified stage.\n* `tags`: Tags to filter which content gets patched. https://riotsdk.rpg.riotgames.com/docs/for-users/patching/onboarding/localization/\n* `delete_foreign_paths`:  (optional) If true, paths that are not considered part of the install will be checked during the verification and repair processes and removed.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchSeedRequest"
              }
            }
          }
        }
      }
    },
    "/payments/v1/debug/countryCodeOverride": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "DEBUG: Clears country code override used during call to `GET /payments/v2/products` ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-login/v1/persistence": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes stored session data ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-ui/v1/delete-account": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Force close Account Deletion UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscribe to get Account Deletion UI availability and visibility status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiPlatformUIAccountDeletionStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Trigger Account Deletion UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-ui/v1/fre": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Disable FRE ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get FRE status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiFREStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Enable FRE ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-ui/v1/riot-id-change": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Force close Riot ID Change UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscribe to get RiotID Change UI availability and visibility status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiPlatformUIRiotIDStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Trigger Riot ID Change UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-ui/v1/vng-edit-profile": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Force close VNG Edit Profile UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscribe to get VNG Edit Profile availability status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiPlatformUIVNGEditProfileStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Trigger VNG Edit Profile UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/player-account/mfa/v1/factor/{factor}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove a provided auth factor from the account ",
        "parameters": [
          {
            "in": "path",
            "name": "factor",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/player-preferences/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPreferencesPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerPreferencesPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerReportingPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/player-session-lifecycle/v1/session": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the current lifecycle session ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the login info of the player. Subscribe to this endpoint then make a POST to be notified when player has been logged in ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessionLifecyclePlayerSessionState"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a session used to retrieve common player authentication information. \n [Help] Automatically attempt to handle RSO processing up to the point the player is logged in.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update a session used to retrieve common player authentication information. Remember to pass all of the session config values on update. Use `PUT /player-session-lifecycle/v1/login-strategy` when updating the login strategy. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/user": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resets user selection ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve Playstation profile and PSN account info ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountUser"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Tries to sign in a player ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/playstation-account/v2/authorization/{recipient}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the current Playstation authorization session ",
        "parameters": [
          {
            "in": "path",
            "name": "recipient",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets current Playstation authorization status ",
        "parameters": [
          {
            "in": "path",
            "name": "recipient",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountV2AuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Playstation Account of the player logged in the Playstation or start authentication with native browser ",
        "parameters": [
          {
            "in": "path",
            "name": "recipient",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaystationAccountV2AuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/private-settings/v1/settings": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Clear all private settings ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/process-control/v1/process/client-restarting": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes state that client is restarting - can quit now ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns true if client is currently restarting, false otherwise ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets state that client is restarting - do not quit ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-integration-deps/v1/app-repair/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes a apply request. \n [Help] This removes a apply request. This should be called once the repair has been completed.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the game repair request for the matching product/patchline \n [Help] It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppRepairApplyRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies a game repair by opening Riot Client and repairing the game (on Desktop). \n [Help] This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to repair their game after it closes.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppRepairApplyRequest"
              }
            }
          }
        }
      }
    },
    "/product-integration-deps/v1/app-update/apply-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes a apply request. \n [Help] This removes a apply request. This should be called once the update has been completed.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the game update request for the matching product/patchline \n [Help] It will return the apply request that matches the provided product/patchline for a running, or previously running game. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateApplyRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile). \n [Help] This adds a new apply request and notify out of the new resource. Apply requests should be created via the product-integration plugin when games would like Riot Client to update their game after it closes.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateApplyRequest"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/app-repair/apply": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Use this to cancel a game repair that was previously requested. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop). \n [Help] Applies a game repair by opening Riot Client and repairing the game once the game is closed (on Desktop).",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppRepairBody"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/debug/app-repair/apply": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to cancel a repair by session id \n [Help] The session id should match one from a running game",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to apply a repair by session id \n [Help] The session id should match one from a running game",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationAppRepairApplyRequest"
              }
            }
          }
        }
      }
    },
    "/product-launcher/v1/default-product": {
      "delete": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Closes the launched default product. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Launches the default product. Returns the session ID. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-launcher/v1/partner-product": {
      "delete": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Closes the launched partner product. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Launches the partner product. Returns the session ID. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-launcher/v1/products/{product-id}/patchlines/{patchline-id}": {
      "delete": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Closes the launched product-patchline. ",
        "parameters": [
          {
            "in": "query",
            "name": "shouldTerminateProcess",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "product-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchline-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Launch a non-internal product-patchline (e.g. a game). Returns the session ID. ",
        "parameters": [
          {
            "in": "path",
            "name": "product-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchline-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Recover a session for a product that is already running, but Riot Client Services doesn't know about since it just started up. ",
        "parameters": [
          {
            "in": "path",
            "name": "product-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchline-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/product-launcher/v1/products/{product-id}/patchlines/{patchline-id}/rogue-process/{process-name}/{process-id}": {
      "delete": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Closes an allowed rogue process associated with a product. ",
        "parameters": [
          {
            "in": "path",
            "name": "product-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchline-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "process-name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "process-id",
            "schema": {
              "type": "number",
              "format": "int32"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-metadata/v1/debug/mock-mode": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leaves mock mode, and deletes mock data. \n [Help] When leaving mock mode, all data is refreshed from client-config and restored to normal.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether the plugin is in mock mode or not. \n [Help] The return type is a boolean -- `true` indicates that plugin data is currently being mocked.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Enters mock mode, which allows using mock product and patchline data. \n [Help] When entering mock mode, the current data set from client-config is copied, and further updates from client-config are ignored. The plugin otherwise tries to behave as it would normally, for instance, private products will only be listed when signed in.\n\nUse the `/debug/mock-data` endpoint to get/set mocked data in this mode.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-session/v1/sessions/{session-id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Only intended to be called by product launchers, like Riot Client.] Handles deleting a session. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "session",
            "schema": {
              "$ref": "#/components/schemas/ProductSessionSession"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Only intended to be called by product launchers, like Riot Client.] Get the session for a specific session ID. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Handles creation of a new session. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionSession"
              }
            }
          }
        }
      }
    },
    "/riot-client-app-command/v1/launch-request": {
      "delete": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Acknowledge the current launch request ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Returns the current launch request, if one exists ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppCommandLaunchRequest"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/product-context": {
      "delete": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Deletes the existing product context, if it exists. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Returns the product context. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPatchlineInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Sets the product and patchline to launch. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPatchline"
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/ux-command": {
      "delete": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Deletes the current UX command so that the default client UX app no longer needs to process it ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Returns the current UX command that the default client UX app needs to process ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UxCommand"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Sets a new UX command that the default client UX app should process ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UxCommand"
              }
            }
          }
        }
      }
    },
    "/riot-login/v1/persistence": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes stored session data ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-messaging-service/v1/connect": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a disconnect request from RMS. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a connect request to RMS. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/entitlements": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete session entitlements token ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update session entitlements token ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceEntitlementsToken"
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/session": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Kill the current session, if any. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Return the current session, if any. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceSession"
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/socket": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a socket kill request. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riotclient/affinity": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the current runtime affinity of the application. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current runtime affinity of the application. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the current runtime affinity of the application. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "The new affinity to use.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/riotclient/splash": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Hide the splash screen. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Show the splash screen. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riotclient/v1/auth-tokens/{authToken}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Unregister an existing auth token. ",
        "parameters": [
          {
            "in": "path",
            "name": "authToken",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Register an auth token.  This is any alpha-numeric string that will be used as a password with the `riot` user when making requests. ",
        "parameters": [
          {
            "in": "path",
            "name": "authToken",
            "description": "Authentication token to add.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-lifecycle/v1/product-context": {
      "delete": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Deletes the existing product context, if it exists. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Returns the product context ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetLifecycleProductContext"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Sets the product to launch, following the product context-flow of checking auth, update, and patch state. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetLifecycleProductContext"
              }
            }
          }
        }
      }
    },
    "/rnet-lifecycle/v2/ux-command": {
      "delete": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Deletes the current UX command so that the default client UX app no longer needs to process it ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Returns the current UX command that the default client UX app needs to process ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetLifecycleUxCommand"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Sets a new UX command that the default client UX app should process ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetLifecycleUxCommand"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Delete patch request for patchline. This will stop any patch in progress. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Submit a request to start patching the patchline. ",
        "parameters": [
          {
            "in": "query",
            "name": "repair",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/RnetProductRegistryPatchRequestOptions"
            }
          },
          {
            "in": "query",
            "name": "tempPath",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "internalRequestSource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/priority-patch-requests/products/{productId}/patchlines/{patchlineId}": {
      "delete": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Stops a priority patch operation for a given product and patchline, if in progress. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Checks to see if a priority patch is in progress for the given product and patchline. Returns a boolean value. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Starts a priority patch request for a product, which will complete patching before any automatic patching operation. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/RnetProductRegistryPatchRequestOptions"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/session-patch-lock/products/{productId}/patchline/{patchlineId}": {
      "delete": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Releases a shared session patch lock for the product-patchline ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Acquires a shared session patch lock for the product-patchline ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-sanitizer/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/auth-hints/hint": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Dismisses the current auth hint ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current auth hint ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthHint"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Creates a test auth hint ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthHint"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Revoke existing tokens, logging the user out. \n [Help] \nThis method destroys both the client-side authorization and revokes refresh tokens (if any) on the server. As a result, this request can fail if the authorization server is down. In the face of failure, the client still forgets the authorization, otherwise server-side downtime would prevent a player from logging out.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's authorization status. \n [Help] When the user is logged in, this resource will be populated with data about the player:\n\n* **currentPlatformId** is the player's home platformId\n* **currentAccountId** is the account ID for the player on their home platform.\n* **subject** is the [RFC 0214g]()-defined globally unique identifier for the player.\n* **authenticationType** is the authentication mechanism used to establish the RSO session.\n\nWhile true that the player's `currentPlatformId` will usually match the `region` setting of the client, consuming plugins *must not* make this assumption. Applications *must not* create identifiers for the player by concatenating `currentAccountId` with the client's region setting. consuming plugins *should* use the `subject` to globally recognize players, but may use a concatenation of `currentPlatformId` and `currentAccountId` if subject is infeasible.\n\nIn addition, note that when a player transfers from region to region, the value of that player's `currentPlatformId` and `currentAccountId` will change, but the value of their `subject` will not.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/userinfo": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the player userinfo \n [Help] This endpoint is not available until the OpenID configuration is retrieved.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's userinfo. \n [Help] If the player has a valid access token, and the userinfo has previously been fetched, this API will return the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's userinfo from RSO. \n [Help] If the player has a valid access token, this API will invoke RSO's userinfo endpoint to retrieve the userinfo of the player as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Destroy the login session. \n [Help] Destroys the login session locally and on the RSO server. Local sessions will also be destroyed and will require newly authenticating to login and create a new authentication session.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current session state. \n [Help] Returns a `SessionResponse` with details of the current state of the session. This is a subscribable end-point that will update as the state is updated.\n\nWhen not set, the type of the `SessionResponse` will be set to `unknown_authentication_response`. The return value will also include the current state of the `persistLogin` value.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/userinfo/{client-id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "This endpoint is not available until the OpenID configuration is retrieved. ",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's userinfo using the implicit grant mode managed client-id and access-token. \n [Help] If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Refresh a player's userinfo using the implicit grant mode managed client-id and access-token. \n [Help] If the client-id has a valid access token managed by the implicit grant mode manager, this API will return the userinfo of the player for the client-id as specified by the access token's scopes.\n\nThis endpoint is not available until the OpenID configuration is retrieved.",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v2/authorizations/{client-id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove the local instance of the authorization for the client-id. \n [Help] This API will delete the local instance of the authorization associated with the client-id. This can be retrieved again by first POSTing via the `/rso-auth/v2/authorizations` API.",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the authorization for the client-id. \n [Help] If an authorization request has been created, this API will return the `ImplicitAuthorization` associated with the `client-id`. If an authorization request has not been created, one will need to be created by successfully POSTing to `/rso-auth/v2/authorizations`.\n\nOn success, this API will return type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "core-sdk"
        ],
        "description": "Updates an existing authorization for a client and requests a new authorization. \n [Help] If an existing authorization exists for this client ID, it will update the request with any values provided and request a fresh authorization.\n\nWhen PATCHing a request to update an existing authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationUpdateRequest"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Refresh an authorization for a given client \n [Help] This endpoint refreshes authorization for a given client ID and returns the resultant updated authorization",
        "parameters": [
          {
            "in": "path",
            "name": "client-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v2/config": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Reset the RSO endpoint configuration. \n [Help] Removes configuration overrides. This removes any provided configuration overrides.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Override the default RSO configuration \n [Help] Overrides the configuration from RSO from the config files, if any. The url should not have a trailing slash and should be the root url for the RSO instance to be used.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPublicClientConfig"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the current authentication session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current state of authentication. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the current prompt for authentication. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/status": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Delete the current web linking code. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current status of web linking. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1WebLinkingStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/region-election": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Programmatically dismiss the Region Election UI. Note that this endpoit returns immediately, but the resource is finalized synchronously. \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1RegionElection"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetches the state of the Region Election UI \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1RegionElection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initiates the display of the Region Election UI \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1RegionElection"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1InitiateRequest"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Programmatically update the state of the Region Election UI \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1RegionElection"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1UpdateRequest"
              }
            }
          }
        }
      }
    },
    "/social/v1/blocklist/{puuid}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Unblock a player ",
        "parameters": [
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Block a player ",
        "parameters": [
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/social/v1/debug/caller-id/mock-id": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Stops mocking the caller ID for Swagger calls \n [Help] Deletes the currently set `productId` and `patchlineId`. Plugin APIs will receive `swagger` as the `productId`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks the caller ID in use when APIs are called from Swagger \n [Help] Returns the `productId` and `patchlineId` being passed to APIs in this plugin when called via Swagger.\n\nReturns 404 if a mock caller ID is not in use.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialPluginCallerId_MockCallerId"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the caller ID to use when calling this plugin from Swagger \n [Help] Sets the `productId` and `patchlineId` to pass to APIs in this plugin during future calls from Swagger.\n\nUse this functionality to test APIs in this plugin with Swagger, as if they were being called from another product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPluginCallerId_MockCallerId"
              }
            }
          }
        }
      }
    },
    "/social/v1/friendrequests/{puuid}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Remove or decline friend request ",
        "parameters": [
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/startup-config/v1/registry-config": {
      "delete": {
        "tags": [
          "Plugin startup-config"
        ],
        "description": "Delete the registry config for Riot Client on startup which will disable launching riot client on start up ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Plugin startup-config"
        ],
        "description": "Get the registry config for Riot Client on startup ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin startup-config"
        ],
        "description": "Set the registry config for Riot Client on startup ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/v2/metadata/{schemaPrefix}/{metadataEntity}/{propertyName}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes a property in the metadata automatically applied to a type of analytics platform event ",
        "parameters": [
          {
            "in": "path",
            "name": "schemaPrefix",
            "description": "The schema 'world' prefix (i.e. riotclient, rtp, etc) to match against incoming AP events.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "metadataEntity",
            "description": "Name of the metadata entity that exists in every schema for the given prefix (i.e. metadata, riotclientMetadata, etc)",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "propertyName",
            "description": "Name of a property to remove (i.e. rsoClient, region, locale)",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the metadata to automatically apply to a type of analytics platform event ",
        "parameters": [
          {
            "in": "path",
            "name": "schemaPrefix",
            "description": "The schema 'world' prefix (i.e. riotclient, rtp, etc) to match against incoming AP events.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "metadataEntity",
            "description": "Name of the metadata entity that exists in every schema for the given prefix (i.e. metadata, riotclientMetadata, etc)",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "propertyName",
            "description": "Name of a property to set (i.e. rsoClient, region, locale)",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "BindingProperty that contains the value to set in the metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/block-list/users": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Removes a list of users from the voice provider block list \n [Help] The users unblocked by this endpoint will still be muted if they are blocked on either chat and/or platform blocklists",
        "parameters": [
          {
            "in": "path",
            "name": "unblocklist",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Adds a list of users to the voice provider block list \n [Help] The users blocked by this endpoint will be muted regardless if they muted on chat and/or platform blocklists",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/sessions": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave all joined sessions \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the list of all current voice sessions \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Join a session with game-specific JWT token \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for all sessions \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/sessions/{id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave a session \n [Help] Endpoint deleted March 2021.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get session details \n [Help] Endpoint deleted March 2021.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for a session \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deleted March 2021.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v3/sessions/{productName}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave all joined sessions \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the list of all current voice sessions \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Join a session with game-specific JWT token \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for all sessions \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/voice-chat/v3/sessions/{productName}/{id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave a session \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get session details \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}/{id}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for a session \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n\n\nEndpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/voice-chat/v4/sessions/{productName}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave all joined sessions ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the list of all current voice sessions ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatSessionResource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Join a session with game-specific JWT token ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatJoinSession"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for all sessions \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v4/sessions/{productName}/{id}": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Leave a session ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get session details ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSessionResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the properties for a session \n [Help] volume: Controls the output volume for a room. Set to 0 to mute.\nisFocused: Toggles if a session gains volume priority, which dampens the volume of the other sessions.\nisTransmitEnabled: Toggles audio input for a session.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSessionResource"
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/user": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resets user selection ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve Xbox Live profile info ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountUser"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sign in user on Xbox ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XboxAccountSelectUserParameters"
              }
            }
          }
        }
      }
    },
    "/xbox-account/v2/authorization": {
      "delete": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deletes the current Xbox authorization session ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets current Xbox authorization status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountV2AuthorizationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Xbox Account of the player logged in the Xbox or start authentication with native browser ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XboxAccountV2AuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/accounts-security/v1/access": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the action need to be done and outbound URL for it ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsSecurityAccountsSecurity"
                }
              }
            }
          }
        }
      }
    },
    "/aes/v1/status/{provider}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Return the AES authorization status for the given provider ",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "schema": {
              "$ref": "#/components/schemas/AesAESProvider"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AesAESStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/age-restriction/v1/age-restriction/products/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the age-restriction state for the productId ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRestrictionAgeRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests": {
      "get": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Get the list of pending and active requests being handled by the agent ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRequestQueue"
                }
              }
            }
          }
        }
      }
    },
    "/anti-addiction/v1/products/{productId}/policies/{policyType}/anti-addiction-state": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns an anti-addiction state by productId and policy ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "policyType",
            "schema": {
              "$ref": "#/components/schemas/AntiAddictionPolicyType"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AntiAddictionAntiAddictionState"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v1/debug": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "get debug config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDebugConfig"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "set debug config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDebugConfig"
              }
            }
          }
        }
      }
    },
    "/chat/v1/device-settings": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current values of the device settings related to chat. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatDeviceChatSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the device settings related to chat ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDeviceChatSettings"
              }
            }
          }
        }
      }
    },
    "/chat/v1/session": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "get chat session state \n [Help] Chat notifies updated events on these endpoints, typically in this order:\n\n* `/chat/v1/session`    ->  { state: \"connecting\", pid: \"\", name: \"\", loaded: false }    //chat is now connecting (empty pid, name)\n* `/chat/v1/session`    ->  { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: false }    //chat is now connected initial data for showing the friends list in the UX is not loaded\n* `/chat/v#/presences`      //for all your friend presences (no way around this currently)\n* `/chat/v#/presences`      //for yourself\n* `/chat/v#/groups`         //batch of every group in your friends list\n* `/chat/v#/friends`        //batch\n* `/chat/v#/blocked`        //batch\n* `/chat/v#/conversations`  //recent conversations\n* `/chat/v#/messages`\n* `/chat/v#/participants`\n* `/chat/v1/session`     -> { state: \"connected\", pid: \"sum3530124@pvp.net\", name: \"Scarlet Witch\", loaded: true }    //chat is now connected and has loaded the initial data to show in the UX\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatSession"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v1/settings": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the account settings related to chat \n [Help] **Response:**\n\n```\n{\n  \"bounceDockIconEnabled\": [bounceDockIconEnabled], // If the dock icon will bounce when receiving a new message, game invite, etc\n  \"chat-status-message\": \"[status_message]\",      // The player's status message. This gets updated within chat when the \"status\" of the player is changed\n  \"chatFilterDisabled\": [chatFilterDisabled],       // If bad language is filtered in chat messages\n  \"chatGroupMobile\": [chatGroupMobile],             // If mobile friends are grouped in their own \"MOBILE\" folder\n  \"chatGroupOffline\": [chatGroupOffline],           // If offline friends are grouped in their own \"OFFLINE\" folder\n  \"chatWindow\": {                                   // The chat window settings\n    \"detached\": [detached],                         // If the chat window is docked or popped out\n    \"height\": [height],                             // The height of the chat window\n    \"left\": [left],                                 // The location of the left side of the chat window\n    \"top\": [top],                                   // The location of the top side of the chat window\n    \"width\": [width]                                // The width of the chat window\n  },\n  \"closed-conversations\": {                         // Which conversations have been closed. Used within chat to determine which recent convos to remove on startup. This gets updated\n                                                      // within chat when a conversation is deleted\n    \"[convo_id]\": [closed_timestamp],\n    ...\n  },\n  \"friendRequestToastsDisabled\": [friendRequestToastsDisabled], // If a toast appears when you receive a friend request\n  \"linkClickWarningEnabled\": [linkClickWarningEnabled],         // If a link warning will appear when clicking on links\n  \"messageNotificationsEnabled\": [messageNotificationsEnabled], // If a native toast or regular toast appears when receiving a message\n  \"moreUnreadsEnabled\": [moreUnreadsEnabled],                   // If a \"more unreads\" indicator appears for unread items not currently in scroll view\n  \"muted-conversations\": {                                      // A list of 1:1 muted conversations. This gets updated within chat when the \"muted\" state of a conversation is changed\n    \"[convo_id]\": 1\n  },                       \n  \"recentlyPlayedOpen\": [recentlyPlayedOpen],                  // If the \"recently played\" folder is open\n  \"roster-group-collapsed\": {                                  // A list of each folder's collapsed state. This gets updated within chat when the \"collapsed\" state of a group is changed\n    \"[group_folder_name]\": [collapsed],\n    ...\n  },\n  \"showWhenTypingEnabled\": [showWhenTypingEnabled],            // If an indicator is shown to other players when writing a message to them\n  \"sortBy\": \"[sort_type]\"                                    // How to sort friends in the friends list (ex. by \"availability\" vs \"alphabetical\")\n}\n```\n\nMost of these chat settings are straightforward and only require an update when a player enables or disables a setting. For example, when they check or uncheck a box for the setting.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatAccountChatSettings"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the account settings related to chat, partial update using only given fields ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the account settings related to chat, complete overwrite ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatAccountChatSettings"
              }
            }
          }
        }
      }
    },
    "/chat/v2/session/state": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "get chat product session state ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSessionState"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "edit session state for specific product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatProductSessionState"
              }
            }
          }
        }
      }
    },
    "/chat/v4/conversations/{cid}/participants": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the participants in a conversation \n [Help] **Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n",
        "parameters": [
          {
            "in": "path",
            "name": "cid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatPlayerParticipants"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v4/conversations/{cid}/participants/{pid}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get specific participant in a conversation \n [Help] **Response:** named participants root object: a flat list of conversation participant property groups (could have zero or more entries):\n\n```\n{ \"participants\": [\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                      { \"cid\":  \"[cid]\",\n                        \"pid\":  \"[pid]\",\n                        \"name\": \"[name]\"\n                      },\n                        ...\n                      ]}\n```\n",
        "parameters": [
          {
            "in": "path",
            "name": "cid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatPlayerParticipants"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v4/presences": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get multi-game presences \n [Help] ChatPartyMembers may show up with no ID or other data as there are valid cases that we may not have data on said player; this is expected behavior.",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMultiGamePresenceList"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v5/messages/{domain}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get messages by domain (optional query args: cid) \n [Help] Endpoint deleted August 2021; Please use 'chat/v6/messages/{domain}'.",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v5/participants": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get specific participant in a conversation ",
        "parameters": [
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatParticipants"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "edit a player to mute or unmute them, across all conversations ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatParticipantEdit"
              }
            }
          }
        }
      }
    },
    "/chat/v5/participants/{domain}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get conversations by domain (optional query arg: cid) ",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatParticipants"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v6/conversations/{domain}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get conversations by domain (optional query arg: cid) \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v6/messages/{domain}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get messages by domain (optional query args: cid) ",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatChatMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chat/v7/conversations/{domain}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get conversations by domain (optional query arg: cid) ",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatUIStateConversationList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/broadcasts": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all broadcasts for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/broadcasts/{channelName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all broadcasts for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a broadcast to the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxMessagePost"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/channels": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all channels for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxChannels"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxChannelResource"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all messages for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a message to the default channel of the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxMessagePost"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/channels/{channelName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all messages of the specified channel for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a message to the specified channel of the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxMessagePost"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/channels/{channelName}/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets all messages in channel as get.  When subscribed, returns only new messages in the channel when updated ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "channelName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets all messages in the chatbox as get.  When subscribed, returns only new messages in the chatbox when updated ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/whispers/{puuid}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get whisper messages for the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/whispers/{puuid}/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get whisper messages for the specified chatbox as get.  Returns only new whispers on update. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxMessageList"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/participants": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all participants for the specified chatbox. Patch create notifications are sent for the very first added participants only. Patch update notifications are sent for subsequent added participants only. Patch delete notifications are sent for removed participants only. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatParticipants"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/participants/whispers": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all participants in whisper channels with friends (for the specified chatbox). Patch create notifications are sent for the very first added participants only. Patch update notifications are sent for subsequent added participants only. Patch delete notifications are sent for removed participants only. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatParticipants"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/friends": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all friends of the user ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxChatboxFriends"
                }
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Endpoint deprecated July 30, 2024; please use '/chatbox/v1/status' instead.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/chatbox/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the status of the chatbox plugin to know whether or not to expect if the feature is usable. \n [Help] \n**Description**\nGet the status of the chatbox plugin to know whether or not to expect if the feature is usable. Game teams are encouraged to subscribe\nto this endpoint so that the game can behave correctly depending on what the current state of the plugin is. For example, if the status of\nthe plugin is `permissionDenied`, game teams should not attempt to create a chatbox instance since the player does not have permissions to do so,\npossibly due to behavioural restrictions or parental control settings.\n\n** Returns **\n\nA PluginStatus value representing the current status of the plugin.\n* `PluginStatus` values:\n    * `unknown`: The status of the plugin is currently unknown. This is the default value while the plugin is initializing and its status has yet to be determined.\n    * `awaitingChatConnection`: The player has not been connected to the chat service, so the plugin will not be able to create functional chatboxes.\n    * `permissionUnknown`: The chat session has been established, but the plugin is unable to look up whether or not the player has permission to use text chat.\n         Attempting to create a chatbox will not work until the permission query succeeds.\n    * `permissionDenied`: The player does not have permission to use text chat. Attempting to use the plugin will always return an error and\n         existing chatbox instances will be destroyed.\n    * `ready`: The plugin is usable and chatboxes can be created.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatboxPluginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the configuration for the application. If config is not already cached locally, will make a blocking external request. ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ClientConfigConfigType"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "app",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "patchline",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "region",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/AnyType"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v1/config/{name}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the single configuration value. If config is not already cached locally, will make a blocking external request. ",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ClientConfigConfigType"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "app",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "patchline",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "region",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v1/config-loaded/public": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns true if the public config has been loaded from the service or the cache. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v1/first-party-environment": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the 1st party environment the device is currently using. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Updates the 1st party environment the device is currently using so it can be mapped to matching SDK environment. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/client-config/v1/status/{type}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the status for the given config type which primarily indicates if the config type is ready for use. ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ClientConfigConfigType"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigConfigStatus"
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v1/url": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the URL of the external service ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v2/config/{name}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Non-blocking request for a specific configuration field. \n [Help] Returns an individual configuration field for the requesting application. Both Public and Player types are checked. Subscribing to a configuration field that does not exist results in event UPDATE notifications with an `BindingProperty::Empty` data field. If the receiving module intends to handle the does-not-exist case, the event handler should accept a BindingProperty, not a concrete resource type. \n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\nResponse codes:\n- 200 If the field exists. The body will be the configuration value.\n- 202 If configuration has not yet been fetched, and updates can be received via subscription notifications.\n- 204 If the field does not exist, and all configuration has been successfully fetched.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v2/namespace/{namespace}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Non-blocking request for public+player configurations in a namespace. \n [Help] Returns the configuration for the requesting application in the given namespace for both Public and Player types.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/AnyType"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v2/namespace/{namespace}/player": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Non-blocking request for 'player' configurations in a namespace. \n [Help] Returns the *player* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n* 'Player' configuration will have a delete notification sent to subscribers on logout.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/AnyType"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-config/v2/namespace/{namespace}/public": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Non-blocking request for 'public' configurations in a namespace. \n [Help] Returns the *public* configuration for the requesting application in the given namespace.\n\n* This call does not block. If config is not already cached locally, an async request will be dispatched.\n\n* If configuration has not yet been fetched, an HTTP 202 is returned. When the configuration is available, a resource notification will be sent to subscribers.\n\n* Configuration is automatically refreshed on state change (login, logout, or notification of change), and apps may be notified by subscribing to this endpoint.\n\n* Connecting game applications will have product information automatically applied to outgoing configuration requests (i.e. app name, version, patchline). This allows configuration overrides to be applied specifically for the app.\n\n",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/AnyType"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-feature-flags/v1/debug/all-subscribed-flags": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns all the feature flags that are currently subscribed. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nReturns the keys and values of all feature flags that are currently subscribed -- that is, in active use by code.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-feature-flags/v1/debug/mock-data": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the current set of mock data for the plugin. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFeatureFlagsConfigurationSource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the current set of mock data for the plugin. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientFeatureFlagsConfigurationSource"
              }
            }
          }
        }
      }
    },
    "/client-feature-flags/v1/debug/overrides/flags": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the values of all overridden flags. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the names and values of all currently set overrides.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/client-feature-flags/v1/flags/{namespace}/{flag}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the value of a specific feature flag. \n [Help] *Internal Riot Client API. Only for use by plugins. Please don't use outside of Riot Client or the SDK.*\n\nRetrieves the value of a specific feature flag. Implicitly subscribes, and updates to the feature flag will be broadcast.\n\nFlags which are not currently defined (or entitled) will always return `false` as the default value.",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "flag",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/v1/store/listing": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the store listing of products available for the player to purchase. \n [Help] \n**Description**\nThis endpoint returns a StoreListing, which contains a list of Products, for the current platform.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceV1StoreListing"
                }
              }
            }
          }
        }
      }
    },
    "/data-store/v1/install-settings/{path}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the data for the specified key from the install settings. ",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set the data for the specified key from the install settings. ",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/data-store/v1/paths": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the data store paths. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPaths"
                }
              }
            }
          }
        }
      }
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all settings for the specified product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set all settings for the specified product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/data-store/v1/product-settings/products/{productId}/patchlines/{patchlineId}/{path}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the data for the specified key from the settings for the specified product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set the data for the specified key from the settings for the specified product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/data-store/v1/system-settings/{path}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the setting for the specified key. This API is provided for host applications. ",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete-account/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Current status of the account deletion flow, for internal use only ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAccountDeleteAccountV1StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/entitlements/v1/token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get V1 entitlements token, which contains the RSO access token. \n [Help] Callers should prefer /v2/token in order to acquire both access and ID token\n\nReturns HTTP 400 if the token is not ready.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementsToken"
                }
              }
            }
          }
        }
      }
    },
    "/entitlements/v2/token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get V2 Entitlements token, which contains the default RSO authorization. \n [Help] 'Authorization' pertains to the Riot Client application on desktop platforms and the host application for the embedded SDK.\n\nError codes:\n- Returns HTTP 404 if the token is not ready. Likely due to no authentication available.\n- 503 if Entitlements are disabled for this environment.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementsTokenV2"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/agreement": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns an object containing metadata about the most recent published EULA, and a field, 'acceptance', indicating whether the user has accepted this agreement or not. (The 'acceptance' field is accessible separately via the /acceptance endpoint.\n\nWhen the 'acceptance' field is 'WaitingForAllServiceData', we don't have the data for the latest EULA, nor its acceptance state, and all other fields are invalid. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaAgreement"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/agreement/acceptance": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the acceptance state of the most recent EULA for the current user. Possible values are:\n\n- WaitingForAllServiceData: The user is signed out, we have yet to retrieve client-config, or we are otherwise waiting for data to determine if the user has accepted the latest agreement.\n- AcceptanceRequired: The user has never accepted a EULA, or has not accepted the most recent version.\n- Accepted: The user has accepted the most recent EULA. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaAcceptance"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Accepts the most recent EULA for the current user. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/eula/v1/agreement/content": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the content of the current version EULA. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/external-legal-links": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the web URLs for Terms of Service and Privacy Noticeaccording to the most appropriate locale for the agreement you are bound to ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaExternalLegalLinks"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/privacy-policy": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current privacy policy data. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EulaPrivacyPolicy"
                }
              }
            }
          }
        }
      }
    },
    "/eula/v1/privacy-policy/content": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the content of the current privacy policy. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/debug/callerIds": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a list of the currently-subscribed callerIds. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/penalty-notifications": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of penalty notifications to show to the player for the callerId. \n [Help] Deprecating V1 endpoint in favor of V2. Please use the /ga-restriction/v2/penalty-notifications endpoint going forward.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotification"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v1/unread-penalty-notifications": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of unread penalty notifications to show to the player for the callerId. \n [Help] Deprecating V1 endpoint in favor of V2. Please use the /ga-restriction/v2/unread-penalty-notifications endpoint going forward.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotification"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v2/penalty-notifications": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of penalty notifications that can include evidence from multiple transgressions to show to the player for the callerId. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v2/unread-penalty-notifications": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of unread penalty notifications that can include evidence from multiple transgressions to show to the player for the callerId. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ga-warning/v1/warnings": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of unacknowledged localized game-agnostic warnings to show the player. \n [Help] \n**Description**\n\nYou will only get warnings for the current game. To make testing easier, there are debug endpoints on this plugin that allow you to mock your current game.\n\n**Response Body**\n\n* `gaWarningMessage`: Top-level response field. If there are no unacknowledged warnings, this will be empty object `{}`.\nOtherwise it will contain unacknowledged warnings keyed by their ID.\n* `gaWarningMessage.{id}`: Represents a single unacknowledged warning.\n  * `gaWarningMessage.{id}.category`: Category of the warning message--internal string.\n  * `gaWarningMessage.{id}.locale`: Detected locale of player and what locale the message was localized to.\n  * `gaWarningMessage.{id}.message`: Localized message to display to player.\n  * `gaWarningMessage.{id}.title`: Localized message title to display to player.\n  * `gaWarningMessage.{id}.acknowledgeText`: Localized text player must type to acknowledge the warning.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreUrl`: Hyperlink to give players more context about community guidelines. This field and `seeMoreLabel` won't always be present and you should build your UI to account for that.\n  * (OPTIONAL) `gaWarningMessage.{id}.seeMoreLabel`: Label for `seeMoreUrl`. Do not display the raw link, use this label instead. This field and `seeMoreUrl` won't always be present and you should build your UI to account for that.\n\n**Response Codes**\n* `200`: Success.\n* `401`: Player must be logged in.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GaWarningWarningResponse"
                }
              }
            }
          }
        }
      }
    },
    "/game-session/v1/clusters": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets a list of all available clusters. Cluster IDs arrive asynchronously and may not be immediately avaiable. The logic of selecting the optimal cluster for a player is up to the game team. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1ClusterList"
                }
              }
            }
          }
        }
      }
    },
    "/game-session/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the readiness of the plugin to accept requests. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/jwt-authenticator/v1/headers": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns our current headers - currently only used in integration tests ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtAuthenticatorHeaders"
                }
              }
            }
          }
        }
      }
    },
    "/kr-account/config/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The current plugin configuration. \n [Help] Debug information allowing the ability to introspect the current plugin config.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KrAccountKrAccountPluginConfig"
                }
              }
            }
          }
        }
      }
    },
    "/kr-account/promotion/v1/session": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get KR account session token for KR Account Promotion flow ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KrAccountAccountPromotionSession"
                }
              }
            }
          }
        }
      }
    },
    "/launch-restriction/v1/products": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns all product ids the player is launch restricted for \n [Help] WARNING: Should not be used to enforce a restriction.\nThese restrictions are based on data from an unsigned user info token thatplayers *can* tamper with./n/nLaunch restrictions include restrictions with a type of TIME_BAN or PERMANENT_BAN",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/launch-restriction/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns true when the plugin is ready. Consumers are expected to wait until the plugin is ready to request restrictions ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/launch-restriction/v1/restrictions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns all launch restrictions for the logged in player \n [Help] WARNING: Should not be used to enforce a restriction.\nThese restrictions are based on data from an unsigned user info token thatplayers *can* tamper with./n/nLaunch restrictions include restrictions with a type of TIME_BAN or PERMANENT_BAN",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchRestrictionLaunchRestrictions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/launch-restriction/v1/restrictions/{product-id}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns all launch restrictions for the logged in player and given product-id \n [Help] WARNING: Should not be used to enforce a restriction.\nThese restrictions are based on data from an unsigned user info token thatplayers *can* tamper with./n/nLaunch restrictions include restrictions with a type of TIME_BAN or PERMANENT_BAN",
        "parameters": [
          {
            "in": "path",
            "name": "product-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchRestrictionLaunchRestrictions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/loyalty/v1/loyalty-resource": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns loyalty resource including pcbId if player's playing from pcbang or not found exception ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyV2PCBangInfo"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/check-new-mail": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the mailbox has new mail \n [Help] \n**Description**\n\nThis API is subscribable and for notifications that new mail is available.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxMailboxStatusUpdated"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/check-new-product-mail/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the mailbox has new mail \n [Help] \n**Description**\n\nThis API is subscribable and for notifications that new mail is available. This is the internal implementation meant to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailboxMailboxStatusUpdated"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/enabled": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether or not the mailbox feature is enabled for this environment \n [Help] \n**Description**\n\nThis API is subscribable and use to verify the feature is enabled in the current loaded cluster config.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether or not the mailbox feature is enabled and ready to use for this environment \n [Help] \n**Description**\n\nSubscribe to this endpoint to know when it is safe to call other mailbox APIs.\n\nThe result is `true` when all of the following are true: mailbox has been enabled by configuration, the cluster configuration is loaded, player affinity is available, and the player is logged in.\n\nIf the result is `false`, do not attempt to call mailbox APIs.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/mobile-product-registry/v1/build-number": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Deprecated] Get the current game build number. \n [Help] This is deprecated. Please use /riot-client/build-number.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/mobile-product-registry/v1/is-game-obsolete": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Deprecated] Get if the current game build is obsolete. \n [Help] This API is deprecated. Please use `/product-integration/v1/app-update/status`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileProductRegistryGameVersion"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/mobile-product-registry/v1/valid-game-versions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the valid game versions ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/mobile-push/v1/filters/{application}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch all filters for logged in user ",
        "parameters": [
          {
            "in": "path",
            "name": "application",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/network-connectivity/v1/connectivity": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current network connectivity \n [Help] \n**Description**\nGet the current network connectivity.\n\nPrefer to subscribe to this instead of polling.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkConnectivityConnectivity"
                }
              }
            }
          }
        }
      }
    },
    "/nintendo-account/v1/player-nickname": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the player nickname of the Nintendo Account for the player logged in the Nintendo Switch ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/active-updates": {
      "get": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Get list of active updates ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchProxyProductPatchlineKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs": {
      "get": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Get all patch job information (sequence, productId, patchlineId) from the scheduler. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchProxyJobInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/patch-states/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Get patch status for patchline ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchProxyPatchingResource"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/patch-states/out-of-date": {
      "get": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Get a list of install ids that are out of date ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchProxyProductPatchlineKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/patch-states/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Get patch state for a product patchline. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchProxyProductPatchlineStatus"
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/configuration": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the configuration ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchConfiguration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Configure plugin settings such as cache size and location \n [Help] \n**Data**\n* `cache_path`:  Path to the global cache used to store downloaded chunks.\n* `cache_size`: Cache size in bytes.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchConfiguration"
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get list of installs on disk ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current patch, preview and seed statuses of an install resource \n [Help] \n**Note**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Responses**\n\n**Patch**\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n\n**Seed**\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all data needed to update the install has been downloaded.\n* `up_to_date`: The last request completed successfully and all data needed to update the install has been downloaded.\n* `pending_verify`: The last request has not completed verification step.\n\n**Preview**\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n\n**Repair**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation. Possible states include:\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchStatus"
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/status/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current patch status of an install. \n [Help] \n**Notes**\n* The status is always relative to a manifest and set of tags, specified by the `url` and `tags` fields respectively.\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `updating`: Currently performing a patching / seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `not_installed`: The last request completed successfully and detected that the install-id is not installed.\n* `pending_verify`: The last request has not completed verification step.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPatchStatus"
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/status/preview": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current preview status of an install. \n [Help] \n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `pending`: The preview request has not finished.\n* `done`: The last preview request completed successfully.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPreviewStatus"
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/status/repair": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current repair status of an install. \n [Help] \n**Response**\n* `manifest_url`: the url of the release manifest.\n* `repair_progress`: The progress of the repair operation. Contains:\n    * `bytes_to_repair`: Total number of bytes to read.\n    * `files_to_repair`: Total number of files to read.\n    * `repaired_bytes`: Number of bytes read from disk so far.\n    * `repaired_files`: Number of files read from disk so far.\n* `state`: The overall state of the repair operation.\n    * `pending`: No repair requests have been made.\n    * `in_progress`: Repair is in progress.\n    * `canceled`: The repair operation was canceled.\n    * `done`: Repair operation is complete.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRepairStatus"
                }
              }
            }
          }
        }
      }
    },
    "/patch/v1/installs/{install-id}/status/seed": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve the current seed status of an install. \n [Help] \n**Notes**\n* If there is any work in progress, `url` and `tags` will match those from the request.\n* If there are no pending requests, `url` and `tags` will match the files in the install folder.\n\n**Response**\n\nThe `state` field will is populated based on the current work with the following values:\n* `seeding`: Currently performing a seeding request.\n* `out_of_date`: The last request was partially completed and more work needs to be done before all files are in sync with the release manifest.\n* `up_to_date`: The last request completed successfully and files are in sync with the release manifest.\n* `pending_verify`: The last request has not completed verification step.\n",
        "parameters": [
          {
            "in": "path",
            "name": "install-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchSeedStatus"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/productListResult": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Available products notification ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayMobileProductListResult"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/purchaseResult": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Purchase notification ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayMobilePurchaseResult"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v2/productListResult": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Available products notification ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayMobileProductListResult"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v2/purchaseResult": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Purchase notification ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayMobilePurchaseResult"
                }
              }
            }
          }
        }
      }
    },
    "/payments/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "True if the plugin is ready to call initialize-purchase ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/payments/v2/products": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a list of bundles available for the player to purchase. \n [Help] \n**Description**\nThis endpoint returns a list of Riot Bundles.\n\nResponse Body:\n* list of `Product` Objects:\n  * `id`: Product id used to start the purchase\n  * `riotSku`: Riot SKU\n  * `realAmountCents`: Real Currency Price\n  * `realCurrencyCode`: Currency code\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentsProduct"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/permissions/v1/request": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[WIP] Gets values for all requested permissions. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsPermissionsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "[WIP] Request current permission status of a given permission permissionId. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsPermissionsResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsPermissionsRequestParameters"
              }
            }
          }
        }
      }
    },
    "/permissions/v1/request/{permissionId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[WIP] Gets the details for the permission specified. ",
        "parameters": [
          {
            "in": "path",
            "name": "permissionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsPermissionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/v1/user-communication-permissions/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the ready status of the user-communication-permissions endpoint ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/platform-login/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the plugin config and enabled status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformLoginLoginPersistenceConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Allows to modify the plugin config (e.g. enable or disable login persistence) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformLoginLoginPersistenceConfig"
              }
            }
          }
        }
      }
    },
    "/platform-login/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current login state of the client ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformLoginLoginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/platform-notifications/v1/broadcast": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscription-only API. Subscribers will receive a broadcast message. All GET calls will return success and an empty broadcast. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformNotificationsBroadcast"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a broadcast message to all subscribers. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformNotificationsBroadcastRequest"
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/block-list": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the currently-authenticated player's list of blocked users on the current platform as a list of Riot PUUIDs. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialBlockList"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/block-list/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only - will return existing list of platform friends otherwise. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialBlockList"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/crossplay-permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the current player has permissions from the platform to use cross play and if not, why that is the case. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialCrossPlayPermissionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/friend-list": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the currently-authenticated player's friend list on the current platform as a list of Riot PUUIDs. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialConsoleFriendsList"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/friend-list/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only - will return existing list of platform friends otherwise. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialConsoleFriendsList"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/multiplayer-permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the current player has permissions from the platform to use multiplayer features and if not, why that is the case. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialMultiplayerPermissionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/platform-profile": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscriptions to this endpoint will be notified when the platform's system UI for displaying a user profile is invoked and dismissed. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/text-permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the current player has permissions from the platform to use text chat and if not, why that is the case. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialTextPermissionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/users-communication-permissions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns communications permissions for a given set of users from the platform and if not, why that is the case. ",
        "parameters": [
          {
            "in": "query",
            "name": "checkForCrossNetworkFriend",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "checkForCrossNetworkUser",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "uids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialUserCommunicationPermission"
                }
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/voice-permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns if the current player has permissions from the platform to use voice chat and if not, why that is the case. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialPlatformSocialVoicePermissionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/platform-ui/v1/enabled": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns true if platform-ui is enabled ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/platform-ui/v1/sdk-instance-id": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns sdk instance id to be used with platform-ui views, necessary when running multiple instances of the SDK ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/platform-ui/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns current status of UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUiPlatformUIState"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/active": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current active game name for the player. \n [Help] Deprecated, please use v1/display-name to get the players game name and tag.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/player-account/aliases/v1/aliases": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets a list of all aliases for the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets a new set of aliases for the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1StatusResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/display-name": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current active, sanitized, game name and tag for the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountGameNameAndTagLine"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/lookup": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Lookup a list of aliases with the provided gameName and optional tagLine. ",
        "parameters": [
          {
            "in": "path",
            "name": "gameName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "tagLine",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasLookupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/required": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is required to set their name. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1RequiredResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/config/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The current plugin configuration. \n [Help] Debug information allowing the ability to introspect the current plugin config.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPlayerAccountPluginConfig"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/login-history/v1/debug/cache": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] This endpoint is used to get the content of cache.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/PlayerAccountV1PlayerLoginLocationHistory"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] This endpoint is used to set the content of cache.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PlayerAccountV1PlayerLoginLocationHistory"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/promotion/v1/eligibility": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Return the latest cached eligibility check. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1EligibilityCheckResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is eligible for promotion. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1EligibilityCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/promotion/v1/fields": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a list of fields the player can update. \n [Help] Returns an empty list until an eligibility check has been performed.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1UpdateableFieldsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/regions/v1/available": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a list of available LoL regions for the currently signed in player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountRegionsV1AvailableRegionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/regions/v1/eligibility": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is eligible for regions selection. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountRegionsV1EligibilityCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/vng/v1/profile/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch a VNG profile of the currently signed in player. \n [Help] Deprecated. To be removed August 2025.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1Profile"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a VNG profile for the currently signed in player. \n [Help] Deprecated. To be removed August 2025.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1SetProfileResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountVngV1Profile"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/player-account/vng/v1/status/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check cache to see if a player must register with the Vietnamese government; otherwise, check with VNG (via the Player Account Service). ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1StatusResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check with VNG (via the Player Account Service) to see if a player must register with the Vietnamese government. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/vng/v1/status/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Whether VNG status endpoints are ready to handle requests (RSO access token exists) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/config/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The current plugin configuration. \n [Help] Debug information allowing the ability to introspect the current plugin config.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityPluginConfig"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/config/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The current plugin readiness. \n [Help] Returns the current readiness of the plugin.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityPluginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v1/token/{product}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the cached product affinity token. \n [Help] Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token/{product}'.",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v2/cached-affinity/{product}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the cached product affinity. ",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityCachedProductAffinity"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v2/token/{product}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the player product affinity token. ",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/service/v2/cached-affinity/{service}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the cached service affinity. ",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityCachedServiceAffinity"
                }
              }
            }
          }
        }
      }
    },
    "/player-behavior-token/v1/jwt": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the currently cached Player Behavior Token as a raw jwt (base64 encoded). Use this endpoint when you want to pass the PB Token to another backend service. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/player-behavior-token/v1/jwt/payload": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the currently cached Player Behavior Token's payload as a json blob. Use this endpoint when you want to use the PB Token locally, such as for displaying the data to the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/player-behavior-token/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the ready state of the Player Behavior Token. Use this endpoint when you want to check the ready state of the PB Token plugin. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/player-preferences/v1/data/{type}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get decompressed and decoded player preferences information from a specified type from the Player Preferences service as string ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Puts any string for the specified type into the Player Preferences service ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/player-preferences/v1/data-json/{type}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Puts any valid JSON object for the specified type into the Player Preferences service ",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/player-preferences/v1/data-json/productId/{productId}/type/{type}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get decompressed and decoded JSON player preferences information from a specified type from the Player Preferences service ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Puts any valid JSON object for the specified type into the Player Preferences service ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/player-preferences/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "True if the plugin is ready to be used ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/reporter-feedback": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a list of unacknowledged localized reporter feedback messages to show the player. \n [Help] \n**Data**\n* Response is a JSON map of `id` --> individual reporter feedback messages. Example:\n```json\n{\n\"1\": {\n\"locale\": \"en_US\",\n\"product\": \"league_of_legends\",\n\"category\": \"CHEATING\",\n\"recipientType\": \"\",\n\"message\": \"Your report of cheating has been verified.\",\n\"title\": \"Report Feedback\"\n}\n}\n```\n\n* `locale`: Detected locale of player and what locale the message was localized to.\n* 'product': The product that this game is intended for. Can be a specific product, such as \"league_of_legends\", or it can be \"riot\", denoting that it's for all/any product to view.\n* `category`: Category of the report--an internal string. Category keys to different localized messages.\n* 'recipientType': Category of the recipient's role in the report--an internal string. recipientType keys to different localized messages. Examples are \"BYSTANDER\" or \"\". Empty string denotes the recipient was the Reporter, for backwards compatibility with old messages.\n* `message`: Localized message to display to player.\n* `title`: Localized message title to display to player.\n\nResponse will be an empty map `{}` if there are no reporter-feedback messages to display.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/PlayerReportingLocalizedReporterFeedbackMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For Integration test & debugging use only. \n [Help] \n**Description**\n\nReturns `true` if the plugin is ready to receive reports. Note that from the perspective of plugin customers submitting reports,\nreports can be \"successfully submitted\" even if the plugin is not ready to receive reports. This is an intended experience.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/authorization-consent": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authorization consent status for PlayStation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update authorization consent status for PlayStation ",
        "parameters": [
          {
            "in": "query",
            "name": "AuthorizationConsent",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/playstation-account/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve PlayStation Account plugin config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountConfig"
                }
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/player-nickname": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the player nickname of the Playstation Account for the player logged in the Playstation device ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/player-nickname-without-consent": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the player nickname of the Playstation Account for the player logged in the Playstation device without checking for consent authorization ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/premium-status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve Playstation+ status. This endpoint only evaluates the status on initialization and does not update if the subscription status updates for the signed in user after initialization. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountPremiumStatus"
                }
              }
            }
          }
        }
      }
    },
    "/plugin-manager/v1/status": {
      "get": {
        "tags": [
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ],
        "description": "Get the status of the plugin manager. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginManagerResource"
                }
              }
            }
          }
        }
      }
    },
    "/plugin-manager/v2/descriptions": {
      "get": {
        "tags": [
          "Plugin Manager",
          "Plugin Manager Info"
        ],
        "description": "Get all plugin descriptions. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PluginDescriptionResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plugin-manager/v2/descriptions/{plugin}": {
      "get": {
        "tags": [
          "Plugin Manager",
          "Plugin Manager Info"
        ],
        "description": "Get a plugin description. ",
        "parameters": [
          {
            "in": "path",
            "name": "plugin",
            "description": "Plugin name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginDescriptionResource"
                }
              }
            }
          }
        }
      }
    },
    "/plugin-manager/v2/plugins": {
      "get": {
        "tags": [
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ],
        "description": "Get diagnostic information for all plugins. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PluginResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plugin-manager/v2/plugins/{plugin}": {
      "get": {
        "tags": [
          "Plugin Manager",
          "Plugin Manager Diagnostics"
        ],
        "description": "Get diagnostic information for a single plugin. ",
        "parameters": [
          {
            "in": "path",
            "name": "plugin",
            "description": "Plugin name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginResource"
                }
              }
            }
          }
        }
      }
    },
    "/privacy/v1/tracking": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves privacy tracking settings and state. \n [Help] \n**iOS specific considerations**\n\nWhen the setting is changed while the game is in the background, the RiotGamesApi currently does not\nimmediately get notified of a change in tracking permissions, but checks again as those permissions\nare required, and notifies on change. If games need real-time access to tracking settings after a\nbackground, calling this endpoint after a return from background will force the SDK to look for\nsetting changes immediately and will also trigger a notification if the value has changed.\n\n**Response Codes**\n- `200`: Privacy settings and state are available.\n\n**Data**\n- `canUseTracking`: If `true`, the player's tracking information can be used.\n- `canRequestTrackingPermission`: If `true`, POST /privacy/v1/tracking/request-permission to request\n  permission to track the player.\n- `state`: Indicates if we have not yet requested tracking permissions (`Unrequested`), if we are\n  in the process of requesting permission to track (`Requesting`), and if we have completed that\n  request at any time in the past (`Completed`).\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivacyPrivacySettings"
                }
              }
            }
          }
        }
      }
    },
    "/private-settings/v1/settings/{userid}/{key}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For facilitating testing. Plugins should access private-settings via config key `private.user.<userid>.<key>`. ",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an individual private setting configuration. Upon success, configuration data within `private.user.<userid>.<key>` is updated and platform-specific settings 'save' systems are notified. ",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/private-settings/v1/token/{userid}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Only valid after a token has been restored or reset via PUT. Subscribe (or call) to this endpoint to receive updates on modifications to the private-settings for the given `userId`. Host applications should include this token with platform-specific data saves for the `userId`. \n [Help] API only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Submit settings token after loading last-known saved data for the current device user.\nIf no save data or token exists for user, submit an no token or an empty string to reset private-settings for user. \n [Help] Only call once per user, per session.\n\nAPI only enabled when `private-settings.multi-user-mode` is set to `true` (Consoles default `true`, else `false`).\n\n`token` refers to a compressed and url-safe base64 encoded token of private settings for the user.\n\n`userId` in this API refers to the platform-specific identifier for an active profile or user account.\n\n * xbox: XUID\n * playstation: Account ID\n * switch: NSA ID\n\nPlatforms not listed do not need to use this API, as private settings persistence is managed by this SDK.",
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/process-control/v1/process": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns information about the process-control. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessControlProcess"
                }
              }
            }
          }
        }
      }
    },
    "/process-control/v1/process/client-did-restart": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "return true if client has restarted ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/product-integration-deps/v1/app-update/statuses/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current app update status for a given product and patchline \n [Help] This returns the app update status for a given product and patchline.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Push the current app update status for a given product and patchline \n [Help] This sets the app update status for a given product and patchline, allowing a game to respond to whether or not it requires an update.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationDepsAppUpdateStatus"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/app-update/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Indicates the state of the primary patchline (or App Store app) for the running game. \n [Help] Indicates the state of the primary patchline (or App Store app) for the running game.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
                }
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/debug/app-update/statuses": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to get a list of all the app update statuses \n [Help] This will return a map of session ids for open games to update statuses",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductIntegrationDebugAppUpdateStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/debug/app-update/statuses/{sessionId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to get an update status by session id \n [Help] The session id should match one from a running game",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to update the app's update status by session id \n [Help] Debug endpoint to update the app's update status by session id",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/detached-sessions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Finds standalone external product sessions from other closed or active instances of this application ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductIntegrationDetachedSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/locale": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the locale the product should be running with. Prioritizes the product locale setting, followed by the SDK locale, and falling back to `en_US` if all else fails. \n [Help] Returns the locale the product should be running with. Prioritizes the product locale setting, followed by the SDK locale, and falling back to `en_US` if all else fails.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies the locale specified in the body to the product currently running. Locale should be in language_country format. for example, zh_CN or ko_KR \n [Help] \n## Context\nThis function is being added the support the ability for standalone games to set product locale. The behavior works as follows:\n- First verify that the locale attempting to be set is listed as an available product locale. No actual validation is done on the product locale itself, just that it is present\nin the list of available locales stored in the configuration keyed locale_data.available_locales.\n- After confirming the validity, we attempt to find the product settings file. If it exists, it means that we are in standalone SDK mode. We then propagate the locale to the file\nto persist it across sessions\n- If the file does not exist, it means that we are being run through the Riot Client, and instead we call the `PUT /riotclient/product-locales/products/%s/patchlines/%s`\nendpoint to set the product locale for that product + patchline combination.\n\n### Legacy support\nLeague of Legends unofficially supports players setting their locale to values that are not available to the region. For example, setting their NA client to ja_JP. This is done\ncurrently via modifying the LeagueClientSettings.yaml file and explicitly setting their locale to their locale of choice. We want to continue to support this behavior on behalf\nof League. This function does not modify the validation or ability to override your locale. The validation done here on this function behaves the same as the existing Riot Client\nvalidation, which continues to allow for player modifications.\n\nIf that should change in the future, this function will need to be updated to reflect the changes as well as the `PUT /riotclient/product-locales/products/%s/patchlines/%s` endpoint.\n\n## Arguments\n- locale\n  - the 4 letter code representing the country + language specified separated by an underscore. For example, ja_JP is Japanese, and en_US is US English.\n  - no validation on the 4 letter codes are done; we merely check for its existence in the list of available locales.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationLocaleUpdate"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/locale/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the locale of the product setting if in Standalone mode, or else returns the locale of the product/patchline setting in Riot Client \n [Help] \n## Context\nThis endpoint is similar to the `GET /product-integration/v1/locale` endpoint except that the product and patchline IDs are provided. Note that the product and patchline IDs are only used if Standalone mode is NOT enabled since it takes priority.\n\nThis endpoint was added to give game teams the flexibility to switch between Standalone mode and Riot Client mode via configuration (no code changes). As soon as all games have migrated to Standalone mode, we can remove this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies the locale specified in the body to the product and patchline provided. Locale should be in language_country format. for example, zh_CN or ko_KR \n [Help] \n## Context\nThis endpoint is similar to the `PUT /product-integration/v1/locale` endpoint except that the product and patchline IDs are provided. Note that the product and patchline IDs are only used if Standalone mode is NOT enabled since it takes priority.\n\nThis endpoint was added to give game teams the flexibility to switch between Standalone mode and Riot Client mode via configuration (no code changes). As soon as all games have migrated to Standalone mode, we can remove this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationLocaleUpdate"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/signout/permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Indicates if a product is allowed to request signout from the Riot Platform for all running products \n [Help] If an error is returned, signout is not allowed. This is intended to be called by desktop games that are launched by Riot Client. Mobile and console products may call it and it will always be Allowed. Callers can use this information to take specific action (e.g. showing signout button or not).",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationSignoutPermission"
                }
              }
            }
          }
        }
      }
    },
    "/product-launcher/v1/launching_from_xbgp": {
      "get": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "return a boolean value if we should show the xbox linking modal which shows in the install and play flows ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "set if we are in a xbgp play flow that will display the linking modal ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-localization/v1/data": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns loc plugin data - for triaging issues with bad or missing loc data ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductLocalizationProductLocalizationData"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-localization/v1/products/{productId}/patchlines/{patchlineId}/translations/{locale}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns translations for a specified patchline and locale or fetches them if they are not yet fetched ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-localization/v1/products/{productId}/translations/{locale}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns translations for a specified product and locale or fetches them if they are not yet fetched ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/cookies": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves all cookies necessary to access any URI associated with any patchline. \n [Help] Returns a list of cookies associated with URIs that point to patchline resources.\n\nIt's not necessary to use the results of this endpoint manually; when the list is updated, `/cookie-jar/v1/cookies` is automatically updated with the new set of cookies.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataCookieVector"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/debug/mock-data/{source}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the current set of mock data for the plugin. \n [Help] `source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataDebugClientConfigSource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the current set of mock data for the plugin. \n [Help] `source` may be one of `public` or `player`, indiciating which data set from client-config the mock data represents.\n\nThe entire data set is replaced in one call; partial updates are not supported. The best way to edit the current set of data is to use `GET /debug/mock-data`, modify the result, and `PUT` using this endpoint.\n\nSome minor fixups are performed with the provided data to ensure it is consistent. The plugin treats this as a 'oh hey, there is new data for client-config' event, and behaves appropriately.",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductMetadataDebugClientConfigSource"
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/definitions/products": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve brief definitions of all entitled products. \n [Help] Returns the same data available via the `/products` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductDefinitionMap"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/definitions/products/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a brief definition of a specific product. \n [Help] Returns the same data available via the `/products/{productId}` resource, except patchlines are returned as a list of patchline IDs, rather than full patchline definitions.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a list of secondary patchlines. \n [Help] Returns a list of secondary patchlines from the specified patchline inside the specified product, including associated metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMap"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/products/{productId}/patchlines/{patchlineId}/secondary-patchlines/{secondaryPatchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a secondary patchline within a patchline. \n [Help] Returns secondary patchline metadata from the specified patchline inside the specified product.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "secondaryPatchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v1/publish-states/{configType}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the publish state of products of config type (public or player). \n [Help] Returns Published or NotPublished",
        "parameters": [
          {
            "in": "path",
            "name": "configType",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPublishState"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v2/products": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a full list of all entitled products and patchlines. \n [Help] Returns all entitled products, with all metadata for patchlines and secondary patchlines associated with the product.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductMetadataMap"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v2/products/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a single product and all its entitled patchlines. \n [Help] Returns a single entitled product, with all metadata for patchlines and secondary patchlines associated with the product.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataProductMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v2/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a single patchline. \n [Help] Returns a single patchline within a product, with all associated metadata, including any secondary patchlines.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v2/products/{productId}/player-affinity-token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves player affinity token for a single product. \n [Help] Returns an id of single product with a map of its player affinities.",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataPlayerAffinityProductToken"
                }
              }
            }
          }
        }
      }
    },
    "/product-metadata/v2/region-locale": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current region and locale. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMetadataRegionLocale"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/data/path": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the standard data folder for your application ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/data/path/{patchline-name}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the standard logs folder for a given full patchline name. ",
        "parameters": [
          {
            "in": "path",
            "name": "patchline-name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/external-sessions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all sessions across products external to Riot Client. e.g. just games and not the UX product. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductSessionSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/external-sessions/{session-id}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the session for a specific session ID for a product external to Riot Client. e.g. just games and not the UX product. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/heartbeat/{session-id}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Deprecated. Please use POST /product-session/v2/heartbeat. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/product-session/v1/host-session": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetches the session of the 'host app', if it exists for this platform. \n [Help] A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSession"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Handles creation of a new session for the 'host app' \n [Help] A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionSession"
              }
            }
          }
        }
      }
    },
    "/product-session/v1/host-session/id": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetches the session ID of the 'host app', if it exists for this platform. \n [Help] A 'host session' may be created for the application that Foundation is running within, used on mobile or console platforms.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/logs/path": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the standard logs folder for your application ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/logs/path/{patchline-name}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the standard logs folder for a given full patchline name. ",
        "parameters": [
          {
            "in": "path",
            "name": "patchline-name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/session-heartbeats/{session-id}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Only intended to be called by product launchers, like Riot Client.] Get the heartbeat for a specific session ID. \n [Help] The heartbeat is split out from the normal session endpoint because it changes frequently, and it would be slow to notify all the subscribers that care about game starting and stopping but not heartbeats.",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSessionSessionHeartbeat"
                }
              }
            }
          }
        }
      }
    },
    "/product-session/v1/sessions": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all sessions across products. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ProductSessionSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product-update-scanner/v1/scan-and-patch/next-scheduled": {
      "get": {
        "tags": [
          "Plugin product-update-scanner"
        ],
        "description": "Returns date-time of next scheduled scanning ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/publishing-content/v1/news-feed": {
      "get": {
        "tags": [
          "Plugin publishing-content"
        ],
        "description": "Returns the news feed content for the product details page for the productId ",
        "parameters": [
          {
            "in": "path",
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "multigamePromoChannelId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "productId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishingContentNewsFeed"
                }
              }
            }
          }
        }
      }
    },
    "/publishing-content/v1/non-player-promo/{productId}": {
      "get": {
        "tags": [
          "Plugin publishing-content"
        ],
        "description": "Returns the promotional publishing content for the non player product details page for the productId ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishingContentNewsFeed"
                }
              }
            }
          }
        }
      }
    },
    "/publishing-content/v1/promo/{productId}": {
      "get": {
        "tags": [
          "Plugin publishing-content"
        ],
        "description": "Returns the promotional publishing content for the product details page for the productId ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "locale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishingContentNewsFeed"
                }
              }
            }
          }
        }
      }
    },
    "/rc-auth/v1/xbgp/login-status": {
      "get": {
        "tags": [
          "Plugin rc-auth"
        ],
        "description": "Get the login status for player related to xbox game pass ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RcAuthLoginStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/restriction/v1/launchRestrictedProducts": {
      "get": {
        "tags": [
          "Plugin restriction"
        ],
        "description": "Returns all product ids the player is launch restricted for ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restriction/v1/launchRestrictions": {
      "get": {
        "tags": [
          "Plugin restriction"
        ],
        "description": "Returns all launch restrictions for the logged in player ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestrictionLaunchRestrictions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restriction/v1/ready": {
      "get": {
        "tags": [
          "Plugin restriction"
        ],
        "description": "Returns true when the plugin is ready. Consumers are expected to wait until the plugin is ready to request restrictions ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-app-command/v1/uri-handler": {
      "get": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Returns 204 if a URI handler is registered for this client, and 404 otherwise ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Attempts to configure a URI handler for this client, elevating if necessary ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-auth/v1/authorization": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The player's RSO tokens \n [Help] *Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO Access Token for the SDK, intended for internal use by plugins that don't provide game-specific data.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiAuthorization"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-auth/v1/home-base-country": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The player's home base country \n [Help] *Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the home base country provided by RSO, intended for internal use by plugins that don't provide game-specific data.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiHomeBaseCountry"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-auth/v1/login-country": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "The player's login country \n [Help] *Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the login country provided by RSO, intended for internal use by plugins that don't provide game-specific data.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiLoginCountry"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-auth/v1/rso-client": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch the SDK's RSO client details. \n [Help] *Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides the RSO client ID and any other required client details for game-agnostic authorization business logic.\n\nSee [RSO's Client documentation](http://accounts.docs.rpg.riotgames.io/docs/clients/index/)For more context.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiClientDetails"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-auth/v1/userinfo": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Public claims about the player \n [Help] *Internal Riot Client API. Please don't use outside of Riot Client.*\n\nProvides game-agnostic, unencrypted claims about the player intended for use by Riot Client's UI and internal plugins. Note that these claims are neither signed nor encrypted, and should not be sent to remote services as authoritative.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientAuthApiUserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle-state/v1/state/{state}": {
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle-state"
        ],
        "description": "Retrieve the contents a named state, along with last-acked serial numbers. ",
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientLifecycleStateBoundState"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle-state/v1/state/{state}/{param}/subscriber/{subscriber}": {
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle-state"
        ],
        "description": "Retrieve the contents a named state, along with the last-acked serial number for a particular subscriber. ",
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "param",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "subscriber",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientLifecycleStateBoundState"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle-state/v1/state/{state}/subscriber/{subscriber}": {
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle-state"
        ],
        "description": "Retrieve the contents a named state, along with the last-acked serial number for a particular subscriber. ",
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "subscriber",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotClientLifecycleStateBoundState"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/league-region-election": {
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Returns a structure containing the current state of League account election for the logged in account. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueRegionElectionResource"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Sets League account election information for the current account -- specifically, 'selectedRegions'. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionAssignmentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegionLocale"
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/product-context-phase": {
      "get": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Returns the product context phase. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-friends/v1/friends": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Query Riot friends for the current player ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotFriendsChatFriends"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the Riot friends list stored in the plugin ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotFriendsChatFriends"
              }
            }
          }
        }
      }
    },
    "/riot-login/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the plugin config and enabled status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotLoginLoginPersistenceConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Allows to modify the plugin config (e.g. enable or disable login persistence) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotLoginLoginPersistenceConfig"
              }
            }
          }
        }
      }
    },
    "/riot-login/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current login state of the client ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotLoginLoginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/message/{a}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the resource based on component a \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "b",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "b",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "c",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "b",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "c",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "d",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "b",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "c",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "d",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "e",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Util endpoint that responds with any cached messages for the aggregate resource based on components a:b:c:d:e:f \n [Help] Endpoint deprecated and will be deleted October 2022.  Please use 'riot-messaging-service/v1/messages/{+path}'.",
        "parameters": [
          {
            "in": "path",
            "name": "a",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "b",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "c",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "d",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "e",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "f",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-messaging-service/v1/messages/{path}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscription endpoint to receive async notifications of push messages with the given resource path. \n [Help] Subscriptions can be for a fully qualified path (mock/v1/resource), a wildcard (mock/v1/ *) or a recursive wildcard (mock/ **).\n\nNote that subscriptions for your application cannot overlap or conflict, such that a subscription for `mock/ **` cannot coincide with a subscription for `mock/v1/resource`.",
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceMessage"
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/out-of-sync": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "This is subscribe-only endpoint. Notification on this resource is triggered if RMS session is out of sync. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/state": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Return all state ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiotMessagingServiceState"
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/user": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the PUUID that this plugin is currently authenticated for ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-status/v1/products/async/{productId}/patchlines/{patchlineId}/deployments/{deployment}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns raw JSON service status information for a specific game service cluster. This is an async version of the endpoint so it returns a succes with no body immediately and the status data will be sent to the client when it is available. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "deployment",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-status/v1/products/{productId}/patchlines/{patchlineId}/deployments/{deployment}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns raw JSON service status information for a specific game service cluster \n [Help] This endpoint has been deprecated and can block. Please use the async version /riot-status/v1/products/async/{productId}/patchlines/{patchlineId}/deployments/{deployment}",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "deployment",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riot-status/v1/riotclient": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns raw JSON service status information for issues affecting multiple games ",
        "parameters": [
          {
            "in": "query",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-status/v1/riotclient/async/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns raw JSON service status information for issues affecting multiple games. This is an async version of the endpoint so it returns a succes with no body immediately and the status data will be sent to the client when it is available. ",
        "parameters": [
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/app-name": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Application name without file extension ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/app-port": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the TCP port number that the remoting server is listening on. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/auth-token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Return the auth token used by the remoting server ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/build-number": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Numeric build number for this application ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/command-line-args": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the command line parameters for the application \n [Help] Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riotclient/get_region_locale": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current region and locale. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocale"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/machine-id": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Base64 encoded uuid identifying the user's machine ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/product-locales/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the locale of the product with the specified product and patchline id ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the locale of the product with the specified installId ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/riotclient/region-locale": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current region and locale. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocale"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the region and locale. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegionLocale"
              }
            }
          }
        }
      }
    },
    "/riotclient/secondary-args": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the command line parameters that occur after the '--' delimiter \n [Help] Command line arguments are deprecated, and will be removed June 2022. Use configuration directly.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riotclient/session-id": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "UUID identifying a user interaction session. This value is created when the user session begins (i.e. mobile game open, Riot Client starts). Multiple instances of the SDK may share the same session ID if they were launched by the same Riot Client user session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/system-info/v1/basic-info": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get basic system information: OS, memory, processor speed, and number of physical cores ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/basicSystemInfo"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/trace": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves a completed scheduler trace. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/v1/app-info": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Information about the application hosting the SDK ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfo"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/v1/platform-user": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Information about the currently active platform user ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUser"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the currently active platform user ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUser"
              }
            }
          }
        }
      }
    },
    "/riotclient/zoom-scale": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the last known posted zoom-scale value. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Handles changing the zoom scale value. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "The new value of the zoom scale.",
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      }
    },
    "/riotclientapp/v1/command-line-args": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the current list of command line arguments that are intended for Riot Client, that is, excluding secondary arguments that are intended for launched applications. The /riotclientapp/v1/new-args resource is updated when new command line arguments are added. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/riotclientapp/v1/isXbgpRunning": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "get if xbgp com server is running ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/riotclientapp/v1/secondary-args": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the list of secondary arguments used for launched applications. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-lifecycle/v1/league-region-election": {
      "get": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Returns a structure containing the current state of League account election for the logged in account. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetLifecycleLeagueRegionElectionResource"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Sets League account election information for the current account -- specifically, 'selectedRegions'. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetLifecycleRegionAssignmentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/rnet-lifecycle/v1/product-context-phase": {
      "get": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Returns the phase of the product context ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-pft/v1/surveys": {
      "get": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Gets the collection of surveys. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnetPftSurvey"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rnet-pft/v1/surveys/{id}": {
      "get": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Gets a specific survey by id. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetPftSurvey"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rnet-product-registry/v1/background-patching/state": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Return the current background patching state ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryBackgroundPatchingState"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v1/install-states": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves a map of product and patchline install states ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnetProductRegistryProductInstallStateResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v1/install-states/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the install state of the specified product and patchline ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryInstallState"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v1/move-install-states/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Get the status of a move request for a product, if it exists. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryMoveInstallStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/active-updates": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Get list of active updates ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnetProductRegistryProductPatchlineKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/available-product-locales/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the list of available locales for the given product and patchline. If the patchline is unavailable (i.e. it is a private product, and you are not logged in), the list of available locales will be returned from the .product_settings.yaml file, if it exists. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/install-settings/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the settings for the particular product and patchline, stored in the .product_settings.yaml file. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Sets the specified settings for the particular product and patchline, to the .product_settings.yaml file. Settings that are not specified in the body argument are not modified. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/install-settings/products/{productId}/patchlines/{patchlineId}/{path}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the settings for the particular product and patchline, stored in the .product_settings.yaml file. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Sets the specified settings for the particular product and patchline, to the .product_settings.yaml file. Settings that are not specified in the body argument are not modified. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-requests/products/{productId}/patchlines/{patchlineId}/dependencies": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Fetches whether or not each dependency is installed or not for the specified product/patchline combo. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-states/out-of-date": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Get list of out of date patchlines in format of list of { productId, patchlineId } ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnetProductRegistryPatchlineInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-states/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Get patch status for patchline ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryPatchingResource"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/player-products-state": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Returns the current state of player products ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryPlayerProductsState"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/products": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Returns the list of installable games and configurations in hierarchical format ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RnetProductRegistryProductV4"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/products/{productId}/patchlines/{patchlineId}": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Returns a patchline by id ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryProductPatchlineResourceV4"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Updates a patchline resource with these possible properties: 'patching-policy': describes whether a patchline is kept up-to-date automatically by Riot Client (auto), or if the user must choose when to patch the patchline (manual); 'patching-ask-policy': describes whether we should ask the user whether they want to keep the patchline automatically up-to-date after the first launch. This will be 'ask' if the user has never been asked before, and set to 'never' once they have been asked. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetProductRegistryPatchlineUpdate"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/public-products-state": {
      "get": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Returns the current state of public products ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryPublicProductsState"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-sanitizer/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the current status of the sanitizer plugin ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerSanitizerStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-self-update/v1/enabled": {
      "get": {
        "tags": [
          "Plugin rnet-self-update"
        ],
        "description": "Get if self-update is enabled. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plugin rnet-self-update"
        ],
        "description": "Enable or disable self-update. No-ops if permanently disabled (e.g. disabled by command line flags). ",
        "parameters": [
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-self-update/v1/status": {
      "get": {
        "tags": [
          "Plugin rnet-self-update"
        ],
        "description": "Get the status of the self-update plugin. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSelfUpdateStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/configuration/v3/amr-values-supported": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a list of supported authentication strategies. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3AMRValuesSupported"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/configuration/v3/client-id": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the default client ID for this application. Only available once /v3/ready-state is marked as ready. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/configuration/v3/openid-configuration": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the raw RSO openid configuration. This resource will be notified when the configuration is retrieved initially and when it's updated. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3OpenIdConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/configuration/v3/partner-auth-config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a partner auth config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3PartnerAuthConfig"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/configuration/v3/ready-state": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the ready state of the rso-auth plugin \n [Help] The rso-auth plugin relies on asynchronous fetching of multiple resources. This endpoint reflects whether or not all of those resources have been retrieved.\n\nThis endpoint also supports subscriptions.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthConfigV3ReadyState"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/access-token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's access token. \n [Help] If the player has a valid authorization, this API will return the player's access token, as well as their approximate expiration time and scope. This token can be used as the `Bearer` value of an `Authorization` header in order to make requets against services protected by RSO tokens. This token represents permission sets granted to the application by the player.\n\nAccess tokens expire. This plugin will handle refreshing access tokens automatically, but it's up to your plugin to either request an access token for each request, or subscribe to resource updated events for the token.\n\nAccess tokens are intended to be server-authoritative, despite being verifiable client-side as well. Scopes are included as a means for UIs to anticipate which scopes are available.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAccessToken"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rso-auth/v1/authorization/error": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves any error received from RSO during the last authorization attempt. \n [Help] If the player has failed to log in via RSO, and the HTTP error code cannot uniquely disambiguate the error encountered, provides more information about the error encountered in the form of the error and errorDescription provided from RSO via OAuth errors.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthError"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/id-token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a player's ID token. \n [Help] If the player has a valid authorization, this API will return the player's id token, as well as their approximate expiration time and a JSON object of the data it includes. This token includes details about the player, signed as a means of trust. These details--called claims--are data about the player that the RSO server deems to be true at the time of authentication. There is no guarantee that these details have not changed in the interim.\n\nId tokens are only created at login, and cannot be refreshed, as the system's trust that the claims remain true decays over time. Expired Id tokens may continue to be used informationally, but *must not* be trusted.\n\n**Note:** This API returns the token's expiry as seconds since the unix epoch. Do not trust this value locally in the client, as the player's system clock may be incorrect. This value is *deprecated*, and may be removed in a future version.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthIdToken"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rso-auth/v1/authorization/refresh-token": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a refresh and id token used to rehydrate an authorization on a new SDK launch. This endpoint should NOT be used for any other purpose than to persist an authorization across SDK launches. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthRefreshTokenRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Restore a player's refresh token along with an id token to refill some claims for the authorization. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthRefreshTokenRequest"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/home-base-country": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the players home base country (HBC). ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthHomeBaseCountry"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/logout-reason": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns latest logout reason. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthLogoutReason"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session/persistence": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the persistence value of this session as a `BindingProperty` which can be serialized to local storage. \n [Help] Returns a `BindingProperty` representing the serialized cookies that maintains the current session that can later be `PUT` back to restore the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Takes a `BindingProperty` and restores the session state. \n [Help] Takes the `BindingProperty` and tries to rehydrate the cookies to restore the session state which can be retrieved by doing a `GET` on this endpoint.\n\nThese cookies will automatically be appended to calls to `/v2/authorizations` and `/v1/session` endpoints as part of the session to restore, refresh and continue to use the session.\n\nThis endpoint is only available to Internal calls (plugin-to-plugin)\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/status-message": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current RSO status message ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthStatusMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the RSO auth status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthStatusMessage"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current client config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorPluginConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/session/info": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get additional session information for authentication purposes. ",
        "parameters": [
          {
            "in": "query",
            "name": "suuid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cluster",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1SessionInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/account-promotion/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current account promotion UI status ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiAccountPromotionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/configurations": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Introspect the current configuration ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/delete-account/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the current status of the Account Deletion UI initiated via /rso-mobile-ui/v1/delete-account. Most useful for a client to track whether or not an Account Deletion flow was cancelled or completed. \n [Help] \n**Response**\n* `status`: the current status of the Delete Account flow. Of type Api::AccountDeletionV1::AccountDeletionUIStatus.\n\n\nEndpoint to be deleted July 2025; Migrate to PlatformUI: '/platform-ui/v1/delete-account'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiAccountDeletionV1AccountDeletionUIStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/eula/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Get the current EULA UI status.\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiEULAUIStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/login/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current login UI status \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiLoginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/login/strategies": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Returns a list of strategies supported by the rso-mobile-ui plugin for this SDK version and client id\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RsoMobileUiLoginStrategyInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/region-election/eligibility": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is eligible for region election with UI \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRegionElectionV1EligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/riot-id-prompt/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Get the current Riot ID Prompt UI status.\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRiotIDPromptV1RiotIDPrompt"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v2/eula": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Get the current EULA UI V2 content.\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiEULAUIV2Config"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v2/eula/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Get the current EULA UI V2 status.\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiEULAUIV2Status"
                }
              }
            }
          }
        }
      }
    },
    "/scd/v1/cookies": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the list of cookies ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScdCookies"
                }
              }
            }
          }
        }
      }
    },
    "/scd/v1/enabled": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether SCD communication is enabled. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScdScdEnabled"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Activates communication to the SCD service. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScdScdEnabled"
              }
            }
          }
        }
      }
    },
    "/scd/v1/enabled-in-config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether SCD communication is enabled in confguration. \n [Help] This provides an indicator that SCD communication may become available if any requests are made and acts as an emergency kill-switch to disable requests to SCD service. Use /scd/v1/enabled to determine if SCD is currently enabled.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/social/v1/blocklist": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the consolidated block list combining Riot block list with the platform block lists ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialBlockList"
                }
              }
            }
          }
        }
      }
    },
    "/social/v1/blocklist/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialBlockList"
                }
              }
            }
          }
        }
      }
    },
    "/social/v1/friendrequests": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get friend requests \n [Help] **Response:** named requests root object: a flat list of friend request property groups with 'puuid' and GnT info inside (could have zero or more entries in list):\n\n```\n{\n  \"requests\": [\n    {\n      \"gameName\":     \"[friend gameName]\",\n      \"tagLine\":      \"[friend tagLine]\",\n      \"note\":         \"[friend note]\",     // Can be set to contain information about the friend request. (ex. recofriender saves the player name from social media here)\n      \"puuid\":        \"[friend puuid]\",\n      \"subscription\": \"pending_out\"        //either \"pending_out\" or \"pending_in\" (sent or received request)\n    }\n  ]\n}\n```\n",
        "parameters": [
          {
            "in": "query",
            "name": "puuid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendRequestListPuuid"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Add friend request / invite friend ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialFriendRequestPost"
              }
            }
          }
        }
      }
    },
    "/social/v1/friends": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "When subscribed to this endpoint will notify with the entire friend list on every create/update/delete. \n [Help] Endpoint deleted April 2024.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendListV1"
                }
              }
            }
          }
        }
      }
    },
    "/social/v1/friends/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. \n [Help] Endpoint deleted April 2024.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendListV1"
                }
              }
            }
          }
        }
      }
    },
    "/social/v1/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/social/v2/friends": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "When subscribed to this endpoint will notify with the entire friend list on every create/update/delete. \n [Help] Endpoint deleted August 2025.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendList"
                }
              }
            }
          }
        }
      }
    },
    "/social/v2/friends/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. \n [Help] Endpoint deleted August 2025.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendList"
                }
              }
            }
          }
        }
      }
    },
    "/social/v3/friends": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "When subscribed to this endpoint will notify with the entire friend list on every create/update/delete. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendListV3"
                }
              }
            }
          }
        }
      }
    },
    "/social/v3/friends/patch": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "For subscriptions only. On update and delete will notify with patches (changed elements only) rather than the full list. For a simple GET use the non-patch version of this URL. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialFriendListV3"
                }
              }
            }
          }
        }
      }
    },
    "/swagger/v1/api-docs": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the API documentation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swagger/v2/swagger.json": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the API documentation ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swagger/v3/openapi.json": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the API documentation ",
        "parameters": [
          {
            "in": "query",
            "name": "plugins_and_core_only",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system-info/v1/processes": {
      "get": {
        "tags": [
          "Plugin system-info"
        ],
        "description": "Returns all pids with cpu and memory usage data ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemInfoProcessInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/v1/application-start-time": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the millisecond UNIX timestamp of when the application was started. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/v2/metadata/{schemaPrefix}/{metadataEntity}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get all properties in the metadata ",
        "parameters": [
          {
            "in": "path",
            "name": "schemaPrefix",
            "description": "The schema 'world' prefix (i.e. riotclient, rtp, etc) to match against incoming AP events.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "metadataEntity",
            "description": "Name of the metadata entity that exists in every schema for the given prefix (i.e. metadata, riotclientMetadata, etc)",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/tencent-launcher/v1/login-info": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the mSDK credentials from the Tencent Launcher \n [Help] **Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n            Retrieves the Tencent Launcher LoginInfo (credentials) from the\n            ACLSDK. If logged in, the response will contain the required tokens\n            for RSO auth, or for auth with other Tencent services like Midas.\n\n            This endpoint may be subscribed to, and a notification will be\n            generated when:\n            * `/login` is successfully called, containing the Tencent-specific\n              credentials,\n            * The Tencent Launcher performs a periodic refresh of the credentials.\n\n            **Returns**\n            If `/login` has not yet successfully been called, a `404` error\n            code is returned.\n\n            If the login information is available, a structure is returned\n            containing the fields:\n            * `openid`\n            * `token`\n            * `channel`\n            * `ext`\n\n            These fields should be treated as opaque.\n        ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TencentLauncherTencentLauncherLoginInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tencent-launcher/v1/update-status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets the current update status. This will be no-update-available until ACLSDK tells us that there is an update. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TencentLauncherProductIntegrationAppUpdateStatus"
                }
              }
            }
          }
        }
      }
    },
    "/vanguard-session-manager/v1/status": {
      "get": {
        "tags": [
          "Plugin vanguard-session-manager"
        ],
        "description": "Returns the status of the current Riot Client Vanguard Session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanguardSessionManagerHealthCheckResult"
                }
              }
            }
          }
        }
      }
    },
    "/vanguard/v1/status": {
      "get": {
        "tags": [
          "Plugin vanguard"
        ],
        "description": "Returns the state of the Vanguard installation. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanguardPluginState"
                }
              }
            }
          }
        }
      }
    },
    "/vng/v1/profile/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch a VNG profile of the currently signed in player. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngV1Profile"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a VNG profile for the currently signed in player. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngV1SubmitProfileResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VngV1Profile"
              }
            }
          }
        }
      }
    },
    "/vng/v1/status/{productId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player must register with the Vietnamese government. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngV1StatusResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Refresh data from VNG if a player must register with the Vietnamese government. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngV1StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vng/v1/status/ready": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Whether VNG status endpoints are ready to handle requests (RSO access token is present) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/active-product": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current active product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/audio-properties": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get current audio properties ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatAudioPropertiesResource"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/block-list/{providerName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the current Block List of a voice provider. Internal use only ",
        "parameters": [
          {
            "in": "path",
            "name": "providerName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/heartbeat-metrics": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve a set of metrics about the voice chat plugin. \n [Help] This endpoint retrieves metrics about active sessions and products that are currently using the voice-chat plugin. It is an internal endpoint, intended for use directly by the info-radiator plugin, which manages the heartbeat cadence of the SDK.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/push-to-talk": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get voice chat push to talk configuration status \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set voice chat push to talk configuration \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/status": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the status of the voice-chat plugin to know whether or not to expect if the feature is usable. \n [Help] \n**Description**\nGet the status of the voice-chat plugin to know whether or not to expect if the feature is usable. Game teams are encouraged to subscribe\nto this endpoint so that the game can behave correctly depending on what the current state of the plugin is. For example, if the status of\nthe plugin is `permissionDenied`, game teams should not attempt to join voice sessions since the player does not have permissions to do so,\npossibly due to behavioural restrictions or parental control settings.\n\n** Returns **\n\nA PluginStatus value representing the current status of the plugin.\n* `PluginStatus` values:\n    * `unknown`: The status of the plugin is currently unknown. This is the default value while the plugin is initializing and its status has yet to be determined.\n    * `awaitingAuth`: The player has not signed in, so the plugin does not have the information required to join a voice session.\n    * `permissionUnknown`: The player has signed in, but the plugin is unable to look up whether or not the player has permission to use voice chat.\n         Attempting to join a voice session will not work until the permission query succeeds.\n    * `permissionDenied`: The player has signed in, but the player does not have permission to use voice chat. Attempting to join a voice session will always\n         return an error and existing sessions will be left.\n    * `ready`: Voice chat is usable and voice sessions can be joined.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPluginStatus"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/devices/capture": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the list of available sound capture devices ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatDeviceResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/devices/capture/permission": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns true if the user has permission to use the microphone. \n [Help] Use this endpoint to determine if the user has granted access to the microphone for voice. Returns an enum that indicates if permission is denied/granted, or if permission needs to be obtained through the prompt-for-permission endpoint.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatCaptureDevicePermissionStatus"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/devices/render": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the list of available sound render devices ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoiceChatDeviceResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/push-to-talk/{productName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get voice chat push to talk configuration status \n [Help] Endpoint is deprecated and will be deleted. Please check /voice-chat/v3/push-to-talk/",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkResource"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set voice chat push to talk configuration \n [Help] Endpoint is deprecated and will be deleted. Please check /voice-chat/v3/push-to-talk/",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkResource"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/voice-chat/v2/sessions/{sessionId}/participants/{participantId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get participant details \n [Help] Endpoint deleted March 2021.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update local participant details \n [Help] Endpoint deleted March 2021.",
        "parameters": [
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/settings": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get current voice chat settings \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSettingsResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update current voice chat settings \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSettingsResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/state": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the connection state \n [Help] Always returns true. SDK inititalize/authenticate/authorize is now done when creating/joining a voice session/channel\n\nEndpoint deleted October 2020.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatStateResource"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v3/push-to-talk/{productName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get voice chat push to talk configuration state \n [Help] Returns a structure with the current PTT state\nisEnabled: Is push-to-talk enabled?\nmode: (Exclusive) PTT channels will automatically mute other channels when they are enabled \n      (Inclusive) Other channels will stay open when PTT channels are enabled \npttSessions: Array with current PTT channel`s transmit states\n\tsessionId: channel identifier\n\ttransmit: defines if the channel should have voice channel open or not",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set voice chat push to talk configuration \n [Help] Allows the game to toggle voice channel's PTT state\nNOTE: Games should use their own input state to toggle transmit state of PTT channels. It DOES NOT bind into OS input.\nisEnabled: Is push-to-talk enabled?\nmode: (Exclusive) PTT channels will automatically mute other channels when they are enabled \n      (Inclusive) Other channels will stay open when PTT channels are enabled \npttSessions: Array with PTT channel`s transmit states\n\tsessionId: channel identifier\n\ttransmit: defines if the channel should have voice channel open or not",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatV3PushToTalkResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v3/push-to-talk/{productName}/{sessionId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get voice chat push to talk transmit state for a specific channel \n [Help] Returns a structure with the current PTT state of a specific channelor returns an error if there is no PTT channel with the provided id\n\tsessionId: channel identifier\n\ttransmit: defines if the channel should have voice channel open or not",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatPushToTalkTransmitState"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set voice chat push to talk transmit state for a specific channel \n [Help] Updates the transmit state of a specific channel or returns an error if there is no PTT channel with the provided id\n\tsessionId: channel identifier\n\ttransmit: defines if the channel should have voice channel open or not",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatPushToTalkTransmitState"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v3/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get participant details \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update local participant details \n [Help] Endpoint deprecated and will be deleted November 2022.  Please use /voice-chat/v4/sessions/{productName}",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/voice-chat/v3/settings/{productName}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get current voice chat settings ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSettingsResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update current voice chat settings ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSettingsResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v4/sessions/{productName}/{sessionId}/participants/{participantId}": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get participant details ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatParticipantResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update local participant details ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "participantId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateParticipantResource"
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/authorization-consent": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authorization consent status for Xbox ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update authorization consent status for Xbox ",
        "parameters": [
          {
            "in": "query",
            "name": "AuthorizationConsent",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/xbox-account/v1/config": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve Xbox Account plugin config ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountConfig"
                }
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/modern-gamertag": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get player's Xbox Modern Gamertag (modern / modern suffix / unique modern) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountModernGamertag"
                }
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/player-nickname": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get player's Xbox Classic Gamertag (with checking authorization consent) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/player-nickname-without-consent": {
      "get": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get player's Xbox Classic Gamertag (without checking authorization consent) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-pft/v1/surveys/{survey-id}/questions/{question-id}": {
      "patch": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Updates the specified question response. ",
        "parameters": [
          {
            "in": "path",
            "name": "survey-id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "question-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/agent/v1/connection-info": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Method for the agent to inform Foundation about how to connect ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionInfo"
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests/create-uri-handler": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Create URI handler under Registry to launch from riotclient:// uri ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UriHandlerRequest"
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests/prepare-directory-permissions": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Prepare permissions on a collection of directories for use by all users ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreparePermissionsRequest"
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests/prepare-permissions": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Prepare permissions on a collection of paths for use by all users ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreparePermissionsRequest"
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests/register-watch-path": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "[Mac] Register a watch path, which the agent will check for existence ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterWatchPathRequest"
              }
            }
          }
        }
      }
    },
    "/agent/v1/requests/third-party-dependency": {
      "post": {
        "tags": [
          "Plugin agent"
        ],
        "description": "Queue a third party dependency for install ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThirdPartyDependencyRequest"
              }
            }
          }
        }
      }
    },
    "/anti-addiction/v1/products/{productId}/anti-addiction-state": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Test API for triggering anti-addiction state for testing purposes ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AntiAddictionAntiAddictionState"
              }
            }
          }
        }
      }
    },
    "/chat/v1/debug/finalize/initialize": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "debug finalize and initialize ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v1/resume": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resume operations, connect to the chat service, and perform other operations specified on suspend ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v1/session/connect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "force to chat to connect & allow reconnects ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v1/session/debug/terminate/{product}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate termination of a product to the chat plugin ",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v1/session/disconnect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "force chat to disconnect & disallow reconnects ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v1/session/platform": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the chat session's League of Legends platform id ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionPlatform"
              }
            }
          }
        }
      }
    },
    "/chat/v1/social": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get game/product social data for building the friend list UI ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSocialData"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSocialDataReq"
              }
            }
          }
        }
      }
    },
    "/chat/v1/suspend": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Suspend operations, disconnect from the chat service, and disallow reconnects ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionSuspendConfig"
              }
            }
          }
        }
      }
    },
    "/chat/v2/session/connect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "force to chat to connect & allow reconnects ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v2/session/debug/terminate/{product}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate termination of a product to the chat plugin ",
        "parameters": [
          {
            "in": "path",
            "name": "product",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v2/session/disconnect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "force chat to disconnect & disallow reconnects ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chat/v2/session/platform": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the chat session's League of Legends platform id ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionPlatform"
              }
            }
          }
        }
      }
    },
    "/chat/v3/me/debug-jwt": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate updating a game presence with jwt (server authoritative info) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatDebugChatGamePresence"
              }
            }
          }
        }
      }
    },
    "/chat/v6/conversations/read": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mark conversation as read \n [Help] Endpoint deleted August 2021; Please use '/chat/v7/conversations'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          }
        }
      }
    },
    "/chat/v7/conversations/read": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mark conversation as read ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatConvoCid"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/{id}/whispers/{puuid}/messages": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a whisper to the specified puuid of the specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxMessagePost"
              }
            }
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/read": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mark all messages as read in a specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/messages/whispers/{puuid}/read": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mark messages as read for a specified whisper channel in a specified chatbox ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chatbox/v1/chatboxes/{id}/no-channel": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/chatbox/v1/global-broadcast": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sends a broadcast for all chatboxes and default channels ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatboxChatboxMessagePost"
              }
            }
          }
        }
      }
    },
    "/commerce/v1/store/purchase": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initiate the purchase of a store product. \n [Help] \n**Description**\nThis endpoint initiates a store product purchase request and returns a status response.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceV1PurchaseResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceV1PurchaseRequest"
              }
            }
          }
        }
      }
    },
    "/data-store/v1/reload-product-settings/products/{productId}/patchlines/{patchlineId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Reload all settings for the specified product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/delete-account/cancelled": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Player Support page calls this endpoint when account deletion flow is cancelled ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/delete-account/completed": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Player Support page calls this endpoint when account deletion is completed ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/delete-account/error": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Player Support page calls this endpoint when an error occurs during account deletion flow ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/eula/v1/agreement/content/retry": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Attempt to asynchronously fetch the current version EULA content if it previously failed to load. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/eula/v1/debug/agreement/force-requirement": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Forces client into requiring acceptance ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/first-party-fulfillment/v1/fulfill": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initiate a fulfillment attempt \n [Help] \n**Description**\n\nThis API will check if the user has made any purchases on the first party store and will attempt to fulfill them.\nThis should typically be called when the game is launched or resumed.\n\n** Request Arguments **\n\nRequest Body:\n* `firstPartyAuthToken`: Authentication token for the first party platform required to perform fulfillment.\n    * On Nintendo Switch, provide the NSA ID token if available. Otherwise, RiotGamesApi will fetch the NSA ID token itself.\n    * On Playstation 4 and Playstation 5, provide an NP auth code that includes the \"psn:s2s\" and \"openid\" scopes.\n    * On Xbox, no token is required and an empty string can be provided.\n* `fulfillmentId`: UUID that identifies a unique fulfillment attempt.\n* `fulfillmentReason`: The reason why the fulfillment attempt was made. Possible options are listed below:\n    * `GameLaunched`: Fulfillment was initiated because a purchase may have occurred while the game was not running.\n    * `GameReturnedToForeground`: Fulfillment was initiated because a purchase may have occurred while the game was in the background.\n    * `PurchaseCompleted`: Fulfillment was initiated because a purchase was completed (likely from the in-game store).\n    * `Other`: DO NOT USE without consulting the SDK Features team first. This is a fallback reason for why a fulfillment was initiated if it\n      is not covered by any of the existing reasons. However, you should only use this if SDK Features is not able to add a reason that covers\n      your use case before you need to use it and once SDK Features does add the reason, you are expected to update to using it as soon as it\n      has been made available in the next SDK release.\n\n** Returns **\n\nResponse Body:\n* `FulfillmentResponse` Object:\n    * `fulfillmentRequired`: Bool indicating whether the player owned anything that needed to be fulfilled.\n    * `fulfilledItems`: An `ItemFulfillmentSuccessInfo` object\n        * `itemId`: A string that identifies the item that was fulfilled.\n        * `quantity`: An integer representing how many of the item was fulfilled.\n    * `unfulfilledItems`: An `ItemFulfillmentFailureInfo` object\n        * `itemId`: A string that identifies the item that was unable to be fulfilled.\n        * `quantity`: An integer representing how many of the item could not be fulfilled.\n        * `reason`: A string describing why the item could not be fulfilled.\n\n** Error Codes **\n* Possible error codes: 400, 403, 412, 417, 500, 502, 504, 512\n* Error codes fall into the following categories: recoverable, retriable, and hard failure.\n* Recoverable errors (400, 403, 412) will succeed when the root issue is resolved such as \"412 Unable to perform fulfillment because plugin is not enabled.\" - in this case the plugin needs to be enabled in the config\n* Retriable errors (500, 502, 503, 504) may succeed if another attempt is made later. This could include issues such as the network temporarily being down.\n* Hard failure (417, 512) errors are unlikely to succeed when retried and the root issue is unexpected. An example of this would be the first party libraries failing to load.\n* For more details on error codes and how to handle them please see https://platform.riotgames.com/riotgamesapi-sdk/features/first-party-fulfillment/integrating-first-party-fulfillment\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest"
              }
            }
          }
        }
      }
    },
    "/ga-warning/v1/debug/simulate-warning/{category}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate sending a game-agnostic warning message to this player with a specific category. Endpoint not available in public builds. \n [Help] \n**Data**\n\n* `category`: The category is a key used to create the localized message for the player. As an example, `INAPPROPRIATE_TEXT` is the category\nsent when a player was flagged for inappropriate chat. If the category is unrecognized, a fallback message will be used.\n",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/game-session/v1/sessions": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Creates a request for GAPS login queue, bypass queue, and session services. \n [Help] Creates a GAPS Session Funnel request that interacts with 1-3 services based on the supplied options. Requests are handle asynchronously and reported by through changes to the `state` property of this resource. Use the generated `id` field as a path parameter to subscribe to this specific funnel instance.\n\nPlayers exiting the funnel will exit with one of several known states indicated by the `message` field of theis resource. Session heartbeats and queue polling are handled transparently, as are server-side kicks.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionId"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionRequest"
              }
            }
          }
        }
      }
    },
    "/info-radiator/v1/time-sample/{phaseName}/end": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema. \n [Help] The time-sample APIs are deprecated and no longer do useful work. They will be removed in March 2024.",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/info-radiator/v1/time-sample/{phaseName}/start": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample. \n [Help] The time-sample APIs are deprecated and no longer do useful work. They will be removed in March 2024.",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/integration-test/v1/external-request/async": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "[FOR TESTING ONLY] Test endpoint to dispatch an external HTTP asynchronous request ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationTestV1ExternalResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationTestV1ExternalRequest"
              }
            }
          }
        }
      }
    },
    "/integration-test/v1/external-request/sync": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "[FOR TESTING ONLY] Test endpoint to dispatch an external HTTP synchronous request ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationTestV1ExternalResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationTestV1ExternalRequest"
              }
            }
          }
        }
      }
    },
    "/jwt-authenticator/v1/issue": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Issue a JWT using the provided JWKS service URL and the provided payload ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtAuthenticatorJWTIssueResource"
              }
            }
          }
        }
      }
    },
    "/jwt-authenticator/v1/verify": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Verify a JWT ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtAuthenticatorJWTVerifyResource"
              }
            }
          }
        }
      }
    },
    "/loyalty/v1/debug/set-loyalty-resource/{pcbId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets a loyalty resource for testing purposes - DEBUG ONLY ",
        "parameters": [
          {
            "in": "path",
            "name": "pcbId",
            "schema": {
              "type": "number",
              "format": "int64"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyV2PCBangInfo"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/mail": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a list of player's mail. \n [Help] \n**Description**\n\nThis API allows for retrieving mail and the product ID is inferred.\n\nRequired request parameters:\n```\nincludedStates : A list of message states, like READ or ACKNOWLEDGED, that should be included.\n```\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxMail"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxRequestMailParameters"
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/mail/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Fetch mail for a player on behalf of a product. \n [Help] \n**Description**\n\nThis API allows for retrieving mail. Here, the productId is required. This is an internal API to be used by other plugins.\n\nRequired arguments:\n```\nproductId: A standard [product identifier](https://gh.riotgames.com/shared-static-data/rpg/tree/master/products)\n```\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailboxMail"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxRequestMailParameters"
              }
            }
          }
        }
      }
    },
    "/mobile-product-registry/v1/build-number/{build}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "[Deprecated] Set the current game build number. \n [Help] This is deprecated. Please specify build_number via system-settings on app initialization.",
        "parameters": [
          {
            "in": "path",
            "name": "build",
            "schema": {
              "type": "number",
              "format": "int64"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/mobile-push/v1/filter": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a filter for specific conversation to skip sending push notifications ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobilePushMobilePushCreateFilter"
              }
            }
          }
        }
      }
    },
    "/mobile-push/v1/register": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Indicate that a product wants to register with push functionality ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobilePushMobilePushRegisterPush"
              }
            }
          }
        }
      }
    },
    "/mobile-push/v1/subscribe-topic": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Subscribe to a specific topic ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobilePushMobilePushSubscribeToTopic"
              }
            }
          }
        }
      }
    },
    "/native-ux/v1/show-alert": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Display a native message to the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "Message ID to show in the modal.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/nintendo-account/v1/authorization": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Nintendo Account of the player logged in the Nintendo Switch ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NintendoAccountAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NintendoAccountAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/nintendo-account/v1/network-service-accountid-token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get the Network Service Account ID (NSA) for the player logged in the Nintendo Switch ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NintendoAccountNetworkServiceAccountResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NintendoAccountGetNetworkServiceAccountParameters"
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/patch-states/refresh": {
      "post": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Refresh patch states of all products ",
        "parameters": [
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/PatchProxyRefreshRequestOptions"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/patch-proxy/v2/patch-states/refresh/products/{productId}/patchlines/{patchlineId}": {
      "post": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Refresh patch state for a product patchline. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchProxyProductPatchlineStatus"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/purchase/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Purchase the given product ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "orderId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/request-external-products": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve available products for purchase from set of product ids ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/request-price-point-products": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve available price point products for purchase ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/request-products": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve available products for purchase ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v1/session/resume": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resume the purchase session ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v2/purchase/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Purchase the given product ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "orderId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/pay-mobile/v2/request-external-products": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve available products for purchase from set of product ids ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/pay-mobile/v2/request-price-point-products": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieve available price point products for purchase ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/pay-mobile/v2/session/resume": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Resume the purchase session ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/payments/v1/debug/countryCodeOverride/{countryCode}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "DEBUG: Sets country code override used during call to `GET /payments/v2/products` ",
        "parameters": [
          {
            "in": "path",
            "name": "countryCode",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/payments/v1/initialize-purchase": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Begin the purchase flow, receiving the URL to the payment service to start the purchase. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInitializedPurchase"
                }
              }
            }
          }
        }
      }
    },
    "/payments/v2/initialize-preselected-purchase": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Begin the purchase flow with a preselected price point id, receiving the URL to the payment service to start the purchase. \n [Help] \n**Description**\n\nBegin the purchase flow with a preselected price point ID, receiving the URL to the payment service to start the purchase\n\n** Request Arguments **\n\nRequest Body:\n* `InitializePreselectedPurchaseRequest` Object:\n    * `pricePointId`: A price point ID that will preselected.\n    *\n** Returns **\n\nResponse Body:\n* `InitializedPurchase` Object:\n    * `purchaseStartUrl`: The URL to the payments service to start the purchase flow in an embedded or external web browser.\n    *\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInitializedPurchase"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsInitializePreselectedPurchaseRequest"
              }
            }
          }
        }
      }
    },
    "/payments/v2/initialize-purchase": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Begin the purchase flow, receiving the URL to the payment service to start the purchase. \n [Help] \n**Description**\n\nBegin the purchase flow, receiving the URL to the payment service to start the purchase.\n\n** Request Arguments **\n\nRequest Body:\n* `InitializePurchaseRequest` Object:\n    * `minVirtualAmount`: [Optional] Minimal amount of virtual currency required to purchase a given content.\n\n** Returns **\n\nResponse Body:\n* `InitializedPurchase` Object:\n    * `purchaseStartUrl`: The URL to the payments service to start the purchase flow in an embedded or external web browser.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInitializedPurchase"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsInitializePurchaseRequest"
              }
            }
          }
        }
      }
    },
    "/permissions/v1/user-communication-permissions": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Queries whether the current user has the necessary permissions to communicate with a given set of users and if not, why that is the case ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionsUserCommunicationPermissions"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PermissionsRiotUser"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/v2/user-communication-permissions": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Queries whether the current user has the necessary permissions to communicate with a given set of users and if not, why that is the case. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionsUserCommunicationPermissions"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsUserCommunicationPermissionsV2Request"
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/debug/mock-block-list": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "DO NOT USE, this endpoint is intended for use internally by the SDK team to help test the platform social plugin ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/platform-social/v1/platform-profile/{consoleId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Displays the specified player's platform profile. ",
        "parameters": [
          {
            "in": "path",
            "name": "consoleId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/platform-social/v1/player/platform-username": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns platform IDs (Online ID for PS5, Modern Gamertag + Classic Gamertag for Xbox) for console IDs (XUIDs for Xbox, Account IDs for PS5) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSocialConsoleUsernameForIdResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSocialConsolueUsernameForIdRequest"
              }
            }
          }
        }
      }
    },
    "/platform-ui/v1/fre/telemetry": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send telemetry event ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUiPlatformUIMobileFREEventData"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/purchase/v1/aliases": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets a new purchased set of aliases for the player. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1StatusResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1PurchaseAliasInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/purchase/v1/eligibility": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is eligible for a free or paid name change. \n [Help] Please use /player-account/aliases/v1/eligibility if you only need information about free alias changes.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1PurchaseEligibilityResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1PurchaseEligibilityInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/eligibility": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Check if a player is eligible for a free name change. \n [Help] Use /player-account/aliases/purchase/v1/eligibility if you also need information about paid alias changes.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountEligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/generate-tagline": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a random tagline that is valid for the player. This endpoint also verifies free eligibility. If you need validation in the Paid Name Change context use the V2 endpoint instead. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountGenerateTaglineResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountGenerateTaglineInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v1/validity": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks a name for validity without saving it. This endpoint also verifies free eligibility. If you need validation in the Paid Name Change context use the V2 endpoint instead. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV1StatusResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v2/generate-tagline": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a random tagline that is valid for the player. This endpoint will not check eligiblity like V1 does. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV2GenerateTaglineResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV2GenerateTaglineInput"
              }
            }
          }
        }
      }
    },
    "/player-account/aliases/v2/validity": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks a name for validity without saving it. This endpoint will not check eligiblity like V1 does. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountAliasesV2ValidityAliasResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountAliasesV2ValidityAliasInput"
              }
            }
          }
        }
      }
    },
    "/player-account/login-history/v1/history": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] This endpoint returns login location history records for each requested PUUID. \nThe most recent login location is the record provided. \nIf the caching mechanism is enabled, it will retrieve as many PUUIDs' records as possible from the cache, \nfor the remaining PUUIDs, it will call the service to retrieve appropriate records. \nIn the opposite case, all records will be retrieved from the service. \n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountV1PlayersLoginLocationHistory"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountV1RequestedPlayersLoginLocationHistory"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v1/consoleids-for-puuids": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the Console IDs for each PUUID provided \n [Help] \n**Description**\nRetrieves the Console IDs for each PUUID provided\n\n** Request Arguments **\n\nRequest Body Object:\nPuuidsToConsoleIdsRequest Object:\n    \"puuids\" - A list of PUUIDs to retrieve Console IDs for\n\nPuuidsToConsoleIdsResponse Body:\n    \"response\" - A list of PuuidToConsoleIdResponseElements\n\nPuuidAndProvider:\n    \"puuid\" - The PUUID associated with the Console ID\n    \"provider\" - A String for the account provider (platform, e.g. \"xbox\")\n    \"providerId\" - A String ID for the provider (e.g. as \"123abc123\")\n    \"error\" - A String containing any errors (e.g. \"No matching account found.\")\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV1ConsoleIdsForPuuidsResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV1ConsoleIdsForPuuidsRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v1/namesets-for-puuid": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the namesets for a single PUUID \n [Help] \n**Description**\nRetrieves the namesets for the PUUID provided.\nA Nameset contains the player's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the player's PUUID\n\n** Body Argument **\n\n\"NamesetsForPuuidRequest\"\n* \"puuid\" - PUUID (String)\n\nResponse Body:\nNamesetsForPuuidResponse:\n* \"puuid\" - PUUID (String)\n* \"providerId\" - player's provider id\n* \"switchNameset\" - A SwitchNameset\n* \"playstationNameset\" - A PlaystationNameset\n* \"xboxNameset\" - An XboxNameset\n* \"gnt\" - A Riot ID\n* \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiot ID:\n    \"gameName\" - The player's Game Name (String)\n    \"tagLine\" - The player's Tag Line (String)\n\n\n\nEndpoint deleted November 2025; Please migrate to V2 endpoint /player-account/lookup/v2/namesets-for-puuid.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV1NamesetsForPuuidResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV1NamesetsForPuuidRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v1/namesets-for-puuids": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the namesets for each PUUID provided \n [Help] \n**Description**\nRetrieves the namesets for each PUUID provided.\nA Nameset contains the player's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the player's PUUID\n\n** Request Arguments **\n\nRequest Body Object:\nNamesetsForPuuidsRequest Object:\n    \"puuids\" - A list of PUUIDs to retrieve namesets for\n\nNamesetsForPuuidsResponse Body:\n    \"namesets\" - A list of NamesetsResponseElements\n\nNamesetsResponseElement:\n* \"puuid\" - PUUID (String)\n* \"providerId\" - player's provider id\n* \"switchNameset\" - A SwitchNameset\n* \"playstationNameset\" - A PlaystationNameset\n* \"xboxNameset\" - An XboxNameset\n* \"gnt\" - A Riot ID\n* \"error\" - A String containing any errors\n\nSwitchNameset:\n    \"name\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"name\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"name\" - A String with the Xbox name associated to the requested PUUID\n\nRiot ID:\n    \"gameName\" - The player's Game Name (String)\n    \"tagLine\" - The player's Tag Line (String)\n\n\n\nEndpoint deleted November 2025; Please migrate to V2 endpoint /player-account/lookup/v2/namesets-for-puuids.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV1NamesetsForPuuidsResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV1NamesetsForPuuidsRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v1/puuids-for-consoleids": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the PUUIDs for each Console ID provided \n [Help] \n**Description**\nRetrieves the PUUIDs for each Console ID provided.\n\n** Request Arguments **\n\nRequest Body Object:\nConsoleIdsToPuuidsRequest Object:\n    \"consoleIds\" - A list of console IDs to retrieve PUUIDs for\n    \"environment\" - A String name for the platform environment (e.g. \"sp-int\")\n\nConsoleIdsToPuuidsResponse Body:\n    \"response\" - A list of ConsoleIdToPuuidResponseElements\n\nPuuidAndProvider:\n    \"puuid\" - The PUUID associated with the Console ID\n    \"provider\" - A String for the account provider (platform, e.g. \"xbox\")\n    \"providerId\" - A String ID for the provider (e.g. as \"123abc123\")\n    \"error\" - A String containing any errors (e.g. \"No matching account found.\")\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV1PuuidsForConsoleIdsResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV1PuuidsForConsoleIdsRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v2/namesets-for-puuid": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the namesets for a single PUUID \n [Help] \n**Description**\nRetrieves the namesets for the PUUID provided.\nA Nameset contains the player's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the player's PUUID\n\n** Body Argument **\n\n\"NamesetsForPuuidRequest\"\n* \"puuid\" - PUUID (String)\n\nResponse Body:\nNamesetsForPuuidResponse:\n* \"puuid\" - PUUID (String)\n* \"providerId\" - player's provider id\n* \"error\" - A String containing any errors\n* \"alias\" - A Riot ID\n* \"switchNameset\" - A SwitchNameset\n* \"xboxNameset\" - An XboxNameset\n* \"playstationNameset\" - A PlaystationNameset\n\nSwitchNameset:\n    \"nickname\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"onlineId\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"classicGamertag\" - A String with the Xbox classic name associated to the requested PUUID\n    \"modernGamertag\" - A String with the Xbox modern name associated to the requested PUUID\n    \"modernSuffix\" - A String with the Xbox modern name suffix associated to the requested PUUID\n\nRiot ID:\n    \"gameName\" - The player's Game Name (String)\n    \"tagLine\" - The player's Tag Line (String)\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV2NamesetsForPuuidResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV2NamesetsForPuuidRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/lookup/v2/namesets-for-puuids": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves the namesets for each PUUID provided \n [Help] \n**Description**\nRetrieves the namesets for each PUUID provided.\nA Nameset contains the player's name on the given platform.\nExample: SwitchNameset.name would be the Switch username associated with the player's PUUID\n\n** Request Arguments **\n\nRequest Body Object:\nNamesetsForPuuidsRequest Object:\n    \"puuids\" - A list of PUUIDs to retrieve namesets for\n\nNamesetsForPuuidsResponse Body:\n    \"namesets\" - A list of NamesetsResponseElements\n\nNamesetsResponseElement:\n* \"puuid\" - PUUID (String)\n* \"providerId\" - player's provider id\n* \"error\" - A String containing any errors\n* \"alias\" - A Riot ID\n* \"switchNameset\" - A SwitchNameset\n* \"xboxNameset\" - An XboxNameset\n* \"playstationNameset\" - A PlaystationNameset\n\nSwitchNameset:\n    \"nickname\" - A String with the Switch name associated to the requested PUUID\n\nPlaystationNameset:\n    \"onlineId\" - A String with the Playstation name associated to the requested PUUID\n\nXboxNameset:\n    \"classicGamertag\" - A String with the Xbox classic name associated to the requested PUUID\n    \"modernGamertag\" - A String with the Xbox modern name associated to the requested PUUID\n    \"modernSuffix\" - A String with the Xbox modern name suffix associated to the requested PUUID\n\nRiot ID:\n    \"gameName\" - The player's Game Name (String)\n    \"tagLine\" - The player's Tag Line (String)\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountLookupV2NamesetsForPuuidsResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountLookupV2NamesetsForPuuidsRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/mfa/v1/factor/{factor}/verify": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Verify the provided auth factor with the given otp ",
        "parameters": [
          {
            "in": "path",
            "name": "factor",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountMfaV1VerifyFactorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountMfaV1VerifyFactorRequest"
              }
            }
          }
        }
      }
    },
    "/player-account/promotion/v1/promotion": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Promote an account by providing missing details. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountPromotionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountDetails"
              }
            }
          }
        }
      }
    },
    "/player-account/regions/v1/region/{regionCode}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "assign the given region to player account ",
        "parameters": [
          {
            "in": "path",
            "name": "regionCode",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountRegionsV1RegionAssignmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/player-account/vng/v1/web-url/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create the external web url with the given redirect-uri ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAccountVngV1WebUrlResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAccountVngV1WebUrlRequest"
              }
            }
          }
        }
      }
    },
    "/player-affinity/affinity/v1/token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a player affinity token. \n [Help] Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV1AffinityInput"
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v1/token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a player product affinity token, save it to the local cache, and notify subscribers. Retrieve from local cache on error. \n [Help] Endpoint deleted November 2021; Please use 'player-affinity/product/v2/token'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityTokenProduct"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV2AffinityProductInput"
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v2/token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a player product affinity token, save the affinity to the local cache, and notify subscribers. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityProductAffinityInput"
              }
            }
          }
        }
      }
    },
    "/player-affinity/product/v2/token/debug": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "DEBUG: For debugging subscribers. Save a new product affinity token to the local cache and notify subscribers. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityProductToken"
              }
            }
          }
        }
      }
    },
    "/player-affinity/service/v1/token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a player service affinity token. \n [Help] Endpoint deleted November 2021; Please use 'player-affinity/service/v2/token'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityAffinityV1AffinityInput"
              }
            }
          }
        }
      }
    },
    "/player-affinity/service/v2/token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Get a player service affinity token and save the affinity to the local cache. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityServiceToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityServiceAffinityInput"
              }
            }
          }
        }
      }
    },
    "/player-behavior-token/v1/debug/jwt/force-refresh": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Forcibly fetch a new Player Behavior Token. This is intended for debug purposes only, since this will always result in making an external call to the backend service. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/debug/simulate-bystander-feedback/product/{productId}/category/{category}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate sending a Bystander Feedback message to this player with a specific transgression category. \n [Help] \n**Data**\n* `category`: The category is a key used to create the localized message for the player. As an example, `INAPPROPRIATE_TEXT` is the category\nsent when a player was penalized for Inappropriate Text Chat. If the category is unrecognized, no notification will be made.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/player-reporting/v1/debug/simulate-reporter-feedback/product/{productId}/category/{category}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate sending a Reporter Feedback message to this player with a specific report category. \n [Help] \n**Data**\n* `category`: The category is a key used to create the localized message for the player. As an example, `CHEATING` is the category\nsent when a player's report for cheating was utilized for penalizing a cheater. If the category is unrecognized, a fallback message will be used.\n",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/player-reporting/v1/report": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] \n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `match_token`: The reporting player's match token, which is a signed JWT. See Platform docs for more info on match tokens.\n* `offender_puuid`: Whom the player is reporting.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n\n\nEndpoint deleted June 2022; Please use '/player-reporting/v2/report'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingPlayerReport"
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/reporter-feedback/ack": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Acknowledges all reporter feedbacks. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/player-reporting/v1/reporter-feedback/ack/{id}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Acknowledges a specific reporter feedback. Returns true if we can find a reporter feedback that matches that ID. Returns false if we can't. \n [Help] \n**Description**\n\nSee GET reporter feedback endpoint for more info on how to find `{id}`.\n\n**Response**\nThis endpoint will always return a 2xx response code and a boolean response:\n* `true`: Reporter Feedback message with given ID was found and acknowledged.\n* `false`: No Reporter Feedback message with given ID was found.\n",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/player-reporting/v1/unsigned-report": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] \nUsed to submit a player report when no signed token is available\n**Data**\n* `offenderId`: The id of the offender. For players this is their puuid.\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `comment`: Player written comment associated with this report.\n* `conversationContext`: (OPTIONAL) The ID and type of conversation from where the report was filed\n* `unstructuredContext`: (OPTIONAL) An additional payload where game teams can pass in custom payload to CPD for analysis\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingUnsignedPlayerReportV1"
              }
            }
          }
        }
      }
    },
    "/player-reporting/v2/report": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] \nReporting V2 is similar to v1, but the token can accept more types than just a MATCH_TOKEN to allow support for reporting guilds and potentially other entities in the future.\n**Data**\n* `categories`: List of category strings that player is reporting another player for. Different products use different categories.\n* `comment`: Player written comment associated with this report.\n* `location`: The location where the offending behavior occurred. Example: `in-game`.\n* `tokenType`: The type of information the token contains. Example: `MATCH_TOKEN`, `GUILD_TOKEN`.\n* `token`: A signed JWT with a format matching the tokenType. See Platform docs for more info on token formats and types.\n* `offenderId`: The id of the offender. For players this is their puuid.\n\n**Response**\n\nThis endpoint can return the following response codes:\n* `204`: Report successfully submitted. Note that in some cases it's intended UX that the submission is a \"success\" even if the report cannot be submitted.\n* `401`: Client is unable to retrieve current player's access token, which is required. Most common when trying to submit a report without having first logged in.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerReportingPlayerReportV2"
              }
            }
          }
        }
      }
    },
    "/player-session-lifecycle/v1/session/retry": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retry the last known internal action causing the current error state. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/playstation-account/v1/authorization": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Playstation Network Account of the player logged in the Playstation Network ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaystationAccountAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaystationAccountAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/playstation-account/v1/user/confirm": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Confirms currently active Playstation profile as the Platform User ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/privacy/v1/tracking/request-permission": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Ask the player for permission to track them via telemetry \n [Help] \n**Response Codes**\n- `200`: Request is in flight, subscribe to `/privacy/v1/tracking` for updates.\n- `405`: Unable to request permission for this platform.\n- `409`: A request for permission is already in flight, or is unnecessary (for instance, if the\n  player has declined tracking.)\n- `500`: The Info.plist file for the app is missing a NSUserTrackingUsageDescription entry. The\n  Apple APIs cannot function without it.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/process-control/v1/process/quit": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Quits the application. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/process-control/v1/process/quit/switch-background-mode": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Switch to background mode. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/process-control/v1/process/restart": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Restarts the application.  Does nothing if there is already a waiting delayed restart.  Optionally accepts specific version to restart. ",
        "parameters": [
          {
            "in": "query",
            "name": "restartVersion",
            "schema": {
              "type": "number",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/settings-token": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Generate a token that can be used to configure a standalone instance of the SDK running for a future instance of the given product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIntegrationSettingsToken"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductIntegrationSettingsTokenRequest"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/signout": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Requests signout from the Riot Platform for all running products, if permitted for requesting product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-launcher/v1/default-product/flash": {
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Flash the default product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-launcher/v1/default-product/focus": {
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Brings the window of the default product into focus ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-launcher/v1/default-product/minimize": {
      "post": {
        "tags": [
          "Plugin product-launcher"
        ],
        "description": "Minimize the default product ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-localization/v1/translate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "DEPRECATED - Returns a translation string(s) for given keys, if found, in Riot Client's locale ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLocalizationTranslateResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLocalizationTranslateRequest"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/product-localization/v2/translate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns a translation string(s) for given keys, if found ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductLocalizationTranslateResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLocalizationTranslateRequest"
              }
            }
          }
        }
      }
    },
    "/product-session/v2/heartbeat": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client. \n\nSessionId is derived from 'session' HTTP header, or websocket authentication. \n [Help] * Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          }
        }
      }
    },
    "/product-session/v2/heartbeat/{session-id}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Periodic heartbeat made by products to update Riot Client with state of gameplay, and to verify connectivity to Riot Client.  \n [Help] * Call this endpoint periodically to verify that Riot Client is still responding.\n\n* Upon your product entering the 'Gameplay' phase, Riot Client will lock patching and prevent updates to products or Riot Client in the case of a crash and restart, prioritizing launching the game promptly.\n\n* Products should include a 'User-Agent' header per RFC-0031d. \n\n* If this call fails and your sessionID is valid, then you can begin the recovery process specified in RFC-1064.\n\n* Riot Client expects this heartbeat from your application on a regular interval (once every 10-60 seconds) in order to make sure your application is not hung or otherwise unresponsive.",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          }
        }
      }
    },
    "/product-session/v2/heartbeat-internal/{session-id}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Internal endpoint for updating the heartbeat of an existing session. ",
        "parameters": [
          {
            "in": "path",
            "name": "session-id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSessionHeartbeatInfo"
              }
            }
          }
        }
      }
    },
    "/rc-auth/v1/xbgp/update-login-token": {
      "post": {
        "tags": [
          "Plugin rc-auth"
        ],
        "description": "Update the player login-token ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/rc-info-radiator/v1/time-sample/{phaseName}/end": {
      "post": {
        "tags": [
          "Plugin rc-info-radiator"
        ],
        "description": "Mark the end of the time phase sample and send an event to Analytics Platform conforming to the `riotclient__TimeSample__v4` schema. ",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rc-info-radiator/v1/time-sample/{phaseName}/start": {
      "post": {
        "tags": [
          "Plugin rc-info-radiator"
        ],
        "description": "Track the start time for a time phase sample of interest. Call `/info-radiator/v1/time-sample/{phase}/end` to mark the end of the sample. ",
        "parameters": [
          {
            "in": "path",
            "name": "phaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-app-command/v1/debug/use-local-uri-handler": {
      "post": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Sets uri handler to use riotclient-local for testing ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/hide": {
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Hide the UX. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/quit": {
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Quit Riot Client. If any games are running show the games-running exit-dialog. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/quit/switch-background-mode": {
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Quit Riot Client Full mode and switch to the Background mode. If any games are running show the games-running exit-dialog. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/restart": {
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Restarts Riot Client. If any games are running show the games-running exit-dialog. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-client-lifecycle/v1/show": {
      "post": {
        "tags": [
          "Plugin riot-client-lifecycle"
        ],
        "description": "Show the UX. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-messaging-service/v1/acknowledge": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "acknowledge RMS message received ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceAcknowledgeBody"
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/reconnect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a reconnect request to RMS. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-messaging-service/v1/simulate-message": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate an RMS message. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/riot-messaging-service/v1/switch-servers": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a switching server request to RMS. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-messaging-service/v1/token/refresh": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Schedule a token refresh request to RMS. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riot-messaging-service/v2/simulate-message": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate an RMS message. For debug purposes only. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiotMessagingServiceMessage"
              }
            }
          }
        }
      }
    },
    "/riot-status/v1/debug/set-riotclient-patchline/{patchlineId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns raw JSON service status information for issues affecting multiple games ",
        "parameters": [
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/riotclient/new-args": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Endpoint for passing in new data. \n [Help] This endpoint is deprecated, and will be removed June 2022, use direct events instead (e.g. `/player-affinity/shard`.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/riotclient/set_region_locale": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the region and locale. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/riotclient/show-logs": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Open explorer to log files. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riotclient/show-swagger": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Open swagger in the default browser. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/riotclientapp/v1/new-args": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Adds new command line arguments for Riot Client. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-lifecycle/v1/default_product/launch": {
      "post": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Launch the currently configured default product. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-pft/v1/request-survey": {
      "post": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Post a game event and see if you get a survey. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetPftSurveyRequestResult"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetPftSurveyRequest"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rnet-pft/v1/surveys/{id}/close": {
      "post": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Notifies the backend that the player closed the survey before completing it. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/rnet-pft/v1/surveys/{id}/popout": {
      "post": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Notifies the backend that the player opened an external survey. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/rnet-pft/v1/surveys/{id}/submit": {
      "post": {
        "tags": [
          "Plugin rnet-pft"
        ],
        "description": "Submits the given survey to the PFT service. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/rnet-product-registry/v1/available-disk-space": {
      "post": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the available disk space at a specified path. Will return the available disk space in bytes. All paths should use '/' as the delimiter ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetProductRegistryAvailableDiskSpaceRequest"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v1/directory-size": {
      "post": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retrieves the size of the entire directory of the specified path. Will return the directory size in bytes. All paths should use '/' as the delimiter ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "int64"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetProductRegistryDirectorySizeRequest"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-requests/products/{productId}/patchlines/{patchlineId}/cancel-dependencies": {
      "post": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Cancels dependency install and mark the patching as cancelled ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-requests/products/{productId}/patchlines/{patchlineId}/install-dependencies": {
      "post": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Fetches whether or not each dependency is installed or not for the specified product/patchline combo. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/patch-requests/products/{productId}/patchlines/{patchlineId}/retry-dependencies": {
      "post": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Retry failed dependency installs, if any. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-sanitizer/v1/containsSanitized": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Determine if the request has a sanitized word ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerContainsSanitizedResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerContainsSanitizedRequest"
              }
            }
          }
        }
      }
    },
    "/rnet-sanitizer/v1/sanitize": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sanitize the input text(s) ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetSanitizerSanitizeResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerSanitizeRequest"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/gas": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Log the user in with username, password and platformId. \n [Help] Executes OAuth2's [resource owner password credentials grant](https://tools.ietf.org/html/rfc6749#section-4.3) flow in order to log the user in. If successful, it will alter trigger a modification of the `/rso-auth/v1/authorization` resource and relevant sub-resources with details of the user's session. This flow is stateless, and does not create a session with the RSO server.\n\nIn circumstances where additional data is required to log the user in (such as captcha or multi-factor authentication, this method will simply fail.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthRSOPlayerCredentials"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/refresh": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Force a refresh of the RSO tokens. \n [Help] Executes OAuth2's [refresh flow](https://tools.ietf.org/html/rfc6749#section-6) in order to refresh an expired authorization. This API is for debugging and testing only; the RSO plugin handles refresh automatically.\n\nRefreshes authorization for all clients that have currently active authorizations, the return value is from the main client RiotClient bootstraps with (the one from config)",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/simulate-error": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set simulated error response code for logging in \n [Help] Sets a simulated error response code to be used next time `POST`:`/rso-auth/v1/authorization/gas` occurs. Then resets to normal functionality",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/authorization/token-exchange": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Creates an authorization from an authentication session using a login token from rso-authenticator. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthLoginToken"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/device-id": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Retrieves device ID configuration. \n [Help] Provides client-side settings for collecting device ID information, including a session id, collector server and merchant id. The session ID is programmatically generated by the plugin at startup.\n\nThis endpoint is not available until the OpenID configuration is retrieved.\n\nEndpoint to be deleted March 2025; This endpoint has no function anymore.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthDeviceId"
                }
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/key/request": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Generates an authorization key from an existing authorization. An 'authorization key' is a code and code verifier encoded together. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationKey"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationKeyRequest"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/userinfo/refresh": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "This internal endpoint can be used to force a refresh of all current UserInfos.\nThis is an expensive operation and should be only used if necessary. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rso-auth/v2/authorizations": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a new authorization request, or retrieves authorization for an existing request. \n [Help] Attempts to retrieve the authorization associated with the `client-id` set in the `authorizationRequest`. If the player has not been logged in, then this call will prompt that a login session be established.\n\nWhen POSTing a request for authorization, the body may optionally include an array of `scope`s to be included for the authorization. Likewise, an array of `trustLevels` can be set to set the level at which the authorization state is trusted.\n\nThis API returns type: `needs_authentication` if the client requires authentication before an authorization can be presented, or type: `needs_reauthorization` if the client requires reauthentication before a new authorization can be presented, or type: `authorized` along with the `ImplicitAuthorization` field populated.\n\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthAuthorizationRequest"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v2/partner-auth": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Log the user in with any of the accepted partner credentials \n [Help] Endpoint to be deleted January 2023; Please use '/rso-auth/v3/partner-auth'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPartnerCredentials"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v3/partner-auth": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Log the user in with any of the accepted partner credentials ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthAuthorization"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthPartnerCredentialsV3"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/apple": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with apple open id token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateOpenIdConnectInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/code": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Create a new authentication session with code from a previous federated authentication. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateCodeInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/facebook": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with facebook access token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateFacebookInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/gamecenter": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with gamecenter credentials. \n [Help] Removing endpoint on Feb 2022 due to dropped support by Apple. Context JIRA ticket: SDKFEAT-633",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateGameCenterInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/google": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with google open id token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateOpenIdConnectInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/multifactor": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Linking player's social to their multifactor enabled riot account. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateMultifactorInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/nintendo": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with nintendo open id tokens. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateNintendoInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/playstation": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with Playstation id token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticatePlaystationInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/qrcode": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Start polling for authentication provided by Riot Mobile. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1QrCodeAuthStartInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/redirect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Redirect the current authentication to the given url ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationRedirectInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/riot-identity/complete": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Complete a new Riot Identity authentication session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityAuthCompleteInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/riot-identity-signup/complete": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Complete a new Riot Identity Signup authentication session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentitySignupCompleteInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/riot-identity-signup/start": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Start a new Riot Identity Signup authentication session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentitySignupStartInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/riot-identity/start": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Start a new Riot Identity authentication session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityAuthStartInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/xbox": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate a player with Xbox xsts token and user hash ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticateXboxInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/login": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Completes authentication given a login token ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1LoginRequest"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/session/authentication": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Authenticate another session using the currently active authorization. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1SessionAuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1SessionDetails"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/username-validation": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Checks username availability ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1UsernameValidationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1UsernameValidationRequest"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/web-authentication-url": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Provides a url for performing a web based authentication ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1WebAuthenticationUrlRequest"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/account-promotion/initiate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches a UI for handling account promotion",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rso-mobile-ui/v1/authentication-redirect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Internal endpoint for triggering redirect of the current authentication to a given url.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiAuthenticationRedirectRequest"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/browser/redirect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiIOSEventInfo"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/sdk": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/webview/decide-navigation-policy": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/webview/javascript-message": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/webview/launch": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to detect page launches ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/webview/load-error-page": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/debug/webview/simulate-onfinish": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulates the callback from the web view closing ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/delete-account": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initiates the Account Deletion UI to delete a player's Riot account. Be careful, this functionality is destructive - making it difficult, if not impossible, to recover an account. \n [Help] Endpoint to be deleted July 2025; Migrate to PlatformUI: '/platform-ui/v1/delete-account'.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/eula/initiate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches a dialog UI for requesting player acceptance to the current EULA from rcp-be-eula\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiEULAUIInitiate"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/federated-login": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Internal endpoint for triggering federated logins for account linking.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiFederatedLoginRequest"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/internal/display-error-page": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches a WebView to display an error page. Used by `platform-ui` as a temporary solution before it handles error pages on it's own. DON'T USE IT!\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/AnyType"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/ios-auth-redirect": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "iOS application open url event \n [Help] Endpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiIOSEventInfo"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/login/initiate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches an Android Activity or iOS UIView to display a login flow to the player using a WebView\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiLoginInitiateRequest"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/riot-id-prompt/initiate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches a UI to prompt user to set a RiotID for their account\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoMobileUiRiotIDPromptV1RiotIDPrompt"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiRiotIDPromptV1InitiateRequest"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v1/show-game-out-of-date": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Show a native dialog displaying game is out of date and redirecting user to app store \n [Help] Endpoint to be deleted December 2024; There are no known customers of this endpoint. If you require similar functionality, please contact the SDK Account Experiences team.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiGameOutOfDateUIInitiate"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v2/eula/agreement": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Saves agreement status\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoMobileUiEULAUIV2Agreement"
              }
            }
          }
        }
      }
    },
    "/rso-mobile-ui/v2/eula/initiate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Launches a WebView for requesting player acceptance to the current EULA from rcp-be-eula\n\nEndpoint to be deleted December 2024; No action required if you migrated to PlatformUI MobileFRE.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/scd/v1/url-patterns/test": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns whether a url refers to SCD-protected content ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/social/v1/initialize": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " \n [Help] Endpoint deprecated and will be deleted July 2025.  Please use /social/v2/initialize",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialProductContext"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/social/v1/view-profile/{puuid}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": " ",
        "parameters": [
          {
            "in": "path",
            "name": "puuid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/social/v2/initialize": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initializes the social plugin. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/telemetry/v1/common-data/{key}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Adds/updates a common data key and value to be sent with every subsequent event. ",
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "description": "The name of the common data key",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "The value of the common data key",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/telemetry/v1/events/{eventType}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed ",
        "parameters": [
          {
            "in": "path",
            "name": "eventType",
            "description": "The name of the event type",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "A map of event data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/tencent-launcher/v1/debug/force-load": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Force-load the ACLSDK \n [Help] \n            **Description**\n            A debug API to force-load the ACLSDK, even if configured off.\n            Can only be used internally for testing.\n        ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/tencent-launcher/v1/login": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initialize RSO login using mSDK credentials from the Tencent Launcher \n [Help] **Requirements**\nThis should only be used by products launched via the Tencent Launcher.\n\nThis function is disabled unless the following configuration is passedto the SDK at startup:\n* `publisher`: must be set to `tencent`\n* `auth-via-tencent-launcher`: must be set to `true`\n\nRequires ACLSDK.dll to be present. If absent, calling this functionwill return a `501` error code.\n\n\n            **Description**\n\n            Initializes the ACLSDK, retrieves the player's Tencent credentials\n            from the Tencent Launcher, and uses them to auth with RSO via the\n            partner-auth API.\n\n            **Request Arguments**\n            * `tencentGameId` - The Tencent-supplied game ID\n            * `tencentGameKey` - The Tencent-supplied game key\n\n            **Returns**\n            A successful return indicates that the player has successfully authed\n            with RSO.\n\n            A failed return indicates an error, either with ACLSDK, or the resulting\n            RSO auth.\n        ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TencentLauncherAuthorization"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TencentLauncherTencentLauncherLoginArguments"
              }
            }
          }
        }
      }
    },
    "/tencent-launcher/v1/repair-on-shutdown": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Initializes repair on shutdown flow in the ACLOS \n [Help] \n            **Description**\n            After the game shuts down Tencent Launcher will repair the game and then relaunch it.\n        ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/vanguard/v1/check-vanguard-service": {
      "post": {
        "tags": [
          "Plugin vanguard"
        ],
        "description": "Check if Vanguard is running ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanguardPluginState"
                }
              }
            }
          }
        }
      }
    },
    "/vng/v1/profile/verification/send/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Send a verification code to the phone number of the signed in player. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngV1SendVerificationCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/vng/v1/profile/verification/verify/{productId}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Submit a players phone number verification details. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VngVProfileVerificationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VngV1VerificationDetails"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/debug/simulate": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate provider/player behavior for testing. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatDebugSimulationResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/debug/write-csr-data-to-file": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Write CSR data for a particular channel and product to the provided filepath ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatDebugCSRFileWritingResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatDebugCSRFileWritingRequest"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/initialize-provider/{productName}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Eagerly initialize a provider. Needed for device settings to update before a first session is established ",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/push-to-talk/check-available": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Use to check if we have permissions to start push to talk \n [Help] Endpoint deleted March 2021.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/upload-audio/{productName}": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Trigger the upload of the client-side recorded audio data for all sessions with client-side recording enabled \n [Help] A successful response by this endpoint means that the upload procedure has been successfully initiated, not that it has been successfully completed",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/voice-chat/v2/push-to-talk/check-available": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Use to check if we have permissions to start push to talk \n [Help] Endpoint is deprecated and will be deleted. Please check /voice-chat/v3/push-to-talk/",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/xbox-account/v1/authorization": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Gets authorization from the Xbox Account of the player logged in the Xbox ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XboxAccountAuthorizationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XboxAccountAuthorizationParameters"
              }
            }
          }
        }
      }
    },
    "/xbox-account/v1/user/confirm": {
      "post": {
        "tags": [
          "core-sdk"
        ],
        "description": "Confirms selected Xbox Live user as the Platform User ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/age-restriction/v1/debug/age-restriction/products/{productId}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "DEBUG: Sets the age-restriction state for the productId ",
        "parameters": [
          {
            "in": "query",
            "name": "restricted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRestrictionAgeRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/app-command/submit": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Used to coerce an application to invoke a registered command. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCommandCommand"
              }
            }
          }
        }
      }
    },
    "/chat/v3/groups/order": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Order the friend groups \n [Help] Endpoint deleted August 2021; Please use '/chat/v4/groups/order'.",
        "parameters": [
          {
            "in": "query",
            "name": "rchat-blocking",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupOrder"
              }
            }
          }
        }
      }
    },
    "/chat/v4/groups/order": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Order the friend groups ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatFriendGroupOrder"
              }
            }
          }
        }
      }
    },
    "/client-config/v1/refresh-config-status": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Refresh config status. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/client-config/v1/sessions": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Updates the cached sessions. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigSessionsUpdate"
              }
            }
          }
        }
      }
    },
    "/client-config/v2/namespace-changes": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Refresh config status. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientConfigConfigNamespaceUpdate"
              }
            }
          }
        }
      }
    },
    "/eula/v1/agreement/reject": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Rejects the most recent EULA for the current user. ",
        "parameters": [
          {
            "in": "query",
            "name": "withoutReading",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/eula/v1/debug/agreement/short-agreement-content": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Simulate short agreement content. This is disabled in public builds. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/external-message-handler/v1/emulate": {
      "put": {
        "tags": [
          "Plugin external-message-handler"
        ],
        "description": "Emulate a message and send it to the event bus:'MessageId': Type of the message. (e.g. install_game, patch_game, launch_game)'MessageData': The message content ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalMessageHandlerMessageBody"
              }
            }
          }
        }
      }
    },
    "/external-message-handler/v1/patch-request/products/{productId}/patchlines/{patchlineId}/pause": {
      "put": {
        "tags": [
          "Plugin external-message-handler"
        ],
        "description": "Notify patch request has been paused ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/external-message-handler/v1/patch-request/products/{productId}/patchlines/{patchlineId}/resume": {
      "put": {
        "tags": [
          "Plugin external-message-handler"
        ],
        "description": "Notify patch request has been resumed ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/ga-restriction/v1/debug/time/{millisSinceEpoch}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Mock the current time. This can help you debug if the plugin automatically deletes messages. Note that we only try to delete messages when we receive or acknowledge messages. Uses milliseconds since epoch. ",
        "parameters": [
          {
            "in": "path",
            "name": "millisSinceEpoch",
            "schema": {
              "type": "number",
              "format": "int64"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/ga-restriction/v1/penalty-notifications/{messageId}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Marks a penalty notification as read. Read messages will still be accessible, but they don't need to be immediately displayed to the player. \n [Help] Deprecating V1 endpoint in favor of V2. Please use the /ga-restriction/v2/penalty-notifications/{messageId} endpoint going forward.",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/ga-restriction/v2/penalty-notifications/{messageId}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Marks a penalty notification as read. Read messages will still be accessible, but they don't need to be immediately displayed to the player. ",
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/mailbox/v1/mail-state": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update the state of a message as read or acknowledged \n [Help] \n**Description**\n\nAllows marking mail as read or acknowledged -- 'new' is not a valid argument\n\nArgument Options:\n```\nACKNOWLEDGED,\nREAD\n```\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxUpdateMailStateRequest"
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs/cancel-active": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Cancel the active job from the scheduler and deprioritize it to the end of the queue. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs/start": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Start the patching process in order of the current priority queue. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/patch-jobs/stop": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Stop the patching process. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v1/priority-patch-jobs/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Starts a priority patch request for a product, which will complete patching before any automatic patching operation. ",
        "parameters": [
          {
            "in": "query",
            "name": "repair",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/PatchProxyPatchRequestOptions"
            }
          },
          {
            "in": "query",
            "name": "tempPath",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchProxyPatchProxyRequest"
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/priority-patch/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Starts a priority patch for a product, any active patch jobs will be moved to the back of the queue. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "options",
            "schema": {
              "$ref": "#/components/schemas/PatchProxyPatchRequestOptions"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchProxyPatchProxyRequest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patch-proxy/v2/queue-patch/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin patch-proxy"
        ],
        "description": "Starts a non-priority patch for a product, active patch jobs are unaffected by the incoming jobs. This is only used by the auto-update feature ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatchProxyPatchProxyRequest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/player-affinity/shard": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sets the current ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityShardInfo"
              }
            }
          }
        }
      }
    },
    "/player-session-lifecycle/v1/auth-intent": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set a player's Auth Intent for the current session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleUpdateAuthIntentRequest"
              }
            }
          }
        }
      }
    },
    "/player-session-lifecycle/v1/login-strategy": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set a Login Strategy for the current session. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSessionLifecycleUpdateLoginStrategyRequest"
              }
            }
          }
        }
      }
    },
    "/product-integration/v1/app-update/apply": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile). \n [Help] Applies a game update by opening Riot Client and patching the game (on Desktop) or exiting to the App Store (on Mobile).",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/product-integration/v1/debug/app-update/apply": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Debug endpoint to apply an update by session id \n [Help] The session id should match one from a running game",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/product-update-scanner/v1/scan-and-patch": {
      "put": {
        "tags": [
          "Plugin product-update-scanner"
        ],
        "description": "Scans the patchlines that are entitled to the player and make patch requests ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/product-update-scanner/v1/scan-and-patch/routine": {
      "put": {
        "tags": [
          "Plugin product-update-scanner"
        ],
        "description": "Starts the routine Update Scanner to check for product updates and make patch requests ",
        "parameters": [
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/product-update-scanner/v1/scan-and-patch/routine/resume": {
      "put": {
        "tags": [
          "Plugin product-update-scanner"
        ],
        "description": "Resumes the routine Update Scanner ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/product-update-scanner/v1/scan-and-patch/routine/stop": {
      "put": {
        "tags": [
          "Plugin product-update-scanner"
        ],
        "description": "Stops the routine Update Scanner ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/reference/v1/echo": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Returns the user input string \n [Help] \n**Description**\n\nThis API is intended as a reference on how to create a plugin for new developers. The endpoint simply returns a string that the user inputs\n\nRequired arguments:\n```\necho: A string that will be returned to the user\n```\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceEchoResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceEchoRequest"
              }
            }
          }
        }
      }
    },
    "/riot-client-app-command/submit": {
      "put": {
        "tags": [
          "Plugin riot-client-app-command"
        ],
        "description": "Used to coerce an application to invoke a registered command. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCommandCommand"
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle-state/v1/state/{state}/{param}/subscriber/{subscriber}/serial-number": {
      "put": {
        "tags": [
          "Plugin riot-client-lifecycle-state"
        ],
        "description": "Sets a serial number for a parameterized state. ",
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "param",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "subscriber",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/riot-client-lifecycle-state/v1/state/{state}/subscriber/{subscriber}/serial-number": {
      "put": {
        "tags": [
          "Plugin riot-client-lifecycle-state"
        ],
        "description": "Sets a single named serial number. ",
        "parameters": [
          {
            "in": "path",
            "name": "state",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "subscriber",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "number",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/riotclient/ux-load-complete": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Ux notification that it has completed loading the main window. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-lifecycle/v1/hide": {
      "put": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Hide the UX. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-lifecycle/v1/quit": {
      "put": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Quit Riot Client. If any games are running hide Riot Client instead. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-lifecycle/v1/restart": {
      "put": {
        "tags": [
          "Plugin rnet-lifecycle"
        ],
        "description": "Restarts Riot Client. If any games are running show the games-running exit-dialog. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-product-registry/v1/move-install-requests/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Request to move the install for a product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RnetProductRegistryMoveInstallStatus"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetProductRegistryMoveInstallOptions"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v1/verify-install/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Verify that a specific product's patchline is installed via patch plugin ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/products/{productId}/patchlines/{patchlineId}/root-path": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Updates product root path and patching resources for the specified product/patchline ID ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/products/{productId}/patchlines/{patchlineId}/shortcut": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Create or update the shortcut for a product, optionally at a specific path ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetProductRegistryCreateShortcutsRequest"
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/products/{productId}/patchlines/{patchlineId}/uninstall-key": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "create or update the uninstall key for a product ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-product-registry/v4/repair-requests/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin rnet-product-registry"
        ],
        "description": "Notify Product Registry that a user has requested to repair a product. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/rnet-sanitizer/v1/locale": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Set a custom locale for sanitization. Locale should be in language_country format (e.g., zh_CN, ko_KR) and should be one of the available locales for the current region/patchline. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RnetSanitizerSanitizerLocale"
              }
            }
          }
        }
      }
    },
    "/rnet-self-update/v1/repair": {
      "put": {
        "tags": [
          "Plugin rnet-self-update"
        ],
        "description": "Trigger a repair because there was an error updating. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rnet-self-update/v1/retry": {
      "put": {
        "tags": [
          "Plugin rnet-self-update"
        ],
        "description": "Retry self-update because there was an error updating ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/rso-auth/v1/session/credentials": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an authentication session with credentials to login. \n [Help] Progresses the login flow for the session with the required player credentials.\n\nThis API should be called when prompted for `needs_authentication` from the `/rso-auth/v2/authorizations` API. Along with the user's credentials, this API will also take the `trustDevice` boolean to tell the RSO service whether or not to record this device as a trusted device to remember for use when determining trust level requirements.\n\nThis API returns a response that contains a type to determine how to follow up in the login process. If the credentials are accepted then the type will be set to `authenticated`.\n\nIf further verification is required then the type may be set to `needs_multifactor_verification`, in which case details can be found in the `MultifactorDetails`, and the required input should be PUT to `/rso-auth/v2/authentication/multifactor`\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionCredentials"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session/login-token": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an authentication session with a token from rso-authenticator. \n [Help] Authenticates a player using a token from rso-authenticator.\n\nThe `authentication_type` value should be `SSOAuth` for social/3rd party authentication tokens (e.g. Google, Facebook, etc), and `Riot Auth` for Riot Games authentication tokens.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionLoginToken"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session/multifactor": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an authentication session with multifactor input to complete login. \n [Help] Progresses the login flow for the session with the required multifactor authentication.\n\nThis API should be called when prompted for `needs_multifactor_verification` after providing credentials through `/rso-auth/v2/authentication/credentials`.\n\nThe `retry` boolean can be set when calling this API to cause MFA to push the multifactor message to the user again.\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionMultifactor"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session/reauthentication": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an authentication session with player password to reauthenticate. \n [Help] Reauthenticates the session with the player password.\n\nThis API should be called when prompted for `needs_reauthentication` from the `/rso-auth/v2/authorizations` API\n\nIf the password is accepted, then the type will be set to `authenticated`.\n\nIn some error cases, the `error` string may be set to indicate more information about the authentication state.\n",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionReauthentication"
              }
            }
          }
        }
      }
    },
    "/rso-auth/v1/session/signup-token": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update an authentication session with a token from signup-api. \n [Help] Authenticates a player using a token from signup-api",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthSessionResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthSessionSignup"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/apple": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with apple open id token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/code": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with a code from a previous federated authentication. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/facebook": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with facebook access token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/gamecenter": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with gamecenter credentials. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/google": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with google open id token. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/nintendo": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with nintendo open id tokens. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/playstation": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with playstation authorization code. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/resendCode": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Request that a code for linking be resent. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/riot-identity": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with riot identity. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/rso": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing RSO account with access and id tokens. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1RsoInput"
              }
            }
          }
        }
      }
    },
    "/rso-authenticator/v1/authentication/link/xbox": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Link the current authentication with an existing account with xbox tokens. ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput"
              }
            }
          }
        }
      }
    },
    "/system-info/v1/routine/resume": {
      "put": {
        "tags": [
          "Plugin system-info"
        ],
        "description": "Resumes the routine to pull SystemInfo ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/system-info/v1/routine/start": {
      "put": {
        "tags": [
          "Plugin system-info"
        ],
        "description": "Starts the routine to pull SystemInfo and send a warning to riot client if CPU or memory usage is high ",
        "parameters": [
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/system-info/v1/routine/stop": {
      "put": {
        "tags": [
          "Plugin system-info"
        ],
        "description": "Stops the routine to pull SystemInfo ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        }
      }
    },
    "/system-tray/v1/native-notification/show": {
      "put": {
        "tags": [
          "Plugin system-tray"
        ],
        "description": "Display a native notification tooltips in the systray ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnyType"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemTrayNotificationData"
              }
            }
          }
        }
      }
    },
    "/telemetry/v2/events/{id}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the event (32-character GUID or human readable string)",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "A serialized event that conforms to schema specified by 'id'. Metadata field is optional for Analytics Pipeline events.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/telemetry/v2/events-extended/{id}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sends the event to the Analytics Pipeline CollectorV2 endpoint (https://data.riotgames.com). This backend differs from /v1/events as it requires schemas to be registered in the schema repository. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the event (32-character GUID or human readable string)",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "A structure that contains two separate fields:\n- 'data' - A serialized event that conforms to schema specified by 'id'. Metadata field is optional for Analytics Pipeline events.\n- 'additionalFields' - An optional structure that will be sent in addition to the 'data' of the event. This additional data will be attached in a different way for each collector: for events headed to Analytics Platform, the data will be sent as a single string field containing serialized JSON. (The schema of the event must contain a field named 'additionalFields'.) For events headed to New Relic, all of the fields will be sent mixed in with the 'data', with each field name prepended with 'additionalFields.'.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedEventData"
              }
            }
          }
        }
      }
    },
    "/telemetry/v2/events-schemaless/{id}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Sends the event directly to New Relic, without sending the data to AP. ",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "An AP-schema-like id for this event, in `world__event__version` format.\nThis id does not need to be registered with AP. Using an id with a different format will make it difficult to query across existing data in New Relic.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "description": "A schemaless set of key-value pairs, to be sent to New Relic as JSON. The format of the data must be compatible with New Relic.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnyType"
              }
            }
          }
        }
      }
    },
    "/vanguard/v1/installed-products": {
      "put": {
        "tags": [
          "Plugin vanguard"
        ],
        "description": "Intended to provide product arguments to Vanguard installer ",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/vanguard/v1/update/products/{productId}/patchlines/{patchlineId}": {
      "put": {
        "tags": [
          "Plugin vanguard"
        ],
        "description": "Request that Vanguard update, prompting UAC if required. ",
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "patchlineId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VanguardPluginState"
                }
              }
            }
          }
        }
      }
    },
    "/voice-chat/v1/settings/sync/{productName}": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Update current voice chat settings synchronously \n [Help] One of the challenges of using the asynchronous voice-chat settings endpoint (e.g., PUT /voice-chat/vX/settings/{productName}) is that a successful response returned by the endpoint simply means that the updates were received by the RiotGamesApi and will eventually be applied. Game teams are required to subscribe to the corresponding GET endpoint to receive notifications for when the change actually goes through, making it tricky to create a good UI experience around the voice settings. \nThe main advantage of this synchronous version of the voice-chat settings endpoint is that it ensures the voice-chat settings update will either happen successfully or will be reverted back to the original voice-chat settings. Hence, game teams will be able to update their UI once a success is returned or do nothing if a failure is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "productName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceChatSettingsResource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceChatUpdateSettingsResource"
              }
            }
          }
        }
      }
    },
    "/voice-chat/v2/devices/capture/prompt-for-permission": {
      "put": {
        "tags": [
          "core-sdk"
        ],
        "description": "Prompts the user for permission to use the microphone, if required. \n [Help] On Mac OS, starting from 10.14 (Mojave), we must ask the user for permission to access the microphone. Until they accept the prompt, or if they decline, the microphone will be unavailable, and voice will not be transmitted.\nBefore joining a voice channel, users of this plugin should call PUT on this endpoint while being subscribed for updates to /voice-chat/v2/devices/capture/permission. If 'permission' is updated to 'true', the listener must leave and re-join the voice channel to enable the microphone.\nIf the user has already granted or denied permission, this endpoint does nothing. The endpoint always returns immediately with success.",
        "parameters": [],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "2XX": {
            "description": "Returns nothing"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Missing authentication credentials"
      }
    },
    "schemas": {
      "AccessToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "AccountsSecurityAccountsSecurity": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "granted": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "AccountsSecurityHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "AccountsSecurityProductSessionSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "AesAESPlaystationAuthCodeRequest": {
        "type": "object",
        "properties": {
          "auth_code": {
            "type": "string"
          }
        }
      },
      "AesAESPlaystationAuthCodeResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "httpStatus": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "AesAESPlaystationMetadataResponse": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          },
          "httpStatus": {
            "type": "number",
            "format": "int32"
          },
          "product": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AesAESPluginTelemetryAdditionalFields": {
        "type": "object",
        "properties": {
          "attemptCount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "AesAESPluginTelemetryData": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/AesAESProvider"
          },
          "result": {
            "$ref": "#/components/schemas/AesAESPluginTelemetryResult"
          }
        }
      },
      "AesAESPluginTelemetryResult": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "disabled"
        ]
      },
      "AesAESProvider": {
        "type": "string",
        "enum": [
          "playstation"
        ]
      },
      "AesAESStatus": {
        "type": "string",
        "enum": [
          "None",
          "Pending",
          "Missing",
          "Available"
        ]
      },
      "AesAESStatusResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AesAESStatus"
          }
        }
      },
      "AesAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "AesV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NotSignedUp",
          "Logout",
          "LatestSystemSoftwareExist",
          "ClientIdEmpty",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "AesV2AuthorizationNativeCode": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "AesV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AesV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/AesV2AuthorizationError"
          },
          "nativeCode": {
            "$ref": "#/components/schemas/AesV2AuthorizationNativeCode"
          },
          "type": {
            "$ref": "#/components/schemas/AesV2AuthorizationResponseType"
          }
        }
      },
      "AesV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "NativeCode"
        ]
      },
      "AgeRestriction": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "AgeRestrictionAgeRestriction": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "AgeRestrictionHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "AgentRequest": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AgentRequestType"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "AgentRequestQueue": {
        "type": "object",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/AgentRequest"
          },
          "pending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentRequest"
            }
          }
        }
      },
      "AgentRequestType": {
        "type": "string",
        "enum": [
          "ThirdPartyDependency"
        ]
      },
      "AgentResourceEvent": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          },
          "eventType": {
            "$ref": "#/components/schemas/AgentResourceEventType"
          },
          "data": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "AgentResourceEventType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "AgentSession": {
        "type": "object",
        "properties": {
          "isElevated": {
            "type": "boolean"
          },
          "processsId": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "AliasRequiredResponse": {
        "type": "object",
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        }
      },
      "AmbassadorErrorResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "httpStatus": {
            "type": "number",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AntiAddictionAntiAddictionConfig": {
        "type": "object",
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "enabledProductId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "heartbeatInterval": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AntiAddictionAntiAddictionPolicy": {
        "type": "object",
        "properties": {
          "hopePayload": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "localizationKey": {
            "type": "string"
          },
          "payloadToken": {
            "type": "string"
          },
          "policyType": {
            "$ref": "#/components/schemas/AntiAddictionPolicyType"
          },
          "triggerTimeInSec": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "AntiAddictionAntiAddictionStandaloneConfig": {
        "type": "object",
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "heartbeatInterval": {
            "type": "number",
            "format": "double"
          },
          "webRequestInitialRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestMaxRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestRetryCount": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "AntiAddictionAntiAddictionState": {
        "type": "object",
        "properties": {
          "displayType": {
            "$ref": "#/components/schemas/AntiAddictionDisplayType"
          },
          "hopePayload": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "localizationContext": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "localizationKey": {
            "type": "string"
          },
          "payloadToken": {
            "type": "string"
          },
          "policyType": {
            "$ref": "#/components/schemas/AntiAddictionPolicyType"
          }
        }
      },
      "AntiAddictionDisplayType": {
        "type": "string",
        "enum": [
          "MODAL_DIALOG",
          "PASSIVE_DIPLAY"
        ]
      },
      "AntiAddictionPolicyType": {
        "type": "string",
        "enum": [
          "shutdown",
          "playTime",
          "warningMessage",
          "disableMatchMaking"
        ]
      },
      "AntiAddictionProductSessionSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "AppCommandAuthStatus": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/AppCommandAuthStatusState"
          }
        }
      },
      "AppCommandAuthStatusState": {
        "type": "string",
        "enum": [
          "Unknown",
          "Succeeded",
          "Failed"
        ]
      },
      "AppCommandAuthorizationResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AppCommandAuthorizationResponseType"
          }
        }
      },
      "AppCommandAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "AppCommandCommand": {
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/AppCommandCommandKind"
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "AppCommandCommandAuthV1": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "AppCommandCommandKind": {
        "type": "string",
        "enum": [
          "Unknown",
          "AuthV1",
          "Vng"
        ]
      },
      "AppCommandCommandVng": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "AppCommandLaunchRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "AppCommandLaunchV1": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "AppFocusRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          }
        }
      },
      "AppInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "patchlineVisibleName": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "sdkVersion": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "AppRepairApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "repairCode": {
            "$ref": "#/components/schemas/RepairCode"
          }
        }
      },
      "AppUpdateApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "AppleAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "AppleAccountAppleAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "invalid_credentials_type",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_authorization_error_failed",
          "as_authorization_error_invalid_response",
          "as_authorization_error_not_handled",
          "as_authorization_error_unknown",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "AppleAccountAppleAuthorizationOpenConnectId": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "AppleAccountAppleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AppleAccountAppleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/AppleAccountAppleAuthorizationError"
          },
          "open_connect_id": {
            "$ref": "#/components/schemas/AppleAccountAppleAuthorizationOpenConnectId"
          },
          "type": {
            "$ref": "#/components/schemas/AppleAccountAppleAuthorizationResponseType"
          }
        }
      },
      "AppleAccountAppleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "open_connect_id",
          "code_exchange"
        ]
      },
      "AppleAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "AppleAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "AppleAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "AppleAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "AppleAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/AppleAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/AppleAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "AuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth"
        ]
      },
      "BindingFullApiHelp": {
        "type": "object",
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullFunctionHelp"
            }
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullTypeHelp"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullEventHelp"
            }
          }
        }
      },
      "BindingFullArgumentHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          },
          "optional": {
            "type": "boolean"
          }
        }
      },
      "BindingFullEnumValueHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "BindingFullEventHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BindingFullFieldHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "offset": {
            "type": "number",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          },
          "optional": {
            "type": "boolean"
          }
        }
      },
      "BindingFullFunctionHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullArgumentHelp"
            }
          },
          "returns": {
            "$ref": "#/components/schemas/BindingFullTypeIdentifier"
          },
          "description": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "threadSafe": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subscribable": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "deprecatedHelp": {
            "type": "string"
          },
          "internal": {
            "type": "boolean"
          }
        }
      },
      "BindingFullTypeHelp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nameSpace": {
            "type": "string"
          },
          "size": {
            "type": "number",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullFieldHelp"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingFullEnumValueHelp"
            }
          }
        }
      },
      "BindingFullTypeIdentifier": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "elementType": {
            "type": "string"
          }
        }
      },
      "BindingHelpFormat": {
        "type": "string",
        "enum": [
          "Full",
          "Epytext"
        ]
      },
      "BootstrapProcessRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "ChatAccountChatSettings": {
        "type": "object",
        "properties": {
          "bounceDockIconEnabled": {
            "type": "boolean"
          },
          "chat-status-message": {
            "type": "string"
          },
          "chatFilterDisabled": {
            "type": "boolean"
          },
          "chatGBG": {
            "type": "boolean"
          },
          "chatGroupMobile": {
            "type": "boolean"
          },
          "chatGroupOffline": {
            "type": "boolean"
          },
          "chatWindow": {
            "$ref": "#/components/schemas/ChatChatWindowSettings"
          },
          "chatWindowDockedHeight": {
            "type": "number",
            "format": "int32"
          },
          "closed-conversations": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int64"
            }
          },
          "friendRequestToastsDisabled": {
            "type": "boolean"
          },
          "hidden-conversations": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int64"
            }
          },
          "linkClickWarningEnabled": {
            "type": "boolean"
          },
          "messageNotificationsEnabled": {
            "type": "boolean"
          },
          "moreUnreadsEnabled": {
            "type": "boolean"
          },
          "muted-conversations": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "recentlyPlayedFirstOpen": {
            "type": "boolean"
          },
          "recentlyPlayedOpen": {
            "type": "boolean"
          },
          "roster-group-collapsed": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "showWhenTypingEnabled": {
            "type": "boolean"
          },
          "sortBy": {
            "type": "string"
          },
          "usePlayerPreferences": {
            "type": "boolean"
          }
        }
      },
      "ChatAccountState": {
        "type": "string",
        "enum": [
          "offline",
          "mobile",
          "away",
          "chat",
          "dnd"
        ]
      },
      "ChatActiveConvo": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          }
        }
      },
      "ChatApiTelemetry": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "number",
            "format": "int64"
          },
          "method": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "productSession": {
            "$ref": "#/components/schemas/ChatProductSession"
          },
          "requestSession": {
            "type": "string"
          },
          "response_code": {
            "type": "number",
            "format": "int32"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "ChatBlockPid": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatBlockedAction": {
        "type": "string",
        "enum": [
          "deny"
        ]
      },
      "ChatBlockedMapResource": {
        "type": "object",
        "properties": {
          "blocks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatChatBlockedPlayer"
            }
          }
        }
      },
      "ChatChatBlockedList": {
        "type": "object",
        "properties": {
          "blocked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatBlockedPlayer"
            }
          }
        }
      },
      "ChatChatBlockedPlayer": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatChatFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "type": "number",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatChatFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatFriend"
            }
          }
        }
      },
      "ChatChatGamePresence": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPresencesChatParty"
            }
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "shared": {
            "$ref": "#/components/schemas/ChatChatSharedPayload"
          },
          "sharedJwt": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState"
          }
        }
      },
      "ChatChatGamePresenceUpdate": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "session": {
            "type": "string"
          },
          "update": {
            "$ref": "#/components/schemas/ChatChatGamePresence"
          }
        }
      },
      "ChatChatGroup": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "isMetaGroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ChatChatGroupList": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatGroup"
            }
          }
        }
      },
      "ChatChatGroupUpdate": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "new_name": {
            "type": "string"
          }
        }
      },
      "ChatChatLoginStateTelemetry": {
        "type": "object",
        "properties": {
          "chatServiceURI": {
            "type": "string"
          },
          "finalLoginState": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus"
          },
          "previousBackoffDelay": {
            "type": "number",
            "format": "int32"
          },
          "previousConnectResult": {
            "$ref": "#/components/schemas/ChatXmppConnectResult"
          },
          "retryCount": {
            "type": "number",
            "format": "int32"
          },
          "succeededInFinalState": {
            "type": "boolean"
          },
          "timeSinceLoginStartMs": {
            "type": "number",
            "format": "int64"
          },
          "timeSpentInFinalStateMs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatChatMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "droppedDueToThrottle": {
            "type": "boolean"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          },
          "uicEvent": {
            "type": "boolean"
          }
        }
      },
      "ChatChatMessageList": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatMessage"
            }
          }
        }
      },
      "ChatChatParticipant": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "isInteractionAllowed": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatChatParticipants": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatParticipant"
            }
          }
        }
      },
      "ChatChatPlayer": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "isInteractionAllowed": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/ChatMultiGamePresence"
          },
          "priority": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        }
      },
      "ChatChatPlayerParticipants": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatPlayer"
            }
          }
        }
      },
      "ChatChatSession": {
        "type": "object",
        "properties": {
          "federated": {
            "type": "boolean"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "loaded": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatChatSessionState"
          }
        }
      },
      "ChatChatSessionData": {
        "type": "string",
        "enum": [
          "kNone",
          "kSettings",
          "kPresences",
          "kRoster",
          "kRosterReady",
          "kPrivacies",
          "kRecentConvos",
          "kAll",
          "kSentRoster",
          "kTimeOut"
        ]
      },
      "ChatChatSessionState": {
        "type": "string",
        "enum": [
          "disconnected",
          "connecting",
          "connected"
        ]
      },
      "ChatChatSharedPayload": {
        "type": "object",
        "properties": {
          "actor": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatChatWindowSettings": {
        "type": "object",
        "properties": {
          "detached": {
            "type": "boolean"
          },
          "height": {
            "type": "number",
            "format": "int32"
          },
          "left": {
            "type": "number",
            "format": "int32"
          },
          "top": {
            "type": "number",
            "format": "int32"
          },
          "width": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ChatCommandTelemetry": {
        "type": "object",
        "properties": {
          "commandGroupUuid": {
            "type": "string"
          },
          "commandType": {
            "type": "string"
          },
          "hasPromiseToFulfill": {
            "type": "boolean"
          },
          "isBlocking": {
            "type": "boolean"
          },
          "mutatorExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "notifierExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "promiseFulfillmentTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "queueSize": {
            "type": "number",
            "format": "int64"
          },
          "timeInQueueMs": {
            "type": "number",
            "format": "int64"
          },
          "totalExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "validatorExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatConfigReadinessEnum": {
        "type": "string",
        "enum": [
          "NotReady",
          "Ready"
        ]
      },
      "ChatConfigStatus": {
        "type": "object",
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/ChatConfigReadinessEnum"
          },
          "updateId": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/ChatConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/ChatConnectivityValue"
          }
        }
      },
      "ChatConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "ChatConversationCreateJoin": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "fetch_history": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "session": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatConversationCreateJoinFederated": {
        "type": "object",
        "properties": {
          "join": {
            "$ref": "#/components/schemas/ChatConvoJoinFederated"
          },
          "session": {
            "type": "string"
          }
        }
      },
      "ChatConversationEdit": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "mutedRestriction": {
            "type": "boolean"
          }
        }
      },
      "ChatConversationInitRecent": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "lastMessageRead": {
            "type": "boolean"
          },
          "msg": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "pid": {
            "type": "string"
          },
          "readPoint": {
            "$ref": "#/components/schemas/ChatReadPoint"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatConversationInitRecentList": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatConversationInitRecent"
            }
          }
        }
      },
      "ChatConversationReadership": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "readTs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatConversationReadershipList": {
        "type": "object",
        "properties": {
          "readTs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatConversationReadership"
            }
          }
        }
      },
      "ChatConversationSetActive": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        }
      },
      "ChatConvoCid": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ChatConvoJoin": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatConvoJoinFederated": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "targetRegion": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatConvoUpdate": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          }
        }
      },
      "ChatDebugChatGamePresence": {
        "type": "object",
        "properties": {
          "jwt_actor": {
            "type": "string"
          },
          "jwt_details": {
            "type": "string"
          },
          "jwt_location": {
            "type": "string"
          },
          "jwt_patchline": {
            "type": "string"
          },
          "jwt_platform": {
            "type": "string"
          },
          "jwt_product": {
            "type": "string"
          },
          "jwt_time": {
            "type": "number",
            "format": "int64"
          },
          "msg": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "private_jwt": {
            "type": "string"
          },
          "shared": {
            "$ref": "#/components/schemas/ChatChatSharedPayload"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState"
          }
        }
      },
      "ChatDebugConfig": {
        "type": "object",
        "properties": {
          "readershipInterval": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ChatDeleteMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "senderPuuid": {
            "type": "string"
          }
        }
      },
      "ChatDeviceChatSettings": {
        "type": "object",
        "properties": {
          "mobilePushNotificationsEnabled": {
            "type": "boolean"
          }
        }
      },
      "ChatDisconnectTelemetry": {
        "type": "object",
        "properties": {
          "chatServiceURI": {
            "type": "string"
          },
          "isDisconnectExpected": {
            "type": "boolean"
          },
          "socketClosedReason": {
            "type": "string"
          },
          "totalTimeConnectedMs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatEntitlementsTokenResource": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ChatError": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "ts": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatErrorId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "ChatErrorList": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatError"
            }
          }
        }
      },
      "ChatExecutionTime": {
        "type": "object",
        "properties": {
          "executionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "measurementName": {
            "type": "string"
          },
          "measurementType": {
            "$ref": "#/components/schemas/ChatMeasurementType"
          },
          "optionalData": {
            "$ref": "#/components/schemas/ChatOptionalMeasurementInformation"
          }
        }
      },
      "ChatExecutionTimeSummarization": {
        "type": "object",
        "properties": {
          "measurementExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "measurementName": {
            "type": "string"
          },
          "measurementsNum": {
            "type": "number",
            "format": "int32"
          },
          "optionalData": {
            "$ref": "#/components/schemas/ChatOptionalMeasurementInformation"
          },
          "totalExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatExecutionTimes": {
        "type": "object",
        "properties": {
          "executionTimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatExecutionTime"
            }
          }
        }
      },
      "ChatExecutionTimesTelemetry": {
        "type": "object",
        "properties": {
          "allMeasurementsExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "longestCategoryMeasurementExecutionTimeUs": {
            "type": "number",
            "format": "int64"
          },
          "longestCategoryMeasurementType": {
            "$ref": "#/components/schemas/ChatMeasurementType"
          },
          "longestIndividualMeasurement": {
            "$ref": "#/components/schemas/ChatExecutionTimeSummarization"
          },
          "longestIndividualMeasurementType": {
            "$ref": "#/components/schemas/ChatMeasurementType"
          },
          "longestMeasurements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "ChatFriendGroup": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "isMetaGroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        }
      },
      "ChatFriendGroupCreate": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ChatFriendGroupList": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatFriendGroup"
            }
          }
        }
      },
      "ChatFriendGroupName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatFriendGroupOrder": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatFriendGroupSyncList": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatGroupsFriendGroupSync"
            }
          }
        }
      },
      "ChatFriendGroupUpdate": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "new_name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        }
      },
      "ChatFriendPid": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatFriendRequest": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ChatFriendSubscriptionType"
          }
        }
      },
      "ChatFriendRequestAdd": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatFriendRequestList": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatFriendRequest"
            }
          }
        }
      },
      "ChatFriendRequestListPuuid": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatFriendRequestPuuid"
            }
          }
        }
      },
      "ChatFriendRequestPost": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatFriendRequestPuuid": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ChatFriendSubscriptionType"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatFriendSubscriptionType": {
        "type": "string",
        "enum": [
          "pending_out",
          "pending_in"
        ]
      },
      "ChatFriendUpdate": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatFriendUpdateList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChatFriend"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatGroupsFriendGroupSync": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          }
        }
      },
      "ChatJWTIssueResource": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "ChatJWTVerifyResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "ChatLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/ChatLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/ChatLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/ChatLookupV1XboxNameset"
          }
        }
      },
      "ChatLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/ChatLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/ChatLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/ChatLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/ChatLookupV1XboxNameset"
          }
        }
      },
      "ChatLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "ChatLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "ChatLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/ChatLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/ChatLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/ChatLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "ChatLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/ChatLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/ChatLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/ChatLookupV2XboxNameset"
          }
        }
      },
      "ChatLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "ChatLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "ChatLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "ChatMeasurementType": {
        "type": "string",
        "enum": [
          "unknown",
          "notifyResourceCreated",
          "notifyResourceUpdated",
          "notifyResourceDeleted",
          "externalRequestHead",
          "externalRequestGet",
          "externalRequestPost",
          "externalRequestPut",
          "externalRequestPatch",
          "externalRequestDelete",
          "queueJob",
          "queueCommand",
          "fulfillPromise",
          "log",
          "lockGrabTime",
          "lockHoldTime"
        ]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cts": {
            "type": "string"
          },
          "droppedDueToThrottle": {
            "type": "boolean"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "ts": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          },
          "uicEvent": {
            "type": "boolean"
          }
        }
      },
      "ChatMessageList": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          }
        }
      },
      "ChatMessagePost": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatMessageSend": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatMessageType": {
        "type": "string",
        "enum": [
          "chat",
          "groupchat",
          "dm",
          "system"
        ]
      },
      "ChatMessagesArchive": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "readPointTs": {
            "type": "number",
            "format": "int64"
          },
          "xmppId": {
            "type": "string"
          }
        }
      },
      "ChatMessagesFetchArchive": {
        "type": "object",
        "properties": {
          "before": {
            "type": "number",
            "format": "int32"
          },
          "cid": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "int32"
          },
          "since": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ChatMessagesSendChatMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "sendId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatMultiGamePresence": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "basic": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatAccountState"
          },
          "summary": {
            "type": "string"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatMultiGamePresenceDelete": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        }
      },
      "ChatMultiGamePresenceList": {
        "type": "object",
        "properties": {
          "presences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMultiGamePresence"
            }
          }
        }
      },
      "ChatOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "ChatOptionalMeasurementInformation": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "firstGenericType": {
            "type": "string"
          },
          "functionName": {
            "type": "string"
          },
          "logMessage": {
            "type": "string"
          },
          "logSeverity": {
            "$ref": "#/components/schemas/ChatRiotLogLevel"
          },
          "secondGenericType": {
            "type": "string"
          },
          "thirdGenericType": {
            "type": "string"
          }
        }
      },
      "ChatParticipantEdit": {
        "type": "object",
        "properties": {
          "muted": {
            "type": "boolean"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatPermissionDetails": {
        "type": "object",
        "properties": {
          "denyReason": {
            "type": "string"
          },
          "hasPermission": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          }
        }
      },
      "ChatPermissionsRequestParameters": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string"
          }
        }
      },
      "ChatPermissionsResponse": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPermissionDetails"
            }
          }
        }
      },
      "ChatPlatformSocialBlockList": {
        "type": "object",
        "properties": {
          "blockedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialBlockedUser"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialBlockedUser": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialCommunicationPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatPlatformSocialCommunicationPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatPlatformSocialCommunicationPermission"
          },
          "reason": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatPlatformSocialCommunicationType"
          }
        }
      },
      "ChatPlatformSocialCommunicationType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Text",
          "Voice"
        ]
      },
      "ChatPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/ChatPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialCrossPlayPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatPlatformSocialCrossPlayPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatPlatformSocialCrossPlayPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialMultiplayerPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatPlatformSocialMultiplayerPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatPlatformSocialMultiplayerPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "ChatPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/ChatPlatformSocialOnlineStatus"
          }
        }
      },
      "ChatPlatformSocialTextPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatPlatformSocialTextPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatPlatformSocialTextPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialUserCommunicationPermission": {
        "type": "object",
        "properties": {
          "crossNetworkFriendsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "crossNetworkUsersPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userPermissionsMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatPlatformSocialUserCommunicationPermissionsEntry"
            }
          }
        }
      },
      "ChatPlatformSocialUserCommunicationPermissionsEntry": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userConsoleId": {
            "type": "string"
          }
        }
      },
      "ChatPlatformSocialVoicePermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatPlatformSocialVoicePermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatPlatformSocialVoicePermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatPlayerAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "ChatPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ChatPlayerPreferencesResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "modified": {
            "type": "number",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatPresenceDelete": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        }
      },
      "ChatPresenceProduct": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "ChatPresencesChatParty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "max_party_size": {
            "type": "number",
            "format": "int64"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPresencesChatPartyMember"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ChatPresencesPartyStatus"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatPresencesChatPartyMember": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/ChatPresencesPartyMemberRole"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatPresencesPartyMemberRole": {
        "type": "string",
        "enum": [
          "mem",
          "ldr"
        ]
      },
      "ChatPresencesPartyStatus": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ]
      },
      "ChatPrivacyReceiveBlockedPlayer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          }
        }
      },
      "ChatProductLocTranslateReq": {
        "type": "object",
        "properties": {
          "blocking": {
            "type": "boolean"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "ChatProductLocTranslateResp": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatProductLocTranslateResult"
            }
          }
        }
      },
      "ChatProductLocTranslateResult": {
        "type": "object",
        "properties": {
          "found": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ChatProductMetadata": {
        "type": "object",
        "properties": {
          "content_paths": {
            "$ref": "#/components/schemas/ChatProductMetadataContentPaths"
          }
        }
      },
      "ChatProductMetadataContentPaths": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "string"
          },
          "riotstatus": {
            "type": "string"
          },
          "social": {
            "type": "string"
          }
        }
      },
      "ChatProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ChatProductSessionState": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "ChatProtocolPreference": {
        "type": "string",
        "enum": [
          "any",
          "ipv4",
          "ipv6"
        ]
      },
      "ChatReadCollectionData": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "subkey": {
            "type": "string"
          }
        }
      },
      "ChatReadPoint": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "readTimeStamp": {
            "type": "string"
          }
        }
      },
      "ChatRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatRequestPid": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatRequestPuuid": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatRiotLogLevel": {
        "type": "string",
        "enum": [
          "Okay",
          "Warning",
          "Error",
          "Always"
        ]
      },
      "ChatRiotUser": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/ChatOnlinePlatform"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatRsoAccessTokenResource": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ChatRsoAuthorizationResource": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "ChatRsoIdTokenResource": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ChatSanitizeRequest": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "level": {
            "type": "number",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatSanitizeResponse": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatSanitizerStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "ChatSessionPlatform": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string"
          }
        }
      },
      "ChatSessionState": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatProductSessionState"
            }
          }
        }
      },
      "ChatSessionSuspendConfig": {
        "type": "object",
        "properties": {
          "resumeLatestPresences": {
            "type": "boolean"
          }
        }
      },
      "ChatSocialData": {
        "type": "object",
        "properties": {
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          }
        }
      },
      "ChatSocialDataReq": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "ChatSocketClosedCode": {
        "type": "string",
        "enum": [
          "NEW_CONNECTION",
          "INIT_ERROR",
          "BAD_AUTH_MECHANISMS_STANZA",
          "AUTH_FAILURE",
          "BAD_FEATURES_STANZA",
          "BAD_BIND_STANZA",
          "BAD_SESSION_STANZA",
          "TIMEOUT_DURING_LOGIN",
          "LOGGING_OUT",
          "STREAM_ENDED",
          "SOCKET_UNAVAILABLE",
          "FINALIZED",
          "BAD_MIGRATE_STANZA",
          "BAD_MIGRATE_AUTH_MECHANISMS_STANZA",
          "MIGRATE_AUTH_FAILURE",
          "SUSPEND",
          "UNKNOWN"
        ]
      },
      "ChatStanzaResponseTelemetry": {
        "type": "object",
        "properties": {
          "chatServiceURI": {
            "type": "string"
          },
          "handlerSucceeded": {
            "type": "boolean"
          },
          "iqid": {
            "type": "string"
          },
          "iqidPrefix": {
            "type": "string"
          },
          "receivedServiceResponse": {
            "type": "boolean"
          },
          "totalTimeToProcessMs": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatUIState": {
        "type": "object",
        "properties": {
          "changedSinceHidden": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "ChatUIStateConversation": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "direct_messages": {
            "type": "boolean"
          },
          "global_readership": {
            "type": "boolean"
          },
          "message_history": {
            "type": "boolean"
          },
          "mid": {
            "type": "string"
          },
          "muted": {
            "type": "boolean"
          },
          "mutedRestriction": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          },
          "uiState": {
            "$ref": "#/components/schemas/ChatUIState"
          },
          "unread_count": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatUIStateConversationJoin": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "process": {
            "type": "number",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageType"
          }
        }
      },
      "ChatUIStateConversationList": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatUIStateConversation"
            }
          }
        }
      },
      "ChatUIStateConversationUpdate": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          }
        }
      },
      "ChatUpdateChatSettings": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "shouldSave": {
            "type": "boolean"
          }
        }
      },
      "ChatUpdateProductSession": {
        "type": "object",
        "properties": {
          "productSession": {
            "$ref": "#/components/schemas/ChatProductSession"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ChatUpdateSanitizerSettings": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "forceFilter": {
            "type": "boolean"
          }
        }
      },
      "ChatUserCommunicationPermissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatUserCommunicationPermissionsV2Request": {
        "type": "object",
        "properties": {
          "queryCache": {
            "type": "boolean"
          },
          "riotUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatRiotUser"
            }
          }
        }
      },
      "ChatXmppConnectResult": {
        "type": "string",
        "enum": [
          "undefined",
          "success",
          "invalidUri",
          "failedHostnameResolution",
          "failedSocketInit",
          "failedSslInit"
        ]
      },
      "ChatXmppConnectionState": {
        "type": "object",
        "properties": {
          "socketCode": {
            "$ref": "#/components/schemas/ChatSocketClosedCode"
          },
          "status": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus"
          }
        }
      },
      "ChatXmppConnectionStatus": {
        "type": "string",
        "enum": [
          "DISCONNECTED",
          "CONNECTING",
          "STREAM_SENT",
          "STREAM_RECV",
          "AUTH_FEATURES_RECV",
          "AUTH_SENT",
          "AUTHENTICATED",
          "AUTH_STREAM_SENT",
          "AUTH_STREAM_RECV",
          "FEATURES_RECV",
          "BIND_SENT",
          "BIND_RECV",
          "ENTITLEMENTS_SENT",
          "RXEP_SENT",
          "SESSION_SENT",
          "ENTITLEMENTS_RECV",
          "RXEP_RECV",
          "CONNECTED",
          "MIGRATE_RECEIVED",
          "MIGRATE_SENT",
          "MIGRATE_DISCONNECTED",
          "MIGRATE_CONNECTING",
          "MIGRATE_STREAM_SENT",
          "MIGRATE_STREAM_RECV",
          "MIGRATE_AUTH_FEATURES_RECV",
          "MIGRATE_AUTH_SENT",
          "MIGRATE_AUTHENTICATED",
          "MIGRATE_AUTH_STREAM_SENT",
          "MIGRATE_AUTH_STREAM_RECV"
        ]
      },
      "ChatXmppReceivedStanza": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "stanzaStr": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatXmppSendStanza": {
        "type": "object",
        "properties": {
          "stanzaRaw": {
            "type": "string"
          }
        }
      },
      "ChatXmppSessionId": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ChatXmppSettings": {
        "type": "object",
        "properties": {
          "affinityDomains": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "affinityEnabled": {
            "type": "boolean"
          },
          "affinityHints": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "affinityHosts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "allowBadCert": {
            "type": "boolean"
          },
          "autoQueryMsgHistory": {
            "type": "boolean"
          },
          "chatHost": {
            "type": "string"
          },
          "chatPort": {
            "type": "number",
            "format": "int32"
          },
          "defaultMobileProductId": {
            "type": "string"
          },
          "disableChatRestrictionMutedSystemMessage": {
            "type": "boolean"
          },
          "enableKeystonePresence": {
            "type": "boolean"
          },
          "gameNameTaglineEnabled": {
            "type": "boolean"
          },
          "heartBeatIntervalSecs": {
            "type": "number",
            "format": "int32"
          },
          "immediateConnectProducts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keepAliveIntervalSecs": {
            "type": "number",
            "format": "int32"
          },
          "keepAliveTimeoutSecs": {
            "type": "number",
            "format": "int32"
          },
          "productsRequiringJwtPresence": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "protocolPreference": {
            "$ref": "#/components/schemas/ChatProtocolPreference"
          },
          "replaceRichMessages": {
            "type": "boolean"
          },
          "useTLS": {
            "type": "boolean"
          }
        }
      },
      "ChatXmppStatusCheckData": {
        "type": "object",
        "properties": {
          "maxNotAllowed": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus"
          },
          "minNotAllowed": {
            "$ref": "#/components/schemas/ChatXmppConnectionStatus"
          },
          "resource": {
            "type": "string"
          }
        }
      },
      "ChatboxAccountState": {
        "type": "string",
        "enum": [
          "offline",
          "mobile",
          "away",
          "chat",
          "dnd"
        ]
      },
      "ChatboxBlockList": {
        "type": "object",
        "properties": {
          "blockedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxBlockedUser"
            }
          }
        }
      },
      "ChatboxBlockPid": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxBlockedUser": {
        "type": "object",
        "properties": {
          "blockedPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxOnlinePlatform"
            }
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "puuid": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          }
        }
      },
      "ChatboxBroadcast": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "ChatboxBroadcastRequest": {
        "type": "object",
        "properties": {
          "batch": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ChatboxChatFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "type": "number",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatboxChatFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatFriend"
            }
          }
        }
      },
      "ChatboxChatParticipant": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "isInteractionAllowed": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ChatboxChatParticipants": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatParticipant"
            }
          }
        }
      },
      "ChatboxChatPlayer": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "isInteractionAllowed": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/ChatboxMultiGamePresence"
          },
          "priority": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        }
      },
      "ChatboxChatPlayerParticipants": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatPlayer"
            }
          }
        }
      },
      "ChatboxChatSession": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "ChatboxChatboxChannel": {
        "type": "object",
        "properties": {
          "bIsActive": {
            "type": "boolean"
          },
          "bIsAllChannel": {
            "type": "boolean"
          },
          "bIsDefaultChannel": {
            "type": "boolean"
          },
          "bIsSystemChannel": {
            "type": "boolean"
          },
          "bIsWhisperChannel": {
            "type": "boolean"
          },
          "channelName": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ChatboxChatboxChannelResource": {
        "type": "object",
        "properties": {
          "bAssignToAll": {
            "type": "boolean"
          },
          "bAssignToDefault": {
            "type": "boolean"
          },
          "bIsActive": {
            "type": "boolean"
          },
          "channelId": {
            "type": "string"
          },
          "channelName": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "jsonResponseField": {
            "type": "string"
          },
          "jwksEndpointURL": {
            "type": "string"
          },
          "jwt": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "requestBody": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "requestHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatboxChatboxChannels": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatboxChannel"
            }
          }
        }
      },
      "ChatboxChatboxFriend": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxChatboxFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatboxFriend"
            }
          }
        }
      },
      "ChatboxChatboxMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "timeStamp": {
            "type": "number",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/ChatboxMessageType"
          },
          "uicEvent": {
            "type": "boolean"
          }
        }
      },
      "ChatboxChatboxMessageList": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatboxMessage"
            }
          }
        }
      },
      "ChatboxChatboxMessagePost": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "ChatboxConvoCid": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ChatboxConvoJoinFederated": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "targetRegion": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatboxMessageType"
          }
        }
      },
      "ChatboxErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ]
      },
      "ChatboxFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "activePlatformPlayerName": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/ChatboxLookupV1NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "ChatboxFriendList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxFriend"
            }
          }
        }
      },
      "ChatboxFriendListV1": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxFriendV1"
            }
          }
        }
      },
      "ChatboxFriendListV3": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxFriendV3"
            }
          }
        }
      },
      "ChatboxFriendRequestListPuuid": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxFriendRequestPuuid"
            }
          }
        }
      },
      "ChatboxFriendRequestPost": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatboxFriendRequestPuuid": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ChatboxFriendSubscriptionType"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatboxFriendSubscriptionType": {
        "type": "string",
        "enum": [
          "pending_out",
          "pending_in"
        ]
      },
      "ChatboxFriendUpdateList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxChatFriend"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ChatboxFriendV1": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/ChatboxLookupV1NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "ChatboxFriendV3": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "activePlatformPlayerName": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercardBackgroundUrl": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/ChatboxLookupV2NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "productFolderName": {
            "type": "string"
          },
          "productPresenceName": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/ChatboxUserRelationship"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "ChatboxJWTIssueResource": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "ChatboxLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatboxLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "ChatboxLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatboxLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/ChatboxLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/ChatboxLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/ChatboxLookupV1XboxNameset"
          }
        }
      },
      "ChatboxLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/ChatboxLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV1XboxNameset"
          }
        }
      },
      "ChatboxLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatboxLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "ChatboxLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "ChatboxLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatboxLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/ChatboxLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/ChatboxLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/ChatboxLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "ChatboxLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ChatboxLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/ChatboxLookupV2XboxNameset"
          }
        }
      },
      "ChatboxLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChatboxLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "ChatboxLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "ChatboxLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "ChatboxMessage": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "cts": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "ts": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatboxMessageType"
          },
          "uicEvent": {
            "type": "boolean"
          }
        }
      },
      "ChatboxMessageType": {
        "type": "string",
        "enum": [
          "chat",
          "groupchat",
          "dm",
          "system"
        ]
      },
      "ChatboxMultiGamePresence": {
        "type": "object",
        "properties": {
          "actor": {
            "type": "string"
          },
          "basic": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ChatboxAccountState"
          },
          "summary": {
            "type": "string"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatboxOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "ChatboxPermissionDetails": {
        "type": "object",
        "properties": {
          "denyReason": {
            "type": "string"
          },
          "hasPermission": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          }
        }
      },
      "ChatboxPermissionsRequestParameters": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string"
          }
        }
      },
      "ChatboxPermissionsResponse": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPermissionDetails"
            }
          }
        }
      },
      "ChatboxPlatformSocialCommunicationPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatboxPlatformSocialCommunicationPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationPermission"
          },
          "reason": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationType"
          }
        }
      },
      "ChatboxPlatformSocialCommunicationType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Text",
          "Voice"
        ]
      },
      "ChatboxPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialCrossPlayPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatboxPlatformSocialCrossPlayPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialCrossPlayPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialMultiplayerPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatboxPlatformSocialMultiplayerPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialMultiplayerPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "ChatboxPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialOnlineStatus"
          }
        }
      },
      "ChatboxPlatformSocialTextPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatboxPlatformSocialTextPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialTextPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialUserCommunicationPermission": {
        "type": "object",
        "properties": {
          "crossNetworkFriendsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationPermissionDetails"
            }
          },
          "crossNetworkUsersPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userPermissionsMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialUserCommunicationPermissionsEntry"
            }
          }
        }
      },
      "ChatboxPlatformSocialUserCommunicationPermissionsEntry": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userConsoleId": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformSocialVoicePermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "ChatboxPlatformSocialVoicePermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/ChatboxPlatformSocialVoicePermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "ChatboxPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/ChatboxOnlinePlatform"
          }
        }
      },
      "ChatboxPluginStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "awaitingChatConnection",
          "kAwaitingPermissionsReady",
          "textPermissionUnknown",
          "textPermissionDenied",
          "ready"
        ]
      },
      "ChatboxPresencesChatParty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "max_party_size": {
            "type": "number",
            "format": "int64"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPresencesChatPartyMember"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ChatboxPresencesPartyStatus"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatboxPresencesChatPartyMember": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/ChatboxPresencesPartyMemberRole"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatboxPresencesPartyMemberRole": {
        "type": "string",
        "enum": [
          "mem",
          "ldr"
        ]
      },
      "ChatboxPresencesPartyStatus": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ]
      },
      "ChatboxProductContext": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "ChatboxRiotUser": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/ChatboxOnlinePlatform"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxUIState": {
        "type": "object",
        "properties": {
          "changedSinceHidden": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          }
        }
      },
      "ChatboxUIStateConversation": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "direct_messages": {
            "type": "boolean"
          },
          "global_readership": {
            "type": "boolean"
          },
          "message_history": {
            "type": "boolean"
          },
          "mid": {
            "type": "string"
          },
          "muted": {
            "type": "boolean"
          },
          "mutedRestriction": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/ChatboxMessageType"
          },
          "uiState": {
            "$ref": "#/components/schemas/ChatboxUIState"
          },
          "unread_count": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ChatboxUIStateConversationList": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxUIStateConversation"
            }
          }
        }
      },
      "ChatboxUser": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "number",
            "format": "int64"
          },
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/ChatboxErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ChatboxUserCommunicationPermissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxPlatformSocialCommunicationPermissionDetails"
            }
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ChatboxUserCommunicationPermissionsV2Request": {
        "type": "object",
        "properties": {
          "queryCache": {
            "type": "boolean"
          },
          "riotUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatboxRiotUser"
            }
          }
        }
      },
      "ChatboxUserRelationship": {
        "type": "string",
        "enum": [
          "none",
          "friend",
          "blocked"
        ]
      },
      "ClientConfigBuildInfo": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string"
          },
          "branchFull": {
            "type": "string"
          },
          "codeBuildId": {
            "type": "number",
            "format": "int32"
          },
          "contentBuildId": {
            "type": "number",
            "format": "int32"
          },
          "gameBranch": {
            "type": "string"
          },
          "gameBranchFull": {
            "type": "string"
          },
          "gameDataBuildId": {
            "type": "number",
            "format": "int32"
          },
          "patchline": {
            "type": "string"
          },
          "patchlineVisibleName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ClientConfigClientConfig": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "params": {
            "$ref": "#/components/schemas/ClientConfigConfigParams"
          },
          "updateTime": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ClientConfigConfigNamespaceUpdate": {
        "type": "object",
        "properties": {
          "player": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClientConfigConfigParams": {
        "type": "object",
        "properties": {
          "appName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ClientConfigConfigType"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ClientConfigConfigReadinessEnum": {
        "type": "string",
        "enum": [
          "NotReady",
          "Ready",
          "Disabled",
          "EnvironmentMismatch"
        ]
      },
      "ClientConfigConfigStatus": {
        "type": "object",
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/ClientConfigConfigReadinessEnum"
          },
          "updateId": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ClientConfigConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "ClientConfigConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/ClientConfigConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/ClientConfigConnectivityValue"
          }
        }
      },
      "ClientConfigConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "ClientConfigDataPaths": {
        "type": "object",
        "properties": {
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          },
          "userDataRoot": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorConfigNamespaceUpdate": {
        "type": "object",
        "properties": {
          "player": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClientConfigDepInjectorRiotClientAuthAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorRiotClientAuthAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorRiotClientAuthIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorSession": {
        "type": "object",
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorSessionsUpdate": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClientConfigDepInjectorSession"
            }
          },
          "updateType": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorUpdateType"
          }
        }
      },
      "ClientConfigDepInjectorTokenV2": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/ClientConfigDepInjectorRiotClientAuthAuthorization"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigDepInjectorUpdateType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "ClientConfigRiotClientAuthAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "ClientConfigRiotClientAuthAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/ClientConfigRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/ClientConfigRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "ClientConfigRiotClientAuthIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/ClientConfigRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "ClientConfigRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigSession": {
        "type": "object",
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ClientConfigSessionsUpdate": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClientConfigSession"
            }
          },
          "updateType": {
            "$ref": "#/components/schemas/ClientConfigUpdateType"
          }
        }
      },
      "ClientConfigTokenV2": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/ClientConfigRiotClientAuthAuthorization"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ClientConfigUpdateType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "ClientFeatureFlagsConfigurationSource": {
        "type": "object",
        "properties": {
          "configuredFeatureFlags": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "configuredFeatureFlagsAvailable": {
            "type": "boolean"
          },
          "featureFlags": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "featureFlagsAvailable": {
            "type": "boolean"
          },
          "installSettings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "installSettingsAvailable": {
            "type": "boolean"
          },
          "playerCohorts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "playerCohortsAvailable": {
            "type": "boolean"
          },
          "stickyFlagCohortsActiveAtBoot": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stickyFlagCohortsInactiveAtBoot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFeatureFlagsExperimentCohortPair"
            }
          }
        }
      },
      "ClientFeatureFlagsExperimentCohortPair": {
        "type": "object",
        "properties": {
          "cohort": {
            "type": "string"
          },
          "experiment": {
            "type": "string"
          }
        }
      },
      "ClientFeatureFlagsFeatureFlagConfiguration": {
        "type": "object",
        "properties": {
          "enable_for_cohorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientFeatureFlagsExperimentCohortPair"
            }
          },
          "sticky_at_boot_time": {
            "type": "boolean"
          }
        }
      },
      "CollectorAvailability": {
        "type": "string",
        "enum": [
          "Available",
          "NotAvailable"
        ]
      },
      "CombinedPatchState": {
        "type": "string",
        "enum": [
          "awaiting_headers",
          "unknown",
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "bad_install_path"
        ]
      },
      "CommercePluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "CommercePluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "CommerceV1ContentType": {
        "type": "string",
        "enum": [
          "unknown",
          "none",
          "consumable",
          "durable",
          "game",
          "pass",
          "unmanagedConsumable",
          "movie",
          "app",
          "tvShow"
        ]
      },
      "CommerceV1Image": {
        "type": "object",
        "properties": {
          "caption": {
            "type": "string"
          },
          "format": {
            "$ref": "#/components/schemas/CommerceV1ImageFormat"
          },
          "height": {
            "type": "number",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/CommerceV1ImageType"
          },
          "uri": {
            "type": "string"
          },
          "width": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1ImageFormat": {
        "type": "string",
        "enum": [
          "unknown",
          "gif",
          "jpeg",
          "png",
          "webp"
        ]
      },
      "CommerceV1ImageType": {
        "type": "string",
        "enum": [
          "unknown",
          "psnJacket",
          "psnThumbnail",
          "bivlJacket",
          "bivlThumbnail",
          "xperiaJacket",
          "xperiaThumbnail",
          "tamJacket",
          "tamThumbnail",
          "vitaThumbnail",
          "master",
          "pdpBackground1080",
          "pdpBackground720",
          "pdpForeground",
          "logo",
          "poster"
        ]
      },
      "CommerceV1PlayStationAnnotation": {
        "type": "string",
        "enum": [
          "unknown",
          "none",
          "bluebag",
          "redbag"
        ]
      },
      "CommerceV1PlayStationContentDescriptor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CommerceV1PlayStationContentRating": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "system": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CommerceV1PlayStationProduct": {
        "type": "object",
        "properties": {
          "ageLimit": {
            "type": "number",
            "format": "int32"
          },
          "containerType": {
            "type": "string"
          },
          "contentDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1PlayStationContentDescriptor"
            }
          },
          "contentRating": {
            "$ref": "#/components/schemas/CommerceV1PlayStationContentRating"
          },
          "interactiveElements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rating": {
            "$ref": "#/components/schemas/CommerceV1PlayStationRating"
          },
          "releaseDate": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "CommerceV1PlayStationRating": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "int32"
            }
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1PlayStationSku": {
        "type": "object",
        "properties": {
          "annotationName": {
            "$ref": "#/components/schemas/CommerceV1PlayStationAnnotation"
          },
          "isPlusPrice": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "upsellPrice": {
            "$ref": "#/components/schemas/CommerceV1Price"
          },
          "useLimit": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1Price": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "formattedPrice": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CommerceV1Product": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1Image"
            }
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/CommerceV1PlayStationProduct"
          },
          "riot": {
            "$ref": "#/components/schemas/CommerceV1RiotProduct"
          },
          "skus": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CommerceV1Sku"
            }
          },
          "type": {
            "$ref": "#/components/schemas/CommerceV1ContentType"
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1Video"
            }
          },
          "xbox": {
            "$ref": "#/components/schemas/CommerceV1XboxProduct"
          }
        }
      },
      "CommerceV1PurchaseRequest": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          }
        }
      },
      "CommerceV1PurchaseResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CommerceV1PurchaseStatus"
          }
        }
      },
      "CommerceV1PurchaseStatus": {
        "type": "string",
        "enum": [
          "undefined",
          "cancelled",
          "completed"
        ]
      },
      "CommerceV1RiotProduct": {
        "type": "object",
        "properties": {
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1Sku": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "number",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "isInUserCollection": {
            "type": "boolean"
          },
          "isOnSale": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "originalPrice": {
            "$ref": "#/components/schemas/CommerceV1Price"
          },
          "playStation": {
            "$ref": "#/components/schemas/CommerceV1PlayStationSku"
          },
          "price": {
            "$ref": "#/components/schemas/CommerceV1Price"
          },
          "xbox": {
            "$ref": "#/components/schemas/CommerceV1XboxSku"
          }
        }
      },
      "CommerceV1StoreListing": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/CommerceV1StorePlatform"
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CommerceV1Product"
            }
          }
        }
      },
      "CommerceV1StorePlatform": {
        "type": "string",
        "enum": [
          "unknown",
          "riot",
          "xbox",
          "playstation"
        ]
      },
      "CommerceV1SubscriptionPeriod": {
        "type": "string",
        "enum": [
          "none",
          "minute",
          "hour",
          "day",
          "week",
          "month",
          "year"
        ]
      },
      "CommerceV1Video": {
        "type": "object",
        "properties": {
          "caption": {
            "type": "string"
          },
          "height": {
            "type": "number",
            "format": "int32"
          },
          "previewImage": {
            "$ref": "#/components/schemas/CommerceV1Image"
          },
          "type": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "width": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1XboxAvailability": {
        "type": "object",
        "properties": {
          "availabilityId": {
            "type": "string"
          },
          "endDate": {
            "type": "number",
            "format": "int64"
          },
          "price": {
            "$ref": "#/components/schemas/CommerceV1Price"
          }
        }
      },
      "CommerceV1XboxCollection": {
        "type": "object",
        "properties": {
          "acquiredDate": {
            "type": "number",
            "format": "int64"
          },
          "campaignId": {
            "type": "string"
          },
          "developerOfferId": {
            "type": "string"
          },
          "endDate": {
            "type": "number",
            "format": "int64"
          },
          "isTrial": {
            "type": "boolean"
          },
          "quantity": {
            "type": "number",
            "format": "int32"
          },
          "startDate": {
            "type": "number",
            "format": "int64"
          },
          "trialTimeRemainingInSeconds": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CommerceV1XboxProduct": {
        "type": "object",
        "properties": {
          "hasDigitalDownload": {
            "type": "boolean"
          },
          "isInUserCollection": {
            "type": "boolean"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "linkUri": {
            "type": "string"
          }
        }
      },
      "CommerceV1XboxSku": {
        "type": "object",
        "properties": {
          "availabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1XboxAvailability"
            }
          },
          "bundledSkuIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "collectionData": {
            "$ref": "#/components/schemas/CommerceV1XboxCollection"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1Image"
            }
          },
          "isTrial": {
            "type": "boolean"
          },
          "subscription": {
            "$ref": "#/components/schemas/CommerceV1XboxSubscription"
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceV1Video"
            }
          }
        }
      },
      "CommerceV1XboxSubscription": {
        "type": "object",
        "properties": {
          "billingPeriod": {
            "type": "number",
            "format": "int32"
          },
          "billingPeriodUnit": {
            "$ref": "#/components/schemas/CommerceV1SubscriptionPeriod"
          },
          "hasTrialPeriod": {
            "type": "boolean"
          },
          "price": {
            "$ref": "#/components/schemas/CommerceV1Price"
          },
          "trialPeriod": {
            "type": "number",
            "format": "int32"
          },
          "trialPeriodUnit": {
            "$ref": "#/components/schemas/CommerceV1SubscriptionPeriod"
          }
        }
      },
      "ConfigurationResource": {
        "type": "object",
        "properties": {
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          }
        }
      },
      "ConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "ConnectionInfo": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "port": {
            "type": "number",
            "format": "int32"
          },
          "pid": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "CookieJarCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CreateShortcutsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DataPaths": {
        "type": "object",
        "properties": {
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          },
          "userDataRoot": {
            "type": "string"
          }
        }
      },
      "DataStorePartnerProduct": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executable": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "relative_path": {
            "type": "string"
          }
        }
      },
      "DeleteAccountDeleteAccountFlowStatus": {
        "type": "string",
        "enum": [
          "uninitialized",
          "completed",
          "cancelled",
          "error"
        ]
      },
      "DeleteAccountDeleteAccountV1StatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DeleteAccountDeleteAccountFlowStatus"
          }
        }
      },
      "Dependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "elevate": {
            "type": "boolean"
          }
        }
      },
      "DownloadProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EntitlementsRiotClientAuthAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "EntitlementsRiotClientAuthAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/EntitlementsRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/EntitlementsRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "EntitlementsRiotClientAuthIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/EntitlementsRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "EntitlementsRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "EntitlementsRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "EntitlementsToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "EntitlementsTokenV2": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/EntitlementsRiotClientAuthAuthorization"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ErrorType": {
        "type": "string",
        "enum": [
          "UnexpectedError",
          "AmbassadorError",
          "SGPError",
          "PluginError"
        ]
      },
      "EulaAcceptance": {
        "type": "string",
        "enum": [
          "WaitingForAllServiceData",
          "AcceptanceRequired",
          "Accepted"
        ]
      },
      "EulaAgreement": {
        "type": "object",
        "properties": {
          "acceptance": {
            "$ref": "#/components/schemas/EulaAcceptance"
          },
          "agreementURI": {
            "type": "string"
          },
          "agreementVersion": {
            "type": "string"
          },
          "lastAcceptedTime": {
            "type": "number",
            "format": "int64"
          },
          "lastAcceptedVersion": {
            "type": "string"
          },
          "playerPreferencesKey": {
            "type": "string"
          }
        }
      },
      "EulaAgreementContext": {
        "type": "object",
        "properties": {
          "agreementID": {
            "type": "string"
          },
          "agreementURI": {
            "type": "string"
          },
          "agreementVersion": {
            "type": "string"
          },
          "lastAcceptedTime": {
            "type": "number",
            "format": "int64"
          },
          "lastAcceptedVersion": {
            "type": "string"
          }
        }
      },
      "EulaAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "EulaExternalLegalLinks": {
        "type": "object",
        "properties": {
          "privacyNoticeUrl": {
            "type": "string"
          },
          "termsOfServiceUrl": {
            "type": "string"
          }
        }
      },
      "EulaFinalState": {
        "type": "string",
        "enum": [
          "unknown",
          "stuck",
          "failedIntoTemporaryAcceptance",
          "alreadyAccepted",
          "accepted",
          "rejected",
          "rejectedWithoutReading"
        ]
      },
      "EulaIdToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "EulaPlayerPreferencesResource": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EulaPluginTelemetryContext": {
        "type": "object",
        "properties": {
          "agreementContext": {
            "$ref": "#/components/schemas/EulaAgreementContext"
          },
          "clientLocale": {
            "type": "string"
          },
          "externalLegalLinks": {
            "$ref": "#/components/schemas/EulaExternalLegalLinks"
          },
          "finalState": {
            "$ref": "#/components/schemas/EulaFinalState"
          },
          "privacyPolicyContext": {
            "$ref": "#/components/schemas/EulaPrivacyPolicyContext"
          },
          "productLocale": {
            "type": "string"
          }
        }
      },
      "EulaPrivacyPolicy": {
        "type": "object",
        "properties": {
          "policyContent": {
            "type": "string"
          },
          "policyURI": {
            "type": "string"
          },
          "policyVersion": {
            "type": "string"
          }
        }
      },
      "EulaPrivacyPolicyContext": {
        "type": "object",
        "properties": {
          "policyURI": {
            "type": "string"
          },
          "policyVersion": {
            "type": "string"
          }
        }
      },
      "EulaProductContext": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "EulaRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ExtendedEventData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AnyType"
          },
          "additionalFields": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "ExternalMessageHandlerAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "ExternalMessageHandlerClientProductType": {
        "type": "string",
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ]
      },
      "ExternalMessageHandlerCombinedPatchState": {
        "type": "string",
        "enum": [
          "awaiting_headers",
          "unknown",
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "bad_install_path"
        ]
      },
      "ExternalMessageHandlerConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "ExternalMessageHandlerConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "bundles_url": {
            "type": "string"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerSecondaryPatchline"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerDependency"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerDynamicTags"
            }
          },
          "delete_foreign_paths": {
            "type": "boolean"
          }
        }
      },
      "ExternalMessageHandlerConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "ExternalMessageHandlerDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "elevate": {
            "type": "boolean"
          }
        }
      },
      "ExternalMessageHandlerDependencyState": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatusPhase"
          }
        }
      },
      "ExternalMessageHandlerDynamicTagHeuristics": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExternalMessageHandlerDynamicTags": {
        "type": "object",
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/ExternalMessageHandlerDynamicTagHeuristics"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExternalMessageHandlerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "locked_file_info": {
            "$ref": "#/components/schemas/ExternalMessageHandlerLockedFileInfo"
          }
        }
      },
      "ExternalMessageHandlerInstall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExternalMessageHandlerLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "ExternalMessageHandlerLockedFileInfo": {
        "type": "object",
        "properties": {
          "process_name": {
            "type": "string"
          },
          "process_id": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ExternalMessageHandlerLoginStatus": {
        "type": "string",
        "enum": [
          "Authenticated",
          "NotAuthenticated",
          "AccountNotLinked",
          "MismatchedPuuid",
          "NoXToken",
          "XbgpDisabled"
        ]
      },
      "ExternalMessageHandlerLoginStatusResponse": {
        "type": "object",
        "properties": {
          "xToken": {
            "type": "string"
          },
          "loginToken": {
            "type": "string"
          },
          "xboxAccountPuuid": {
            "type": "string"
          },
          "rsoPuuid": {
            "type": "string"
          },
          "userHash": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalMessageHandlerLoginStatus"
          }
        }
      },
      "ExternalMessageHandlerManifestProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ExternalMessageHandlerMessageBody": {
        "type": "object",
        "properties": {
          "message_id": {
            "$ref": "#/components/schemas/ExternalMessageHandlerMessageId"
          },
          "message_data": {
            "$ref": "#/components/schemas/ExternalMessageHandlerMessageData"
          }
        }
      },
      "ExternalMessageHandlerMessageData": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "patchline_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "x_token": {
            "type": "string"
          },
          "user_hash": {
            "type": "string"
          }
        }
      },
      "ExternalMessageHandlerMessageId": {
        "type": "string",
        "enum": [
          "launch_game",
          "install_game",
          "do_pause_install_game",
          "do_cancel_install_game",
          "do_resume_install_game",
          "on_pause_install_game",
          "on_cancel_install_game",
          "on_resume_install_game",
          "prioritize_install_game",
          "move_install_location",
          "repair_game_install",
          "check_for_game_patch",
          "patch_game",
          "report_game_status",
          "uninstall_game",
          "create_game_shortcut",
          "show_game",
          "shutdown_app_background",
          "shutdown_app_full",
          "game_patch_available",
          "install_status",
          "install_progress",
          "install_error",
          "game_version",
          "game_playable",
          "installed_location",
          "size",
          "installed_date_time",
          "last_played_date_time",
          "trial_info",
          "xbgp_user_sign_in"
        ]
      },
      "ExternalMessageHandlerPatchPhase": {
        "type": "string",
        "enum": [
          "none",
          "manifest",
          "update",
          "repair"
        ]
      },
      "ExternalMessageHandlerPatchRequest": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "patchline_id": {
            "type": "string"
          },
          "patch_type": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPatchType"
          }
        }
      },
      "ExternalMessageHandlerPatchRequestOptions": {
        "type": "object",
        "properties": {
          "createShortcut": {
            "type": "boolean"
          },
          "installPath": {
            "type": "string"
          },
          "isRepair": {
            "type": "boolean"
          }
        }
      },
      "ExternalMessageHandlerPatchStatus": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPatchStatusState"
          },
          "progress": {
            "$ref": "#/components/schemas/ExternalMessageHandlerProgress"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/ExternalMessageHandlerError"
          }
        }
      },
      "ExternalMessageHandlerPatchStatusState": {
        "type": "string",
        "enum": [
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "pending_verify",
          "repairing"
        ]
      },
      "ExternalMessageHandlerPatchType": {
        "type": "string",
        "enum": [
          "install",
          "patch"
        ]
      },
      "ExternalMessageHandlerPatchingResource": {
        "type": "object",
        "properties": {
          "install": {
            "$ref": "#/components/schemas/ExternalMessageHandlerInstall"
          },
          "dependency_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
            }
          },
          "combined_patch_state": {
            "$ref": "#/components/schemas/ExternalMessageHandlerCombinedPatchState"
          },
          "patch_status": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPatchStatus"
          },
          "configuration": {
            "$ref": "#/components/schemas/ExternalMessageHandlerConfigurationResource"
          },
          "patch_requested": {
            "type": "boolean"
          },
          "user_cancelled_patching": {
            "type": "boolean"
          },
          "repair_code": {
            "$ref": "#/components/schemas/ExternalMessageHandlerRepairCode"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ExternalMessageHandlerPatchlineResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "release_id": {
            "type": "string"
          },
          "path_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "theme_manifest": {
            "type": "string"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "patching_policy": {
            "type": "string"
          },
          "auto_patching_enabled_by_player": {
            "type": "boolean"
          },
          "patching_ask_policy": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "configType": {
            "$ref": "#/components/schemas/ExternalMessageHandlerConfigType"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "root_dir": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_full_path": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/AnyType"
          },
          "product_install_move_status": {
            "$ref": "#/components/schemas/AnyType"
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "patch_status_known": {
            "type": "boolean"
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerSecondaryPatchlineResource"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerDependency"
            }
          },
          "dependencyStates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExternalMessageHandlerDependencyState"
            }
          },
          "locale_data": {
            "$ref": "#/components/schemas/ExternalMessageHandlerLocaleDataResource"
          },
          "region_data": {
            "$ref": "#/components/schemas/ExternalMessageHandlerRegionDataResource"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "rogue_process_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/ExternalMessageHandlerConfigurationStatus"
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "restart_required": {
            "type": "boolean"
          },
          "vanguard_dependency": {
            "type": "boolean"
          },
          "should_repair": {
            "type": "boolean"
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/ExternalMessageHandlerProductAlias"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/ExternalMessageHandlerClientProductType"
          }
        }
      },
      "ExternalMessageHandlerPhase": {
        "type": "string",
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ]
      },
      "ExternalMessageHandlerProductAlias": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExternalMessageHandlerProductPatchlineProgress": {
        "type": "object",
        "properties": {
          "launchable": {
            "type": "boolean"
          },
          "overallProgress": {
            "type": "number",
            "format": "double"
          },
          "repairProgress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPatchPhase"
          },
          "totalTimeRemainingMs": {
            "type": "number",
            "format": "int64"
          },
          "currentSpeedMbps": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesDownloaded": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToDownload": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesWritten": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToWrite": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesDone": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToDo": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ExternalMessageHandlerProductPatchlineResourceV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPatchlineResource"
          }
        }
      },
      "ExternalMessageHandlerProductPatchlineStatus": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ExternalMessageHandlerState"
          },
          "previousState": {
            "$ref": "#/components/schemas/ExternalMessageHandlerState"
          },
          "progress": {
            "$ref": "#/components/schemas/ExternalMessageHandlerProductPatchlineProgress"
          }
        }
      },
      "ExternalMessageHandlerProgress": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/ExternalMessageHandlerPhase"
          },
          "manifest": {
            "$ref": "#/components/schemas/ExternalMessageHandlerManifestProgress"
          },
          "update": {
            "$ref": "#/components/schemas/ExternalMessageHandlerUpdateProgress"
          },
          "repair": {
            "$ref": "#/components/schemas/ExternalMessageHandlerRepairProgress"
          }
        }
      },
      "ExternalMessageHandlerRegionDataResource": {
        "type": "object",
        "properties": {
          "available_regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_region": {
            "type": "string"
          }
        }
      },
      "ExternalMessageHandlerRepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ]
      },
      "ExternalMessageHandlerRepairProgress": {
        "type": "object",
        "properties": {
          "repaired_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_repair": {
            "type": "number",
            "format": "int64"
          },
          "repaired_files": {
            "type": "number",
            "format": "int64"
          },
          "files_to_repair": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ExternalMessageHandlerSecondaryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalMessageHandlerDynamicTags"
            }
          }
        }
      },
      "ExternalMessageHandlerSecondaryPatchlineResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "relativePath": {
            "type": "string"
          }
        }
      },
      "ExternalMessageHandlerState": {
        "type": "string",
        "enum": [
          "Unknown",
          "NotInstalled",
          "UpToDate",
          "OutOfDate",
          "Updating",
          "NeedsRepair",
          "Repairing",
          "StatusError",
          "CheckingForUpdate",
          "DependencyUpdate",
          "Paused"
        ]
      },
      "ExternalMessageHandlerUpdateProgress": {
        "type": "object",
        "properties": {
          "read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_read": {
            "type": "number",
            "format": "int64"
          },
          "written_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_write": {
            "type": "number",
            "format": "int64"
          },
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "FacebookAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "FacebookAccountAuthorizationClassicLogin": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "facebook_app_id": {
            "type": "string"
          }
        }
      },
      "FacebookAccountFacebookAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "fbsdk_login_error_password_changed",
          "fbsdk_login_error_user_checkpointed",
          "fbsdk_login_error_user_mismatch",
          "fbsdk_login_error_unconfirmed_user",
          "fbsdk_login_error_system_account_app_disabled",
          "fbsdk_login_error_system_account_unavailable",
          "fbsdk_login_error_bad_challenge_string",
          "fbsdk_login_error_invalid_id_token",
          "fbsdk_login_error_missing_access_token",
          "fbsdk_login_error_unknown",
          "fbsdk_init_error",
          "unknown_java_error",
          "unknown"
        ]
      },
      "FacebookAccountFacebookAuthorizationParameters": {
        "type": "object",
        "properties": {
          "force_use_classic_mode": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FacebookAccountFacebookAuthorizationResponse": {
        "type": "object",
        "properties": {
          "classic_login": {
            "$ref": "#/components/schemas/FacebookAccountAuthorizationClassicLogin"
          },
          "error": {
            "$ref": "#/components/schemas/FacebookAccountFacebookAuthorizationError"
          },
          "id_token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FacebookAccountFacebookAuthorizationResponseType"
          }
        }
      },
      "FacebookAccountFacebookAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "id_token",
          "classic_login"
        ]
      },
      "FacebookAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacebookAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "FacebookAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "FacebookAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "FacebookAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "FacebookAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/FacebookAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/FacebookAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentConsoleEntitlementsCachingFailure": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "failureCode": {
            "type": "string"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason": {
        "type": "string",
        "enum": [
          "gameLaunched",
          "gameReturnedToForeground",
          "purchaseCompleted",
          "other"
        ]
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentRequest": {
        "type": "object",
        "properties": {
          "firstPartyAuthToken": {
            "type": "string"
          },
          "fulfillmentId": {
            "type": "string"
          },
          "fulfillmentReason": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentResponse": {
        "type": "object",
        "properties": {
          "fulfilledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo"
            }
          },
          "fulfillmentRequired": {
            "type": "boolean"
          },
          "unfulfilledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentFailureInfo"
            }
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentFailureInfo": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "int64"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentItemFulfillmentSuccessInfo": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentMockApiState": {
        "type": "string",
        "enum": [
          "NoMock",
          "PluginNotReady",
          "NoFulfillmentRequired",
          "NoFulfillmentRequiredForNonConsumables",
          "FirstPartyQueryConsumableFailed",
          "FirstPartyQueryNonConsumableFailed",
          "FirstPartyAuthorizationFailed",
          "FirstPartyQueryByRiotPayFailed",
          "RiotPayFulfillmentFailed",
          "PartialFulfillmentCompleted",
          "FulfillmentEmpty",
          "SuccessConsumable",
          "SuccessNonConsumable"
        ]
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayFulfillmentResponse": {
        "type": "object",
        "properties": {
          "failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentFailureInfo"
            }
          },
          "fulfilled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentSuccessInfo"
            }
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayGetAccessTokensResponse": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string"
          },
          "refundToken": {
            "type": "string"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentFailureInfo": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentRiotPayItemFulfillmentSuccessInfo": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryContext": {
        "type": "object",
        "properties": {
          "errorDescription": {
            "type": "string"
          },
          "failureOnFetchingDataFromCache": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentConsoleEntitlementsCachingFailure"
          },
          "failureOnPuttingDataInCache": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentConsoleEntitlementsCachingFailure"
          },
          "fulfillmentExpected": {
            "type": "boolean"
          },
          "fulfillmentId": {
            "type": "string"
          },
          "fulfillmentReason": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentFulfillmentReason"
          },
          "fulfillmentResult": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult"
          },
          "funnelName": {
            "type": "string"
          },
          "itemId": {
            "type": "string"
          },
          "itemQuantity": {
            "type": "number",
            "format": "int64"
          },
          "itemResult": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult"
          }
        }
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentItemResult": {
        "type": "string",
        "enum": [
          "unassigned",
          "success",
          "failure"
        ]
      },
      "FirstPartyFulfillmentFirstPartyFulfillmentTelemetryFulfillmentResult": {
        "type": "string",
        "enum": [
          "unassigned",
          "success",
          "partialSuccess",
          "noContent",
          "fulfillmentFailure",
          "failure"
        ]
      },
      "FirstPartyFulfillmentOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "FirstPartyFulfillmentPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/FirstPartyFulfillmentOnlinePlatform"
          }
        }
      },
      "FoundationEventType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "GaRestrictionAuthorization": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "GaRestrictionCachedPenaltyNotificationDtoV1": {
        "type": "object",
        "properties": {
          "isDeleted": {
            "type": "boolean"
          },
          "isUnread": {
            "type": "boolean"
          },
          "penaltyNotification": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationDtoV1"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTextChatLogEvidenceV1"
          }
        }
      },
      "GaRestrictionCachedPenaltyNotificationDtoV2": {
        "type": "object",
        "properties": {
          "isDeleted": {
            "type": "boolean"
          },
          "isUnread": {
            "type": "boolean"
          },
          "penaltyNotification": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationDtoV2"
          },
          "transgressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTransgressionV2"
            }
          }
        }
      },
      "GaRestrictionGapsMailboxUpdated": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "GaRestrictionLocalizedPenaltyNotification": {
        "type": "object",
        "properties": {
          "acknowledgeText": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "matchHistoryHeader": {
            "type": "string"
          },
          "matchHistoryLinkText": {
            "type": "string"
          },
          "penalties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "penaltyHeader": {
            "type": "string"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "GaRestrictionLocalizedPenaltyNotificationChatLogEvidenceV1": {
        "type": "object",
        "properties": {
          "chatLogLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "header": {
            "type": "string"
          }
        }
      },
      "GaRestrictionLocalizedPenaltyNotificationV2": {
        "type": "object",
        "properties": {
          "acknowledgeText": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "chatLogEvidenceHeader": {
            "type": "string"
          },
          "matchHistoryHeader": {
            "type": "string"
          },
          "matchHistoryLinkText": {
            "type": "string"
          },
          "penalties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "penaltyHeader": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "transgressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTransgressionV2"
            }
          }
        }
      },
      "GaRestrictionMail": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "int64"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/GaRestrictionMailType"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaRestrictionMailState"
          }
        }
      },
      "GaRestrictionMailState": {
        "type": "string",
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ]
      },
      "GaRestrictionMailType": {
        "type": "string",
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ]
      },
      "GaRestrictionMailboxStatusUpdated": {
        "type": "object",
        "properties": {
          "lastUpdateReceived": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GaRestrictionPenaltyNotification": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationData"
          },
          "isUnread": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "localizedTexts": {
            "$ref": "#/components/schemas/GaRestrictionLocalizedPenaltyNotification"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationData": {
        "type": "object",
        "properties": {
          "matchId": {
            "type": "string"
          },
          "penalties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV1"
            }
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "textChatLogEvidenceV1": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTextChatLogEvidenceV1"
          },
          "transgressionCategory": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationDataV2": {
        "type": "object",
        "properties": {
          "penalties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV2"
            }
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationDtoV1": {
        "type": "object",
        "properties": {
          "evidence": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationEvidenceDtoV1"
          },
          "matchId": {
            "type": "string"
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "vendedPenalties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV1"
            }
          }
        }
      },
      "GaRestrictionPenaltyNotificationDtoV2": {
        "type": "object",
        "properties": {
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "transgressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionTransgressionV2"
            }
          },
          "vendedPenalties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationVendedPenaltyDtoV2"
            }
          }
        }
      },
      "GaRestrictionPenaltyNotificationEvidenceDtoV1": {
        "type": "object",
        "properties": {
          "evidenceText": {
            "type": "string"
          },
          "evidenceType": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationPlayerAction": {
        "type": "string",
        "enum": [
          "RECEIVED_NEW",
          "RECEIVED_OLD",
          "ACKNOWLEDGED",
          "DELETED"
        ]
      },
      "GaRestrictionPenaltyNotificationPlayerActionEvent": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationPlayerAction"
          },
          "messageId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "penaltyNotificationDescriptionKey": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationTextChatLogEvidenceV1": {
        "type": "object",
        "properties": {
          "chatLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GaRestrictionPenaltyNotificationTransgressionV2": {
        "type": "object",
        "properties": {
          "matchId": {
            "type": "string"
          },
          "textChatLogEvidence": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationTextChatLogEvidenceV1"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "transgressionId": {
            "type": "string"
          },
          "transgressionTimestamp": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GaRestrictionPenaltyNotificationV2": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationDataV2"
          },
          "isUnread": {
            "type": "boolean"
          },
          "locale": {
            "type": "string"
          },
          "localizedTexts": {
            "$ref": "#/components/schemas/GaRestrictionLocalizedPenaltyNotificationV2"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPenaltyNotificationVendedPenaltyDtoV1": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isPermanent": {
            "type": "boolean"
          },
          "penaltyDurationMillis": {
            "type": "number",
            "format": "int64"
          },
          "penaltyTimestamp": {
            "type": "number",
            "format": "int64"
          },
          "penaltyType": {
            "type": "string"
          },
          "redemptionsRequired": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionRedemptionRequiredDtoV1"
            }
          }
        }
      },
      "GaRestrictionPenaltyNotificationVendedPenaltyDtoV2": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isPermanent": {
            "type": "boolean"
          },
          "penaltyDurationMillis": {
            "type": "number",
            "format": "int64"
          },
          "penaltyTimestamp": {
            "type": "number",
            "format": "int64"
          },
          "penaltyType": {
            "type": "string"
          },
          "redemptionsRequired": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionRedemptionRequiredDtoV1"
            }
          }
        }
      },
      "GaRestrictionPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "GaRestrictionPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "GaRestrictionRedemptionRequiredDtoV1": {
        "type": "object",
        "properties": {
          "redemptionCountRequired": {
            "type": "number",
            "format": "int32"
          },
          "redemptionEventType": {
            "type": "string"
          }
        }
      },
      "GaRestrictionRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "GaRestrictionRequestMailParameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "format": "int64"
          },
          "includedStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaRestrictionMailState"
            }
          },
          "startIndex": {
            "type": "number",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GaRestrictionTransgressionV2": {
        "type": "object",
        "properties": {
          "evidence": {
            "$ref": "#/components/schemas/GaRestrictionPenaltyNotificationEvidenceDtoV1"
          },
          "matchId": {
            "type": "string"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "transgressionId": {
            "type": "string"
          },
          "transgressionTimestamp": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GaRestrictionUpdateMailStateRequest": {
        "type": "object",
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaRestrictionMailState"
          }
        }
      },
      "GaWarningApiAuthorization": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "GaWarningGapsMailboxUpdated": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "GaWarningLocalizedWarningMessage": {
        "type": "object",
        "properties": {
          "acknowledgeText": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "seeMoreLabel": {
            "type": "string"
          },
          "seeMoreUrl": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "GaWarningMail": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "int64"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/GaWarningMailType"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaWarningMailState"
          }
        }
      },
      "GaWarningMailState": {
        "type": "string",
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ]
      },
      "GaWarningMailType": {
        "type": "string",
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ]
      },
      "GaWarningMailboxStatusUpdated": {
        "type": "object",
        "properties": {
          "lastUpdateReceived": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GaWarningPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "GaWarningPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "GaWarningRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "GaWarningRequestMailParameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "format": "int64"
          },
          "includedStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GaWarningMailState"
            }
          },
          "startIndex": {
            "type": "number",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GaWarningUpdateMailStateRequest": {
        "type": "object",
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GaWarningMailState"
          }
        }
      },
      "GaWarningWarning": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "GaWarningWarningAcknowledgementEvent": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "warningId": {
            "type": "string"
          }
        }
      },
      "GaWarningWarningDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "GaWarningWarningFoundUnacknowledgedEvent": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "transgressionCategory": {
            "type": "string"
          },
          "warningId": {
            "type": "string"
          }
        }
      },
      "GaWarningWarningResponse": {
        "type": "object",
        "properties": {
          "gaWarningMessages": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GaWarningLocalizedWarningMessage"
            }
          }
        }
      },
      "GameSessionAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "GameSessionAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionAuthHintType"
          }
        }
      },
      "GameSessionAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "GameSessionAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "GameSessionAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "GameSessionAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "GameSessionAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "GameSessionAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GameSessionAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "GameSessionAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "GameSessionAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/GameSessionImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionAuthorizationResponseType"
          }
        }
      },
      "GameSessionAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/GameSessionTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/GameSessionAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/GameSessionTokenContext"
          }
        }
      },
      "GameSessionAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "GameSessionAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "GameSessionBypassQueueRequest": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "GameSessionClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "GameSessionClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/GameSessionAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/GameSessionAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/GameSessionClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/GameSessionRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GameSessionClientConfigCluster": {
        "type": "object",
        "properties": {
          "bypass": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        }
      },
      "GameSessionConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionLoginAMR"
            }
          }
        }
      },
      "GameSessionConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "GameSessionConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "GameSessionConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "GameSessionConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/GameSessionConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "GameSessionCreateSessionRequest": {
        "type": "object",
        "properties": {
          "bypass": {
            "type": "boolean"
          },
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "sessionUri": {
            "type": "string"
          }
        }
      },
      "GameSessionDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "GameSessionEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "GameSessionGameSessionServiceCreateSessionRequestBody": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "GameSessionGameSessionV1ClusterList": {
        "type": "object",
        "properties": {
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GameSessionGameSessionV1GameSessionId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "GameSessionGameSessionV1GameSessionMessage": {
        "type": "string",
        "enum": [
          "no_error",
          "player_banned",
          "account_restricted",
          "account_locked",
          "queue_busy",
          "bad_entity_parameter",
          "missing_entitlements",
          "bad_authorization_param",
          "service_create_session_failure",
          "service_refresh_session_failure",
          "service_delete_session_failure",
          "internal",
          "unknown"
        ]
      },
      "GameSessionGameSessionV1GameSessionRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "clientName": {
            "type": "string"
          },
          "cluster": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "rsoClientId": {
            "type": "string"
          },
          "shouldAttemptQueueBypass": {
            "type": "boolean"
          },
          "shouldFetchSessionToken": {
            "type": "boolean"
          }
        }
      },
      "GameSessionGameSessionV1GameSessionResponse": {
        "type": "object",
        "properties": {
          "bypassQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "bypassQueueToken": {
            "type": "string"
          },
          "errorId": {
            "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionMessage"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "loginQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "loginQueueToken": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "queueIsOpen": {
            "type": "boolean"
          },
          "queuePosition": {
            "type": "number",
            "format": "int64"
          },
          "sessionClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "sessionToken": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/GameSessionGameSessionV1GameSessionState"
          },
          "waitTime": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GameSessionGameSessionV1GameSessionState": {
        "type": "string",
        "enum": [
          "initializing",
          "fetching_bypass",
          "joining_queue",
          "in_queue",
          "login_created",
          "creating_session",
          "connected",
          "deleting_session",
          "deleting_session_taken_over",
          "failed"
        ]
      },
      "GameSessionGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "GameSessionHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "GameSessionHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "GameSessionHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionHttpCookie"
            }
          }
        }
      },
      "GameSessionIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/GameSessionAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/GameSessionIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "GameSessionImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/GameSessionClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameSessionTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/GameSessionSessionResponse"
          }
        }
      },
      "GameSessionLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "GameSessionLoginQueueServiceLoginQueueRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionLoginQueueServiceLoginQueueTokenType"
          }
        }
      },
      "GameSessionLoginQueueServiceLoginQueueRequestBody": {
        "type": "object",
        "properties": {
          "bypassToken": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "entitlements": {
            "type": "string"
          },
          "queueToken": {
            "type": "string"
          },
          "userinfo": {
            "type": "string"
          }
        }
      },
      "GameSessionLoginQueueServiceLoginQueueTokenType": {
        "type": "string",
        "enum": [
          "LOGIN",
          "QUEUE",
          "UNKNOWN"
        ]
      },
      "GameSessionLoginQueueServiceQueueToken": {
        "type": "object",
        "properties": {
          "exp": {
            "type": "number",
            "format": "int64"
          },
          "full": {
            "type": "boolean"
          },
          "iat": {
            "type": "number",
            "format": "int64"
          },
          "queuePos": {
            "type": "number",
            "format": "int32"
          },
          "retryAfter": {
            "type": "number",
            "format": "int32"
          },
          "waitTime": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "GameSessionLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GameSessionLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "GameSessionMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "GameSessionMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "GameSessionMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "GameSessionMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/GameSessionMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "GameSessionMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "GameSessionPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/GameSessionGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/GameSessionGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/GameSessionGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/GameSessionMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/GameSessionMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/GameSessionTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/GameSessionWeGamePartnerCredentials"
          }
        }
      },
      "GameSessionPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/GameSessionGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/GameSessionGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/GameSessionGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/GameSessionMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/GameSessionTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/GameSessionWeGamePartnerCredentials"
          }
        }
      },
      "GameSessionPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "GameSessionPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "GameSessionPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/GameSessionImplicitGrantModeTelemetryContext"
          }
        }
      },
      "GameSessionRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "GameSessionRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/GameSessionTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/GameSessionTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/GameSessionTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "GameSessionRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GameSessionRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GameSessionRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "GameSessionRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "GameSessionSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "GameSessionSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "GameSessionSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "GameSessionSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "GameSessionSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/GameSessionAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/GameSessionMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GameSessionSessionResponseType"
          }
        }
      },
      "GameSessionSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "GameSessionSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "GameSessionStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GameSessionTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "GameSessionTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "GameSessionTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "GameSessionUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "GameSessionWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "GamecenterAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "GamecenterAccountGameCenterAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown"
        ]
      },
      "GamecenterAccountGameCenterAuthorizationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/GamecenterAccountGameCenterAuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/GamecenterAccountGameCenterToken"
          },
          "type": {
            "$ref": "#/components/schemas/GamecenterAccountGameCenterAuthorizationResponseType"
          }
        }
      },
      "GamecenterAccountGameCenterAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "success"
        ]
      },
      "GamecenterAccountGameCenterToken": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "GoogleAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "GoogleAccountGoogleAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown",
          "sign_in_currently_in_progress",
          "sign_in_failed",
          "developer_error",
          "internal_error",
          "network_error",
          "invalid_account",
          "missing_result",
          "missing_code",
          "aswebauthentication_session_presentation_context_invalid",
          "aswebauthentication_session_presentation_context_not_provided",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "unknown_aswebauthentication_session_error",
          "unknown_sfauthentication_session_error",
          "unknown_java_error"
        ]
      },
      "GoogleAccountGoogleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "googleClientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GoogleAccountGoogleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/GoogleAccountGoogleAuthorizationError"
          },
          "idToken": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/GoogleAccountGoogleAuthorizationResponseType"
          }
        }
      },
      "GoogleAccountGoogleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "cancelled",
          "error",
          "token",
          "code"
        ]
      },
      "GoogleAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "GoogleAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "GoogleAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "GoogleAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "GoogleAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/GoogleAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/GoogleAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "HomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          },
          "cached_home_base_country": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorAccessToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "InfoRadiatorAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorBuildInfo": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorPatchlineMetadata": {
        "type": "object",
        "properties": {
          "config_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorSession": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/InfoRadiatorAuthenticationTypeEnum"
          },
          "error": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorSessionStartEvent": {
        "type": "object",
        "properties": {
          "authState": {
            "$ref": "#/components/schemas/InfoRadiatorSessionStartEvent_AuthState"
          },
          "eventTrigger": {
            "$ref": "#/components/schemas/InfoRadiatorSessionStartEvent_EventTrigger"
          }
        }
      },
      "InfoRadiatorSessionStartEvent_AuthState": {
        "type": "string",
        "enum": [
          "Unauthenticated",
          "Authenticated"
        ]
      },
      "InfoRadiatorSessionStartEvent_EventTrigger": {
        "type": "string",
        "enum": [
          "DelayTimeout",
          "FirstAuthentication",
          "SubsequentAuthentication"
        ]
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics": {
        "type": "object",
        "properties": {
          "productsUsingVoice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData"
            }
          },
          "providerData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData"
            }
          }
        }
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProductData": {
        "type": "object",
        "properties": {
          "channelsInUse": {
            "type": "number",
            "format": "int32"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "InfoRadiatorVoiceChatHeartbeatMetrics_PerProviderData": {
        "type": "object",
        "properties": {
          "isLoggedIn": {
            "type": "boolean"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "Install": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InstallProgress": {
        "type": "object",
        "properties": {}
      },
      "InstalledDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IntegrationTestRequestMethod": {
        "type": "string",
        "enum": [
          "GET",
          "POST"
        ]
      },
      "IntegrationTestV1ExternalRequest": {
        "type": "object",
        "properties": {
          "attemptCount": {
            "type": "number",
            "format": "int32"
          },
          "connectTimeout": {
            "type": "number",
            "format": "int32"
          },
          "forceNoRetry": {
            "type": "boolean"
          },
          "maxRetryDelay": {
            "type": "number",
            "format": "int32"
          },
          "minRetryDelay": {
            "type": "number",
            "format": "int32"
          },
          "numberOfRequestsToSendForTesting": {
            "type": "number",
            "format": "int32"
          },
          "requestBody": {
            "type": "string"
          },
          "requestMethod": {
            "$ref": "#/components/schemas/IntegrationTestRequestMethod"
          },
          "requestTimeout": {
            "type": "number",
            "format": "int32"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "IntegrationTestV1ExternalResponse": {
        "type": "object",
        "properties": {
          "connectSuccess": {
            "type": "boolean"
          },
          "fullRequestDurationMs": {
            "type": "number",
            "format": "int32"
          },
          "httpRequestAttempts": {
            "type": "number",
            "format": "int32"
          },
          "requestSuccess": {
            "type": "boolean"
          },
          "responseBody": {
            "type": "string"
          },
          "responseHttpCode": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "JwtAuthenticatorHeaders": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "JwtAuthenticatorJWTIssueResource": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "JwtAuthenticatorJWTVerifyResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "KrAccountAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "KrAccountAccountPromotionSession": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "KrAccountKrAccountApiSession": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string"
          }
        }
      },
      "KrAccountKrAccountPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "krAccountPromotionUrl": {
            "type": "string"
          },
          "krAccountServiceUrl": {
            "type": "string"
          }
        }
      },
      "LaunchConfiguration": {
        "type": "object",
        "properties": {
          "executable": {
            "type": "string"
          },
          "workingDirectory": {
            "type": "string"
          }
        }
      },
      "LaunchRestrictionLaunchRestrictions": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/LaunchRestrictionrestrictionData"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "LaunchRestrictionReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "LaunchRestrictionRestrictions": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/LaunchRestrictionrestrictionData"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "LaunchRestrictionrestrictionData": {
        "type": "object",
        "properties": {
          "expirationMillis": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "LeagueRegionElectionResource": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "regionAssignmentResponseMessage": {
            "type": "string"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LifecycleStateAppRepairBinding": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/LifecycleStateAppRepairBindingState"
          }
        }
      },
      "LifecycleStateAppRepairBindingState": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/AppRepairApplyRequest"
          }
        }
      },
      "LifecycleStateHomeBaseCountry": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/HomeBaseCountry"
          }
        }
      },
      "LogSeverityLevels": {
        "type": "string",
        "enum": [
          "Okay",
          "Warning",
          "Error",
          "Always"
        ]
      },
      "LoginPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ]
      },
      "LoginStatus": {
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/LoginPhase"
          }
        }
      },
      "LoginStatusPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ]
      },
      "LolInfo": {
        "type": "object",
        "properties": {
          "cpid": {
            "type": "string"
          },
          "ploc": {
            "type": "string"
          }
        }
      },
      "LoyaltyV2ExternalProcess": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "LoyaltyV2LoyaltyConfig": {
        "type": "object",
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "gameShard": {
            "type": "string"
          },
          "heartbeatInterval": {
            "type": "number",
            "format": "double"
          },
          "webRequestInitialRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestMaxRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestRetryCount": {
            "type": "number",
            "format": "int64"
          },
          "webRequestTimeoutInSec": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "LoyaltyV2LoyaltyStandaloneConfig": {
        "type": "object",
        "properties": {
          "backendUrl": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "heartbeatInterval": {
            "type": "number",
            "format": "double"
          },
          "webRequestInitialRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestMaxRetryDelayInMilliSec": {
            "type": "number",
            "format": "int64"
          },
          "webRequestRetryCount": {
            "type": "number",
            "format": "int64"
          },
          "webRequestTimeoutInSec": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "LoyaltyV2PCBangInfo": {
        "type": "object",
        "properties": {
          "pcbId": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "LoyaltyV2Session": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "serviceState": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "MailboxAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxAffinityV1AffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "MailboxAffinityV2AffinityProductInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "MailboxAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "MailboxApiAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "MailboxApiAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthAccessToken"
          },
          "authenticationType": {
            "type": "string"
          },
          "claims": {
            "$ref": "#/components/schemas/MailboxApiIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "MailboxApiClientDetails": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        }
      },
      "MailboxApiHomeBaseCountry": {
        "type": "object",
        "properties": {
          "cached_home_base_country": {
            "type": "string"
          },
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "MailboxApiIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxApiAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "MailboxApiLoginCountry": {
        "type": "object",
        "properties": {
          "login_country": {
            "type": "string"
          }
        }
      },
      "MailboxApiUserInfo": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxApiAlias"
          },
          "country": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "lol": {
            "$ref": "#/components/schemas/MailboxApiUserInfoLol"
          },
          "lol_account": {
            "$ref": "#/components/schemas/MailboxApiUserInfoSummoner"
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "player_plocale": {
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          }
        }
      },
      "MailboxApiUserInfoLol": {
        "type": "object",
        "properties": {
          "cpid": {
            "type": "string"
          },
          "ploc": {
            "type": "string"
          }
        }
      },
      "MailboxApiUserInfoSummoner": {
        "type": "object",
        "properties": {
          "summoner_name": {
            "type": "string"
          }
        }
      },
      "MailboxAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxAccessToken"
          },
          "claims": {
            "$ref": "#/components/schemas/MailboxIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "MailboxGapsMailboxUpdated": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "MailboxIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/MailboxAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "MailboxIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxMail": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "int64"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/MailboxMailType"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/MailboxMailState"
          }
        }
      },
      "MailboxMailState": {
        "type": "string",
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ]
      },
      "MailboxMailType": {
        "type": "string",
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ]
      },
      "MailboxMailboxStatusUpdated": {
        "type": "object",
        "properties": {
          "lastUpdateReceived": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "MailboxPlayerAffinityCachedProductAffinity": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "product": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityCachedServiceAffinity": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityDataSource": {
        "type": "string",
        "enum": [
          "localCache",
          "serverAuthoritative"
        ]
      },
      "MailboxPlayerAffinityPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAffinityServiceUrl": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityPluginStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "MailboxPlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityServiceToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityShardInfo": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "shard": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/MailboxPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxPlayerAffinityTokenProduct": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/MailboxPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "MailboxPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "MailboxProductAffinityInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "MailboxRequestMailParameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "format": "int64"
          },
          "includedStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailboxMailState"
            }
          },
          "startIndex": {
            "type": "number",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MailboxRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxRsoAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailboxRsoAuthAuthorizationTrustLevel"
            }
          }
        }
      },
      "MailboxRsoAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/MailboxRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/MailboxRsoAuthAuthorizationResponseType"
          }
        }
      },
      "MailboxRsoAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "MailboxRsoAuthAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "MailboxRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MailboxRsoAuthImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/MailboxRsoAuthIdToken"
          }
        }
      },
      "MailboxRsoAuthReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "MailboxRsoAuthUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "MailboxServiceAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "MailboxUpdateMailStateRequest": {
        "type": "object",
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/MailboxMailState"
          }
        }
      },
      "MiddlewareManagerPhase": {
        "type": "string",
        "enum": [
          "NotStarted",
          "InProgress",
          "Done"
        ]
      },
      "MiddlewareManagerState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "int32"
          },
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "middlewareManagerPhase": {
            "$ref": "#/components/schemas/MiddlewareManagerPhase"
          },
          "activeMiddleware": {
            "type": "string"
          }
        }
      },
      "MobileProductRegistryAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "MobileProductRegistryConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "MobileProductRegistryGameVersion": {
        "type": "object",
        "properties": {
          "build": {
            "type": "number",
            "format": "int64"
          },
          "isGameObsolete": {
            "type": "boolean"
          }
        }
      },
      "MobileProductRegistryPatchlineMetadata": {
        "type": "object",
        "properties": {
          "config_type": {
            "$ref": "#/components/schemas/MobileProductRegistryConfigType"
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "supported_versions": {
            "type": "string"
          }
        }
      },
      "MobileProductRegistrySession": {
        "type": "object",
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "MobilePushMobilePushCreateFilter": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "terms": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "MobilePushMobilePushRegisterPush": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "deviceToken": {
            "type": "string"
          }
        }
      },
      "MobilePushMobilePushServicePayload": {
        "type": "object",
        "properties": {
          "device_token": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "MobilePushMobilePushSubscribeToTopic": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string"
          }
        }
      },
      "MobilePushRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "NetworkConnectivityConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/NetworkConnectivityConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/NetworkConnectivityConnectivityValue"
          }
        }
      },
      "NetworkConnectivityConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "NetworkConnectivityPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "NetworkConnectivityPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "NintendoAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "NintendoAccountAuthorization": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        }
      },
      "NintendoAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "NintendoAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/NintendoAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/NintendoAccountErrorCode"
          }
        }
      },
      "NintendoAccountErrorCode": {
        "type": "string",
        "enum": [
          "user_canceled_authotization",
          "user_canceled_login"
        ]
      },
      "NintendoAccountGetNetworkServiceAccountParameters": {
        "type": "object",
        "properties": {
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "NintendoAccountNetworkServiceAccount": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "NintendoAccountNetworkServiceAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/NintendoAccountNetworkServiceAccount"
          },
          "error_code": {
            "$ref": "#/components/schemas/NintendoAccountErrorCode"
          }
        }
      },
      "NintendoAccountOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "NintendoAccountPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/NintendoAccountOnlinePlatform"
          }
        }
      },
      "NintendoAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NintendoAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "NintendoAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "NintendoAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "NintendoAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "NintendoAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/NintendoAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/NintendoAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "NintendoAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "UserCanceledAuthorization",
          "UserCanceledLogIn",
          "EmptyResponse",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "NintendoAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "NintendoAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/NintendoAccountV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/NintendoAccountV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/NintendoAccountV2AuthorizationResponseType"
          }
        }
      },
      "NintendoAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "NintendoAccountV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        }
      },
      "OktaAccountOktaAuthorizationError": {
        "type": "string",
        "enum": [
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "OktaAccountOktaAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "OktaAccountOktaAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/OktaAccountOktaAuthorizationError"
          },
          "type": {
            "$ref": "#/components/schemas/OktaAccountOktaAuthorizationResponseType"
          }
        }
      },
      "OktaAccountOktaAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "code_exchange"
        ]
      },
      "OktaAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OktaAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "OktaAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "OktaAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "OktaAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox",
          "okta"
        ]
      },
      "OktaAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/OktaAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/OktaAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "OnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PatchConfiguration": {
        "type": "object",
        "properties": {
          "cache_path": {
            "type": "string"
          },
          "cache_size": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchCookie": {
        "type": "object",
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "PatchCookies": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchCookie"
            }
          },
          "expires_in": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PatchEntitlementsToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PatchError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PatchErrorCode"
          },
          "locked_file_info": {
            "$ref": "#/components/schemas/PatchLockedFileInfo"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PatchErrorCode": {
        "type": "string",
        "enum": [
          "OK",
          "Unspecified",
          "Cancelled",
          "NotEnoughDiskSpace",
          "AccessDenied",
          "FileNotFound",
          "DownloaderConnection",
          "DownloaderClientError",
          "DownloaderServerError",
          "DownloaderAuthorization",
          "DownloadedCorruptData",
          "CorruptData",
          "AddressResolutionFailed",
          "FileLocked",
          "InvalidArgument"
        ]
      },
      "PatchInstall": {
        "type": "object",
        "properties": {
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "ipv4_only": {
            "type": "boolean"
          },
          "metadata_path": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "requests": {
            "$ref": "#/components/schemas/PatchRequests"
          },
          "seed_path": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PatchStatus"
          }
        }
      },
      "PatchInstallParams": {
        "type": "object",
        "properties": {
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ipv4_only": {
            "type": "boolean"
          },
          "metadata_path": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "seed_path": {
            "type": "string"
          }
        }
      },
      "PatchLockedFileInfo": {
        "type": "object",
        "properties": {
          "process_id": {
            "type": "number",
            "format": "int64"
          },
          "process_name": {
            "type": "string"
          }
        }
      },
      "PatchManifestProgress": {
        "type": "object",
        "properties": {
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          },
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchPatchRequest": {
        "type": "object",
        "properties": {
          "allowedHttpFallbackHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundlesUrl": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "max_download_speed": {
            "type": "number",
            "format": "int32"
          },
          "repair": {
            "type": "boolean"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temp_path": {
            "type": "string"
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchPatchStatus": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError"
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProgress"
          },
          "state": {
            "$ref": "#/components/schemas/PatchPatchStatusState"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchPatchStatusState": {
        "type": "string",
        "enum": [
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "pending_verify",
          "repairing"
        ]
      },
      "PatchPhase": {
        "type": "string",
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ]
      },
      "PatchPreviewDiff": {
        "type": "object",
        "properties": {
          "cache_read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "cache_write_bytes": {
            "type": "number",
            "format": "int64"
          },
          "disk_read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "disk_size_diff": {
            "type": "number",
            "format": "int64"
          },
          "disk_write_bytes": {
            "type": "number",
            "format": "int64"
          },
          "network_bytes_compressed": {
            "type": "number",
            "format": "int64"
          },
          "new_bytes": {
            "type": "number",
            "format": "int64"
          },
          "out_of_date": {
            "type": "boolean"
          }
        }
      },
      "PatchPreviewRequest": {
        "type": "object",
        "properties": {
          "fast": {
            "type": "boolean"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchPreviewStatus": {
        "type": "object",
        "properties": {
          "diff": {
            "$ref": "#/components/schemas/PatchPreviewDiff"
          },
          "error": {
            "$ref": "#/components/schemas/PatchError"
          },
          "state": {
            "$ref": "#/components/schemas/PatchPreviewStatusState"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchPreviewStatusState": {
        "type": "string",
        "enum": [
          "pending",
          "done",
          "inconsistent"
        ]
      },
      "PatchProgress": {
        "type": "object",
        "properties": {
          "manifest": {
            "$ref": "#/components/schemas/PatchManifestProgress"
          },
          "phase": {
            "$ref": "#/components/schemas/PatchPhase"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairProgress"
          },
          "update": {
            "$ref": "#/components/schemas/PatchUpdateProgress"
          }
        }
      },
      "PatchProxyAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyArtifactPatchUrlOverride": {
        "type": "object",
        "properties": {
          "artifactId": {
            "type": "string"
          },
          "patchUrl": {
            "type": "string"
          }
        }
      },
      "PatchProxyArtifactPatchUrlOverrideRequest": {
        "type": "object",
        "properties": {
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyArtifactPatchUrlOverride"
            }
          }
        }
      },
      "PatchProxyClientProductType": {
        "type": "string",
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ]
      },
      "PatchProxyCombinedPatchState": {
        "type": "string",
        "enum": [
          "awaiting_headers",
          "unknown",
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "bad_install_path"
        ]
      },
      "PatchProxyConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "PatchProxyConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "bundles_url": {
            "type": "string"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxySecondaryPatchline"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyDependency"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyDynamicTags"
            }
          },
          "delete_foreign_paths": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "PatchProxyContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyCookie"
            }
          }
        }
      },
      "PatchProxyCookie": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "httponly": {
            "type": "boolean"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchProxyCreateShortcutsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyDataPaths": {
        "type": "object",
        "properties": {
          "userDataRoot": {
            "type": "string"
          },
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          }
        }
      },
      "PatchProxyDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "elevate": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyDependencyState": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatusPhase"
          }
        }
      },
      "PatchProxyDynamicTagHeuristics": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyDynamicTags": {
        "type": "object",
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/PatchProxyDynamicTagHeuristics"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "locked_file_info": {
            "$ref": "#/components/schemas/PatchProxyLockedFileInfo"
          }
        }
      },
      "PatchProxyEventType": {
        "type": "string",
        "enum": [
          "none",
          "startup",
          "player_initiated",
          "running_product",
          "background"
        ]
      },
      "PatchProxyHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          },
          "cached_home_base_country": {
            "type": "string"
          }
        }
      },
      "PatchProxyInstall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyInstallParams": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "seed_path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "excludedPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyJobInfo": {
        "type": "object",
        "properties": {
          "sequence_in_queue": {
            "type": "number",
            "format": "int32"
          },
          "job_status": {
            "$ref": "#/components/schemas/PatchProxyJobStatus"
          },
          "job_type": {
            "$ref": "#/components/schemas/PatchProxyJobType"
          },
          "event_type": {
            "$ref": "#/components/schemas/PatchProxyEventType"
          },
          "install_id": {
            "type": "string"
          }
        }
      },
      "PatchProxyJobStatus": {
        "type": "string",
        "enum": [
          "queued",
          "in_process",
          "finished_success",
          "finished_failure"
        ]
      },
      "PatchProxyJobType": {
        "type": "string",
        "enum": [
          "none",
          "verify",
          "repair",
          "preview",
          "patch",
          "seed"
        ]
      },
      "PatchProxyLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "PatchProxyLockedFileInfo": {
        "type": "object",
        "properties": {
          "process_name": {
            "type": "string"
          },
          "process_id": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchProxyManifestProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchProxyPatchPhase": {
        "type": "string",
        "enum": [
          "none",
          "manifest",
          "update",
          "repair"
        ]
      },
      "PatchProxyPatchProxyProduct": {
        "type": "object",
        "properties": {
          "install_id": {
            "type": "string"
          }
        }
      },
      "PatchProxyPatchProxyRequest": {
        "type": "object",
        "properties": {
          "job_type": {
            "$ref": "#/components/schemas/PatchProxyJobType"
          },
          "event_type": {
            "$ref": "#/components/schemas/PatchProxyEventType"
          },
          "product": {
            "$ref": "#/components/schemas/PatchProxyPatchProxyProduct"
          },
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temp_path": {
            "type": "string"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "allowedHttpFallbackHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "path": {
            "type": "string"
          },
          "bundlesUrl": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "exclude_foreign_paths": {
            "type": "boolean"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "repair": {
            "type": "boolean"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyPatchRequestOptions": {
        "type": "object",
        "properties": {
          "createShortcut": {
            "type": "boolean"
          },
          "installPath": {
            "type": "string"
          },
          "isRepair": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyPatchStatus": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/PatchProxyPatchStatusState"
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProxyProgress"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/PatchProxyError"
          }
        }
      },
      "PatchProxyPatchStatusState": {
        "type": "string",
        "enum": [
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "pending_verify",
          "repairing"
        ]
      },
      "PatchProxyPatchingResource": {
        "type": "object",
        "properties": {
          "install": {
            "$ref": "#/components/schemas/PatchProxyInstall"
          },
          "dependency_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
            }
          },
          "combined_patch_state": {
            "$ref": "#/components/schemas/PatchProxyCombinedPatchState"
          },
          "patch_status": {
            "$ref": "#/components/schemas/PatchProxyPatchStatus"
          },
          "configuration": {
            "$ref": "#/components/schemas/PatchProxyConfigurationResource"
          },
          "patch_requested": {
            "type": "boolean"
          },
          "user_cancelled_patching": {
            "type": "boolean"
          },
          "repair_code": {
            "$ref": "#/components/schemas/PatchProxyRepairCode"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyPatchlineResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "release_id": {
            "type": "string"
          },
          "path_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "theme_manifest": {
            "type": "string"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "patching_policy": {
            "type": "string"
          },
          "auto_patching_enabled_by_player": {
            "type": "boolean"
          },
          "patching_ask_policy": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "configType": {
            "$ref": "#/components/schemas/PatchProxyConfigType"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "root_dir": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_full_path": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/AnyType"
          },
          "product_install_move_status": {
            "$ref": "#/components/schemas/AnyType"
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "patch_status_known": {
            "type": "boolean"
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxySecondaryPatchlineResource"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyDependency"
            }
          },
          "dependencyStates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PatchProxyDependencyState"
            }
          },
          "locale_data": {
            "$ref": "#/components/schemas/PatchProxyLocaleDataResource"
          },
          "region_data": {
            "$ref": "#/components/schemas/PatchProxyRegionDataResource"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "rogue_process_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/PatchProxyConfigurationStatus"
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "restart_required": {
            "type": "boolean"
          },
          "vanguard_dependency": {
            "type": "boolean"
          },
          "should_repair": {
            "type": "boolean"
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/PatchProxyProductAlias"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/PatchProxyClientProductType"
          }
        }
      },
      "PatchProxyPhase": {
        "type": "string",
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ]
      },
      "PatchProxyPrepareDirectoryPermissionsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyProductAlias": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyProductPatchlineKey": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "PatchProxyProductPatchlineProgress": {
        "type": "object",
        "properties": {
          "launchable": {
            "type": "boolean"
          },
          "overallProgress": {
            "type": "number",
            "format": "double"
          },
          "repairProgress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/PatchProxyPatchPhase"
          },
          "totalTimeRemainingMs": {
            "type": "number",
            "format": "int64"
          },
          "currentSpeedMbps": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesDownloaded": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToDownload": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesWritten": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToWrite": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesDone": {
            "type": "number",
            "format": "int64"
          },
          "totalBytesToDo": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchProxyProductPatchlineResourceV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "$ref": "#/components/schemas/PatchProxyPatchlineResource"
          }
        }
      },
      "PatchProxyProductPatchlineStatus": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/PatchProxyState"
          },
          "previousState": {
            "$ref": "#/components/schemas/PatchProxyState"
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProxyProductPatchlineProgress"
          }
        }
      },
      "PatchProxyProductRegistryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "configType": {
            "$ref": "#/components/schemas/PatchProxyConfigType"
          }
        }
      },
      "PatchProxyProductRegistryProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyPatchlineResource"
            }
          }
        }
      },
      "PatchProxyProductSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "PatchProxyProgress": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/PatchProxyPhase"
          },
          "manifest": {
            "$ref": "#/components/schemas/PatchProxyManifestProgress"
          },
          "update": {
            "$ref": "#/components/schemas/PatchProxyUpdateProgress"
          },
          "repair": {
            "$ref": "#/components/schemas/PatchProxyRepairProgress"
          }
        }
      },
      "PatchProxyRefreshRequestOptions": {
        "type": "object",
        "properties": {
          "quickValidation": {
            "type": "boolean"
          }
        }
      },
      "PatchProxyRegionDataResource": {
        "type": "object",
        "properties": {
          "available_regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_region": {
            "type": "string"
          }
        }
      },
      "PatchProxyRegisterWatchPathsRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "PatchProxyRepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ]
      },
      "PatchProxyRepairProgress": {
        "type": "object",
        "properties": {
          "repaired_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_repair": {
            "type": "number",
            "format": "int64"
          },
          "repaired_files": {
            "type": "number",
            "format": "int64"
          },
          "files_to_repair": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchProxyRiotClientAuthAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PatchProxyRiotClientAuthAuthorization": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          },
          "accessToken": {
            "$ref": "#/components/schemas/PatchProxyRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PatchProxyRsoAuthIdToken"
          }
        }
      },
      "PatchProxyRiotClientAuthIdClaims": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          },
          "acct": {
            "$ref": "#/components/schemas/PatchProxyRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          }
        }
      },
      "PatchProxyRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "clientId": {
            "type": "string"
          }
        }
      },
      "PatchProxyRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "clientId": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          }
        }
      },
      "PatchProxyScdCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "PatchProxyScdCookies": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "format": "int32"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyScdCookie"
            }
          }
        }
      },
      "PatchProxySecondaryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchProxyDynamicTags"
            }
          }
        }
      },
      "PatchProxySecondaryPatchlineResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "relativePath": {
            "type": "string"
          }
        }
      },
      "PatchProxyState": {
        "type": "string",
        "enum": [
          "Unknown",
          "NotInstalled",
          "UpToDate",
          "OutOfDate",
          "Updating",
          "NeedsRepair",
          "Repairing",
          "StatusError",
          "CheckingForUpdate",
          "DependencyUpdate",
          "Paused"
        ]
      },
      "PatchProxyTokenV2": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PatchProxyRiotClientAuthAuthorization"
          },
          "token": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PatchProxyUpdateProgress": {
        "type": "object",
        "properties": {
          "read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_read": {
            "type": "number",
            "format": "int64"
          },
          "written_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_write": {
            "type": "number",
            "format": "int64"
          },
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PatchRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PatchRepairFileInfo": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PatchRepairFileInfoState"
          }
        }
      },
      "PatchRepairFileInfoState": {
        "type": "string",
        "enum": [
          "marked_for_repair",
          "repairing",
          "ready",
          "marked_for_update",
          "updating",
          "canceled"
        ]
      },
      "PatchRepairProgress": {
        "type": "object",
        "properties": {
          "bytes_to_repair": {
            "type": "number",
            "format": "int64"
          },
          "files_to_repair": {
            "type": "number",
            "format": "int64"
          },
          "repaired_bytes": {
            "type": "number",
            "format": "int64"
          },
          "repaired_files": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchRepairRequest": {
        "type": "object",
        "properties": {
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "manifest_url": {
            "type": "string"
          },
          "max_download_speed": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PatchRepairStatus": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError"
          },
          "manifest_url": {
            "type": "string"
          },
          "repair_progress": {
            "$ref": "#/components/schemas/PatchRepairProgress"
          },
          "state": {
            "$ref": "#/components/schemas/PatchRepairStatusState"
          }
        }
      },
      "PatchRepairStatusState": {
        "type": "string",
        "enum": [
          "pending",
          "in_progress",
          "canceled",
          "done"
        ]
      },
      "PatchRequests": {
        "type": "object",
        "properties": {
          "patch": {
            "$ref": "#/components/schemas/PatchPatchRequest"
          },
          "preview": {
            "$ref": "#/components/schemas/PatchPreviewRequest"
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairRequest"
          },
          "seed": {
            "$ref": "#/components/schemas/PatchSeedRequest"
          }
        }
      },
      "PatchSeedRequest": {
        "type": "object",
        "properties": {
          "allowedHttpFallbackHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundlesUrl": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "max_download_speed": {
            "type": "number",
            "format": "int32"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchSeedStatus": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PatchError"
          },
          "progress": {
            "$ref": "#/components/schemas/PatchProgress"
          },
          "state": {
            "$ref": "#/components/schemas/PatchSeedStatusState"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update_patterns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PatchSeedStatusState": {
        "type": "string",
        "enum": [
          "seeding",
          "out_of_date",
          "up_to_date",
          "pending_verify"
        ]
      },
      "PatchStatus": {
        "type": "object",
        "properties": {
          "patch": {
            "$ref": "#/components/schemas/PatchPatchStatus"
          },
          "preview": {
            "$ref": "#/components/schemas/PatchPreviewStatus"
          },
          "repair": {
            "$ref": "#/components/schemas/PatchRepairStatus"
          },
          "seed": {
            "$ref": "#/components/schemas/PatchSeedStatus"
          }
        }
      },
      "PatchUpdateProgress": {
        "type": "object",
        "properties": {
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_read": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_write": {
            "type": "number",
            "format": "int64"
          },
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "written_bytes": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PatchingResource": {
        "type": "object",
        "properties": {
          "install": {
            "$ref": "#/components/schemas/Install"
          },
          "combined_patch_state": {
            "$ref": "#/components/schemas/CombinedPatchState"
          },
          "configuration": {
            "$ref": "#/components/schemas/ConfigurationResource"
          },
          "patch_requested": {
            "type": "boolean"
          },
          "user_cancelled_patching": {
            "type": "boolean"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PayMobileCompletedPricePointPurchaseResponse": {
        "type": "object",
        "properties": {
          "pricePointId": {
            "type": "string"
          },
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualCurrencyCode": {
            "type": "string"
          },
          "virtualCurrencyName": {
            "type": "string"
          },
          "virtualTotalAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PayMobileInitializePurchaseResponse": {
        "type": "object",
        "properties": {
          "playerFacingId": {
            "type": "string"
          }
        }
      },
      "PayMobileMobileStoreStatus": {
        "type": "string",
        "enum": [
          "Success",
          "Initialized",
          "FailedToInitialize",
          "GenericError",
          "PermissionDenied",
          "PurchaseCancelled",
          "PurchaseInProgress",
          "PurchaseFailed",
          "PurchaseNotConsumed",
          "PurchaseConsumed",
          "ProductNotAvailable",
          "Error"
        ]
      },
      "PayMobilePlatformType": {
        "type": "string",
        "enum": [
          "HomebaseCountry",
          "LolShard"
        ]
      },
      "PayMobilePricePoint": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PayMobileProduct": {
        "type": "object",
        "properties": {
          "amountInCents": {
            "type": "number",
            "format": "int32"
          },
          "currencyCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "formattedPrice": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PayMobileProductListResult": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PayMobileProduct"
            }
          },
          "status": {
            "$ref": "#/components/schemas/PayMobileProductListStatus"
          }
        }
      },
      "PayMobileProductListStatus": {
        "type": "string",
        "enum": [
          "Success",
          "NotInitialized",
          "NoProductsAvailableInRiotCatalog",
          "NoMatchingProductsInMobileStore",
          "CatalogUnreachable",
          "RiotPayCatalogUnreachable",
          "MobileStoreFailure",
          "RequestInProgress",
          "RiotClientNotInitiliazed",
          "RiotClientNotReady",
          "InAppPurchaseNotInitiliazed",
          "EmptyProductList",
          "ConfigurationNotReady"
        ]
      },
      "PayMobileProductSession": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "PayMobilePurchaseResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PayMobilePurchaseStatus"
          },
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualTotalAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PayMobilePurchaseStatus": {
        "type": "string",
        "enum": [
          "Ready",
          "Initiated",
          "InitFailed",
          "Processing",
          "Fulfilled",
          "CAPOrderCreated",
          "Cancelled",
          "VerificationPending",
          "FulfillPending",
          "RetriesFailed",
          "InvalidPurchaseRequest",
          "PurchaseVelocityReached",
          "PurchasePending",
          "MissingTransaction",
          "FailedToStartInAppPurchaseNotInitialized",
          "FailedToStartMissingUserId",
          "FailedToStartOrderIdEmpty",
          "FailedToStartRiotPayClientNotReady",
          "FailedToStartPurchaseInProgress",
          "FailedToStartProductInvalid",
          "FailedToStartNewPurchaseDisabled",
          "FailedToStartRiotPayReturnedError",
          "FulfillmentRiotPayClientNotReady",
          "FulfillmentDependenciesError",
          "FulfillmentFailedToReachRiotPayService",
          "FulfillmentRiotPayServiceIssue",
          "FulfillmentRiotPayServiceGatewayIssue",
          "FulfillmentRiotPayServiceUnintelligibleResponse",
          "Completed",
          "PurchaseConsumed",
          "PurchaseNotConsumed"
        ]
      },
      "PayMobilePurchaseTransaction": {
        "type": "object",
        "properties": {
          "amountInCents": {
            "type": "number",
            "format": "int32"
          },
          "currencyCode": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "purchaseReceipt": {
            "type": "string"
          },
          "purchasedAt": {
            "type": "number",
            "format": "int64"
          },
          "transactionId": {
            "type": "string"
          }
        }
      },
      "PayMobileSubmitPurchaseResult": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/PayMobileSubmitPurchaseResultDetails"
          },
          "status": {
            "$ref": "#/components/schemas/PayMobileSubmitPurchaseResultStatus"
          }
        }
      },
      "PayMobileSubmitPurchaseResultDetails": {
        "type": "object",
        "properties": {
          "capOrderId": {
            "type": "string"
          },
          "pricePointId": {
            "type": "string"
          },
          "purchaseType": {
            "type": "string"
          },
          "virtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualBonusAmount": {
            "type": "number",
            "format": "int32"
          },
          "virtualCurrencyCode": {
            "type": "string"
          },
          "virtualCurrencyName": {
            "type": "string"
          },
          "virtualTotalAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PayMobileSubmitPurchaseResultStatus": {
        "type": "string",
        "enum": [
          "PmcTransient",
          "GatewayTransient",
          "FulfillmentTransient",
          "InvalidRequest",
          "Error",
          "Success",
          "MissingTransaction",
          "ErrorDependencies",
          "ErrorResponse",
          "OtherServiceError"
        ]
      },
      "PayMobileTelemetryContext": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "endpointApi": {
            "type": "string"
          },
          "iapStatus": {
            "$ref": "#/components/schemas/PayMobileMobileStoreStatus"
          },
          "orderId": {
            "type": "string"
          },
          "paymentMethodId": {
            "type": "string"
          },
          "pricePointId": {
            "type": "string"
          },
          "productListStatus": {
            "$ref": "#/components/schemas/PayMobileProductListStatus"
          },
          "purchaseStatus": {
            "$ref": "#/components/schemas/PayMobilePurchaseStatus"
          },
          "result": {
            "$ref": "#/components/schemas/PayMobileTelemetryResult"
          }
        }
      },
      "PayMobileTelemetryProductInvalidReason": {
        "type": "string",
        "enum": [
          "ProductNotFound",
          "ProductIdentifierMissing",
          "LocalizedTitleMissing",
          "LocalizedDescriptionMissing",
          "PriceNull",
          "PriceNotANumber",
          "PriceLocaleMissing",
          "PriceLocaleCurrencyCodeMissing",
          "FailedToParse"
        ]
      },
      "PayMobileTelemetryResult": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "ERROR"
        ]
      },
      "PaymentsIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PaymentsInitializePreselectedPurchaseRequest": {
        "type": "object",
        "properties": {
          "pricePointId": {
            "type": "string"
          }
        }
      },
      "PaymentsInitializePurchaseRequest": {
        "type": "object",
        "properties": {
          "minVirtualAmount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PaymentsInitializedPurchase": {
        "type": "object",
        "properties": {
          "purchaseStartUrl": {
            "type": "string"
          }
        }
      },
      "PaymentsLoginInfo": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PaymentsProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "realAmountCents": {
            "type": "number",
            "format": "int32"
          },
          "realCurrencyCode": {
            "type": "string"
          },
          "riotSku": {
            "type": "string"
          }
        }
      },
      "PaymentsReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string"
          },
          "minVirtualAmount": {
            "type": "number",
            "format": "int32"
          },
          "pricePointId": {
            "type": "string"
          },
          "storefrontAccountCode": {
            "type": "string"
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string"
          },
          "pmcContentsUrl": {
            "type": "string"
          },
          "pmcStartUrl": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PaymentsUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "PermissionsChatFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "type": "number",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PermissionsChatFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsChatFriend"
            }
          }
        }
      },
      "PermissionsFriendUpdateList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsChatFriend"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionsLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PermissionsLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PermissionsLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PermissionsLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PermissionsLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/PermissionsLookupV1XboxNameset"
          }
        }
      },
      "PermissionsLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/PermissionsLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV1XboxNameset"
          }
        }
      },
      "PermissionsLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionsLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PermissionsLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PermissionsLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PermissionsLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PermissionsLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PermissionsLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/PermissionsLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "PermissionsLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PermissionsLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PermissionsLookupV2XboxNameset"
          }
        }
      },
      "PermissionsLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionsLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PermissionsLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "PermissionsLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "PermissionsOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PermissionsPermissionDetails": {
        "type": "object",
        "properties": {
          "denyReason": {
            "type": "string"
          },
          "hasPermission": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          }
        }
      },
      "PermissionsPermissionsRequestParameters": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string"
          }
        }
      },
      "PermissionsPermissionsResponse": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPermissionDetails"
            }
          }
        }
      },
      "PermissionsPlatformSocialCommunicationPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PermissionsPlatformSocialCommunicationPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationPermission"
          },
          "reason": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationType"
          }
        }
      },
      "PermissionsPlatformSocialCommunicationType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Text",
          "Voice"
        ]
      },
      "PermissionsPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialCrossPlayPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PermissionsPlatformSocialCrossPlayPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialCrossPlayPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialMultiplayerPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PermissionsPlatformSocialMultiplayerPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialMultiplayerPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "PermissionsPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialOnlineStatus"
          }
        }
      },
      "PermissionsPlatformSocialTextPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PermissionsPlatformSocialTextPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialTextPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialUserCommunicationPermission": {
        "type": "object",
        "properties": {
          "crossNetworkFriendsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationPermissionDetails"
            }
          },
          "crossNetworkUsersPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userPermissionsMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialUserCommunicationPermissionsEntry"
            }
          }
        }
      },
      "PermissionsPlatformSocialUserCommunicationPermissionsEntry": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userConsoleId": {
            "type": "string"
          }
        }
      },
      "PermissionsPlatformSocialVoicePermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PermissionsPlatformSocialVoicePermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PermissionsPlatformSocialVoicePermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PermissionsRiotUser": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/PermissionsOnlinePlatform"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsUserCommunicationPermissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsPlatformSocialCommunicationPermissionDetails"
            }
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PermissionsUserCommunicationPermissionsV2Request": {
        "type": "object",
        "properties": {
          "queryCache": {
            "type": "boolean"
          },
          "riotUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsRiotUser"
            }
          }
        }
      },
      "PlatformLoginAuthenticationMethod": {
        "type": "string",
        "enum": [
          "Riot",
          "Google",
          "GameCenter",
          "Facebook",
          "Apple",
          "QQ",
          "Wechat",
          "Wegame"
        ]
      },
      "PlatformLoginAuthorizationRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformLoginRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlatformLoginAuthorizationResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlatformLoginAuthorizationResponseType"
          }
        }
      },
      "PlatformLoginAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "authorized"
        ]
      },
      "PlatformLoginLoginPersistenceConfig": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformLoginLoginPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "not_logged_in",
          "logged_in"
        ]
      },
      "PlatformLoginLoginResult": {
        "type": "object",
        "properties": {
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "error": {
            "type": "string"
          },
          "isLoginSuccessful": {
            "type": "boolean"
          },
          "loginType": {
            "$ref": "#/components/schemas/PlatformLoginLoginTypeEnum"
          },
          "rsoSignOnAttemptEvent": {
            "$ref": "#/components/schemas/PlatformLoginRSOSignOnAttemptEvent"
          }
        }
      },
      "PlatformLoginLoginStatus": {
        "type": "object",
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/PlatformLoginLoginPhase"
          }
        }
      },
      "PlatformLoginLoginTypeEnum": {
        "type": "string",
        "enum": [
          "Invalid",
          "NoLongLivedSession",
          "LongLivedSessionRejected",
          "LongLivedSessionAccepted"
        ]
      },
      "PlatformLoginOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PlatformLoginOutcome": {
        "type": "string",
        "enum": [
          "Success",
          "PrivateSettingsMissing",
          "PrivateSettingsEmpty",
          "NoLoginSessionCookies",
          "NoSessionIdCookie",
          "SetPersistedLoginFailed",
          "AuthRequestFailed",
          "AuthResultNotAuthorized"
        ]
      },
      "PlatformLoginPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformLoginOnlinePlatform"
          }
        }
      },
      "PlatformLoginRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "PlatformLoginRSOSignOnAttemptEvent": {
        "type": "object",
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/PlatformLoginAuthenticationMethod"
          },
          "errorCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "outcome": {
            "$ref": "#/components/schemas/PlatformLoginOutcome"
          },
          "signOnAttemptNumber": {
            "type": "number",
            "format": "int32"
          },
          "storedSessionState": {
            "$ref": "#/components/schemas/PlatformLoginStoredSessionState"
          }
        }
      },
      "PlatformLoginReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlatformLoginSessionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformLoginSessionResponseType"
          }
        }
      },
      "PlatformLoginSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "PlatformLoginStoredSessionState": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "Absent"
        ]
      },
      "PlatformNotificationsBroadcast": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "PlatformNotificationsBroadcastRequest": {
        "type": "object",
        "properties": {
          "batch": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PlatformSocialAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "PlatformSocialBroadcast": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "PlatformSocialBroadcastRequest": {
        "type": "object",
        "properties": {
          "batch": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PlatformSocialConsoleUsernameForIdData": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string"
          },
          "platformUsername": {
            "type": "string"
          },
          "secondaryUsername": {
            "type": "string"
          }
        }
      },
      "PlatformSocialConsoleUsernameForIdResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialConsoleUsernameForIdData"
            }
          }
        }
      },
      "PlatformSocialConsolueUsernameForIdRequest": {
        "type": "object",
        "properties": {
          "uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformSocialLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformSocialLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PlatformSocialLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1XboxNameset"
          }
        }
      },
      "PlatformSocialLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV1XboxNameset"
          }
        }
      },
      "PlatformSocialLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformSocialLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PlatformSocialLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PlatformSocialLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "PlatformSocialLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PlatformSocialLookupV2XboxNameset"
          }
        }
      },
      "PlatformSocialLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformSocialLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PlatformSocialLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "PlatformSocialLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialBlockList": {
        "type": "object",
        "properties": {
          "blockedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialBlockedUser"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialBlockedUser": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialCommunicationPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PlatformSocialPlatformSocialCommunicationPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialCommunicationPermission"
          },
          "reason": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialCommunicationType"
          }
        }
      },
      "PlatformSocialPlatformSocialCommunicationType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Text",
          "Voice"
        ]
      },
      "PlatformSocialPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialCrossPlayPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PlatformSocialPlatformSocialCrossPlayPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialCrossPlayPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialMockApiState": {
        "type": "string",
        "enum": [
          "NoMock",
          "FriendListEmpty",
          "BlockListEmpty",
          "BlockListNotifyUpdate",
          "BlockListNotifyDelete",
          "FriendListNotifyUpdate",
          "FriendListNotifyDelete",
          "TextPermissionNotAllowed",
          "VoicePermissionNotAllowed",
          "CrossPlayPermissionNotAllowed",
          "MultiplayerPermissionNotAllowed",
          "UserCommunicationPermissionVoiceNotAllowed",
          "UserCommunicationPermissionTextNotAllowed",
          "FirstPartyNetworkError",
          "Success"
        ]
      },
      "PlatformSocialPlatformSocialMultiplayerPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PlatformSocialPlatformSocialMultiplayerPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialMultiplayerPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "PlatformSocialPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialOnlineStatus"
          }
        }
      },
      "PlatformSocialPlatformSocialTextPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PlatformSocialPlatformSocialTextPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialTextPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialUserCommunicationPermission": {
        "type": "object",
        "properties": {
          "crossNetworkFriendsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialCommunicationPermissionDetails"
            }
          },
          "crossNetworkUsersPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userPermissionsMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialUserCommunicationPermissionsEntry"
            }
          }
        }
      },
      "PlatformSocialPlatformSocialUserCommunicationPermissionsEntry": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSocialPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userConsoleId": {
            "type": "string"
          }
        }
      },
      "PlatformSocialPlatformSocialVoicePermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "PlatformSocialPlatformSocialVoicePermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/PlatformSocialPlatformSocialVoicePermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "PlatformUiAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1Alias": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "type": "number",
            "format": "int64"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1AliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1AliasList": {
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiAliasesV1Alias"
            }
          }
        }
      },
      "PlatformUiAliasesV1AliasLookup": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1AliasLookupResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasLookup"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1AliasValidationReason": {
        "type": "string",
        "enum": [
          "no_error",
          "invalid_product_id_or_wallet_location",
          "insufficient_balance",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ]
      },
      "PlatformUiAliasesV1PurchaseAliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1PurchaseEligibilityInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "PlatformUiAliasesV1PurchaseEligibilityResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isFreeChangeEligible": {
            "type": "boolean"
          },
          "isPaidChangeEligible": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          },
          "walletBalance": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlatformUiAliasesV1RequiredResponse": {
        "type": "object",
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiAliasesV1StatusResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1Alias"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiAppStoreUpdateInfo": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "appUrl": {
            "type": "string"
          }
        }
      },
      "PlatformUiAppleAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "invalid_credentials_type",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_authorization_error_failed",
          "as_authorization_error_invalid_response",
          "as_authorization_error_not_handled",
          "as_authorization_error_unknown",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "PlatformUiAppleAuthorizationOpenConnectId": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "PlatformUiAppleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiAppleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiAppleAuthorizationError"
          },
          "open_connect_id": {
            "$ref": "#/components/schemas/PlatformUiAppleAuthorizationOpenConnectId"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiAppleAuthorizationResponseType"
          }
        }
      },
      "PlatformUiAppleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "open_connect_id",
          "code_exchange"
        ]
      },
      "PlatformUiAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiAuthHintType"
          }
        }
      },
      "PlatformUiAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "PlatformUiAuthIntentType": {
        "type": "string",
        "enum": [
          "SignIn",
          "CreateAccount"
        ]
      },
      "PlatformUiAuthenticateMultifactorInput": {
        "type": "object",
        "properties": {
          "multifactor": {
            "$ref": "#/components/schemas/PlatformUiMultifactorInput"
          }
        }
      },
      "PlatformUiAuthenticationRedirectInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthenticationResponse": {
        "type": "object",
        "properties": {
          "captcha": {
            "$ref": "#/components/schemas/PlatformUiCaptcha"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "gamepass": {
            "$ref": "#/components/schemas/PlatformUiGamepassResponseDetails"
          },
          "healup": {
            "$ref": "#/components/schemas/PlatformUiHealupResponseDetails"
          },
          "kr-id-verification": {
            "$ref": "#/components/schemas/PlatformUiKRIdVerificationResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlatformUiMultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/PlatformUiSignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/PlatformUiSuccessResponseDetails"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiResponseType"
          }
        }
      },
      "PlatformUiAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "PlatformUiAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthorizationClassicLogin": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "facebook_app_id": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "PlatformUiAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlatformUiAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlatformUiAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlatformUiAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlatformUiAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlatformUiImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiAuthorizationResponseType"
          }
        }
      },
      "PlatformUiAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlatformUiTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/PlatformUiAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlatformUiTokenContext"
          }
        }
      },
      "PlatformUiAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "PlatformUiAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlatformUiAvailableRegionsResponse": {
        "type": "object",
        "properties": {
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isReady": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiBypassQueueRequest": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "PlatformUiCaptcha": {
        "type": "object",
        "properties": {
          "hcaptcha": {
            "$ref": "#/components/schemas/PlatformUiHCaptcha"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiCaptchaType"
          }
        }
      },
      "PlatformUiCaptchaType": {
        "type": "string",
        "enum": [
          "none",
          "hcaptcha"
        ]
      },
      "PlatformUiClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "PlatformUiClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/PlatformUiAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/PlatformUiAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/PlatformUiClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/PlatformUiRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUiClientConfigCluster": {
        "type": "object",
        "properties": {
          "bypass": {
            "type": "string"
          },
          "queue": {
            "type": "string"
          },
          "session": {
            "type": "string"
          }
        }
      },
      "PlatformUiClientProductType": {
        "type": "string",
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ]
      },
      "PlatformUiConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "PlatformUiConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiLoginAMR"
            }
          }
        }
      },
      "PlatformUiConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "PlatformUiConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/PlatformUiConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "PlatformUiContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            }
          }
        }
      },
      "PlatformUiCookieVector": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            }
          }
        }
      },
      "PlatformUiCreateSessionRequest": {
        "type": "object",
        "properties": {
          "bypass": {
            "type": "boolean"
          },
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "sessionUri": {
            "type": "string"
          }
        }
      },
      "PlatformUiDebugClientConfigSource": {
        "type": "object",
        "properties": {
          "parseRequired": {
            "type": "boolean"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiPatchlineMetadata"
            }
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiProductDefinition"
            }
          },
          "rawConfig": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiDeleteAccountFlowStatus": {
        "type": "string",
        "enum": [
          "uninitialized",
          "completed",
          "cancelled",
          "error"
        ]
      },
      "PlatformUiDeleteAccountV1StatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PlatformUiDeleteAccountFlowStatus"
          }
        }
      },
      "PlatformUiDependency": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "elevate": {
            "type": "boolean"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlatformUiDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "PlatformUiDynamicTagHeuristics": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiDynamicTags": {
        "type": "object",
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/PlatformUiDynamicTagHeuristics"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiEligibilityResponse": {
        "type": "object",
        "properties": {
          "eligibleAfter": {
            "type": "number",
            "format": "int64"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "no_default_user",
          "too_young",
          "content_update_required"
        ]
      },
      "PlatformUiFREStatus": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "loading": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiFacebookAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "fbsdk_login_error_password_changed",
          "fbsdk_login_error_user_checkpointed",
          "fbsdk_login_error_user_mismatch",
          "fbsdk_login_error_unconfirmed_user",
          "fbsdk_login_error_system_account_app_disabled",
          "fbsdk_login_error_system_account_unavailable",
          "fbsdk_login_error_bad_challenge_string",
          "fbsdk_login_error_invalid_id_token",
          "fbsdk_login_error_missing_access_token",
          "fbsdk_login_error_unknown",
          "fbsdk_init_error",
          "unknown_java_error",
          "unknown"
        ]
      },
      "PlatformUiFacebookAuthorizationParameters": {
        "type": "object",
        "properties": {
          "force_use_classic_mode": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiFacebookAuthorizationResponse": {
        "type": "object",
        "properties": {
          "classic_login": {
            "$ref": "#/components/schemas/PlatformUiAuthorizationClassicLogin"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiFacebookAuthorizationError"
          },
          "id_token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiFacebookAuthorizationResponseType"
          }
        }
      },
      "PlatformUiFacebookAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "id_token",
          "classic_login"
        ]
      },
      "PlatformUiGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PlatformUiGameCenterAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown"
        ]
      },
      "PlatformUiGameCenterAuthorizationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlatformUiGameCenterAuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlatformUiGameCenterToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiGameCenterAuthorizationResponseType"
          }
        }
      },
      "PlatformUiGameCenterAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "success"
        ]
      },
      "PlatformUiGameCenterToken": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PlatformUiGameNameAndTagLine": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlatformUiGameSessionServiceCreateSessionRequestBody": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PlatformUiGameSessionV1ClusterList": {
        "type": "object",
        "properties": {
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiGameSessionV1GameSessionId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "PlatformUiGameSessionV1GameSessionMessage": {
        "type": "string",
        "enum": [
          "no_error",
          "player_banned",
          "account_restricted",
          "account_locked",
          "queue_busy",
          "bad_entity_parameter",
          "missing_entitlements",
          "bad_authorization_param",
          "service_create_session_failure",
          "service_refresh_session_failure",
          "service_delete_session_failure",
          "internal",
          "unknown"
        ]
      },
      "PlatformUiGameSessionV1GameSessionRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "clientName": {
            "type": "string"
          },
          "cluster": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "rsoClientId": {
            "type": "string"
          },
          "shouldAttemptQueueBypass": {
            "type": "boolean"
          },
          "shouldFetchSessionToken": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiGameSessionV1GameSessionResponse": {
        "type": "object",
        "properties": {
          "bypassQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "bypassQueueToken": {
            "type": "string"
          },
          "errorId": {
            "$ref": "#/components/schemas/PlatformUiGameSessionV1GameSessionMessage"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "loginQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "loginQueueToken": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "queueIsOpen": {
            "type": "boolean"
          },
          "queuePosition": {
            "type": "number",
            "format": "int64"
          },
          "sessionClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "sessionToken": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlatformUiGameSessionV1GameSessionState"
          },
          "waitTime": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUiGameSessionV1GameSessionState": {
        "type": "string",
        "enum": [
          "initializing",
          "fetching_bypass",
          "joining_queue",
          "in_queue",
          "login_created",
          "creating_session",
          "connected",
          "deleting_session",
          "deleting_session_taken_over",
          "failed"
        ]
      },
      "PlatformUiGamepassResponseDetails": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "number",
            "format": "int32"
          },
          "remaining": {
            "type": "number",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/PlatformUiGamepassStatus"
          }
        }
      },
      "PlatformUiGamepassStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "NONE"
        ]
      },
      "PlatformUiGamertagType": {
        "type": "string",
        "enum": [
          "classic",
          "modern",
          "modern_suffix",
          "unique_modern"
        ]
      },
      "PlatformUiGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiGenerateTaglineInput": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          }
        }
      },
      "PlatformUiGenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlatformUiAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlatformUiGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlatformUiGoogleAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown",
          "sign_in_currently_in_progress",
          "sign_in_failed",
          "developer_error",
          "internal_error",
          "network_error",
          "invalid_account",
          "missing_result",
          "missing_code",
          "aswebauthentication_session_presentation_context_invalid",
          "aswebauthentication_session_presentation_context_not_provided",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "unknown_aswebauthentication_session_error",
          "unknown_sfauthentication_session_error",
          "unknown_java_error"
        ]
      },
      "PlatformUiGoogleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "googleClientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiGoogleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiGoogleAuthorizationError"
          },
          "idToken": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiGoogleAuthorizationResponseType"
          }
        }
      },
      "PlatformUiGoogleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "cancelled",
          "error",
          "token",
          "code"
        ]
      },
      "PlatformUiHCaptcha": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "PlatformUiHealupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "PlatformUiHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PlatformUiHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiHttpCookie"
            }
          }
        }
      },
      "PlatformUiIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlatformUiAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlatformUiIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/PlatformUiClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/PlatformUiSessionResponse"
          }
        }
      },
      "PlatformUiInitiateLoginSessionRequest": {
        "type": "object",
        "properties": {
          "authIntent": {
            "$ref": "#/components/schemas/PlatformUiAuthIntentType"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "loginQueueRegion": {
            "type": "string"
          },
          "loginStrategy": {
            "$ref": "#/components/schemas/PlatformUiLoginStrategyType"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "requireLoginQueue": {
            "type": "boolean"
          },
          "requireLolRegion": {
            "type": "boolean"
          },
          "requireRiotID": {
            "type": "boolean"
          },
          "requireVNG": {
            "type": "boolean"
          },
          "requiredEntitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiInstallId": {
        "type": "object",
        "properties": {
          "installId": {
            "type": "string"
          }
        }
      },
      "PlatformUiKRIdVerificationResponseDetails": {
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "PlatformUiLaunchRestrictions": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/PlatformUirestrictionData"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlatformUiLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "PlatformUiLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "PlatformUiLoginQueueServiceLoginQueueRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiLoginQueueServiceLoginQueueTokenType"
          }
        }
      },
      "PlatformUiLoginQueueServiceLoginQueueRequestBody": {
        "type": "object",
        "properties": {
          "bypassToken": {
            "type": "string"
          },
          "clientName": {
            "type": "string"
          },
          "entitlements": {
            "type": "string"
          },
          "queueToken": {
            "type": "string"
          },
          "userinfo": {
            "type": "string"
          }
        }
      },
      "PlatformUiLoginQueueServiceLoginQueueTokenType": {
        "type": "string",
        "enum": [
          "LOGIN",
          "QUEUE",
          "UNKNOWN"
        ]
      },
      "PlatformUiLoginQueueServiceQueueToken": {
        "type": "object",
        "properties": {
          "exp": {
            "type": "number",
            "format": "int64"
          },
          "full": {
            "type": "boolean"
          },
          "iat": {
            "type": "number",
            "format": "int64"
          },
          "queuePos": {
            "type": "number",
            "format": "int32"
          },
          "retryAfter": {
            "type": "number",
            "format": "int32"
          },
          "waitTime": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlatformUiLoginStrategyType": {
        "type": "string",
        "enum": [
          "riot_identity",
          "google",
          "gamecenter",
          "facebook",
          "apple",
          "nintendo",
          "xbox",
          "playstation",
          "okta",
          "qrcode"
        ]
      },
      "PlatformUiLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "PlatformUiMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "PlatformUiMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "PlatformUiMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "PlatformUiMobileFRETelemetryEvent": {
        "type": "object",
        "properties": {
          "authIntent": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          },
          "isSignupSession": {
            "type": "boolean"
          },
          "loginStrategy": {
            "type": "string"
          },
          "platformUiSessionDurationMs": {
            "type": "number",
            "format": "int64"
          },
          "pslSessionId": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "sessionStepCount": {
            "type": "number",
            "format": "int32"
          },
          "step": {
            "type": "string"
          }
        }
      },
      "PlatformUiMobileFREUI": {
        "type": "string",
        "enum": [
          "Login",
          "Eula",
          "VngProfile",
          "LoLRegionSelection",
          "RiotIDPrompt",
          "LoginQueue",
          "Error"
        ]
      },
      "PlatformUiMobileViewType": {
        "type": "string",
        "enum": [
          "FRE",
          "VNGEditProfile",
          "RiotID",
          "AccountDeletion"
        ]
      },
      "PlatformUiModernGamertag": {
        "type": "object",
        "properties": {
          "modern": {
            "type": "string"
          },
          "modern_suffix": {
            "type": "string"
          },
          "unique_modern": {
            "type": "string"
          }
        }
      },
      "PlatformUiMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/PlatformUiMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUiMultifactorInput": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "PlatformUiMultifactorResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "known_value": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          }
        }
      },
      "PlatformUiNintendoAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "UserCanceledAuthorization",
          "UserCanceledLogIn",
          "EmptyResponse",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "PlatformUiNintendoAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiNintendoAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiNintendoAccountV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlatformUiNintendoAccountV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiNintendoAccountV2AuthorizationResponseType"
          }
        }
      },
      "PlatformUiNintendoAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "PlatformUiNintendoAccountV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlatformUiOktaAuthorizationError": {
        "type": "string",
        "enum": [
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "PlatformUiOktaAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "PlatformUiOktaAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiOktaAuthorizationError"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiOktaAuthorizationResponseType"
          }
        }
      },
      "PlatformUiOktaAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "code_exchange"
        ]
      },
      "PlatformUiOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PlatformUiPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/PlatformUiGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/PlatformUiGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/PlatformUiGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/PlatformUiMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/PlatformUiMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/PlatformUiTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/PlatformUiWeGamePartnerCredentials"
          }
        }
      },
      "PlatformUiPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/PlatformUiGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/PlatformUiGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/PlatformUiGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/PlatformUiMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/PlatformUiTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/PlatformUiWeGamePartnerCredentials"
          }
        }
      },
      "PlatformUiPatchComponentMetadata": {
        "type": "object",
        "properties": {
          "excludedPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sieveLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sieveProductId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiPatchSetMetadata": {
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiPatchComponentMetadata"
            }
          }
        }
      },
      "PlatformUiPatchlineConfigurationMetadata": {
        "type": "object",
        "properties": {
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/PlatformUiAppStoreUpdateInfo"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiDependency"
            }
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiDynamicTags"
            }
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiPatchSetMetadata"
            }
          },
          "region_data": {
            "$ref": "#/components/schemas/PlatformUiRegionDataResource"
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiSecondaryPatchlineMetadata"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlatformUiPatchlineMetadata": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlatformUiProductAlias"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/PlatformUiAppStoreUpdateInfo"
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/PlatformUiClientProductType"
          },
          "config_type": {
            "$ref": "#/components/schemas/PlatformUiConfigType"
          },
          "configuration": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/PlatformUiConfigurationStatus"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiContentCookies"
            }
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiDependency"
            }
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiDynamicTags"
            }
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "full_name": {
            "type": "string"
          },
          "had_install_settings_on_init": {
            "type": "boolean"
          },
          "icon_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale_data": {
            "$ref": "#/components/schemas/PlatformUiLocaleDataResource"
          },
          "matching_shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "parent_patchline_id": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching_metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiPatchSetMetadata"
            }
          },
          "path_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "region_data": {
            "$ref": "#/components/schemas/PlatformUiRegionDataResource"
          },
          "rogue_process_checklist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rogue_process_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiSecondaryPatchlineMetadata"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "shards_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiShardsDataResource"
            }
          },
          "supported_versions": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "theme_manifest": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlatformUiPersistence": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlatformUiPlatformUIAccountDeletionStatus": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiPlatformUIError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PlatformUierrorState"
          },
          "recoverable": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiPlatformUIMobileFREEventData": {
        "type": "object",
        "properties": {
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "category": {
            "type": "string"
          },
          "errorCode": {
            "type": "string"
          },
          "isSignupSession": {
            "type": "boolean"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          }
        }
      },
      "PlatformUiPlatformUIMobileFREResult": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "cancelled"
        ]
      },
      "PlatformUiPlatformUIMobileFRESDKStep": {
        "type": "string",
        "enum": [
          "social_signin_load_started",
          "social_signin_load_completed",
          "social_signin_existing_player",
          "social_signin_existing_player_missing_account_data",
          "social_signin_new_account",
          "social_signin_matching_account_found",
          "social_signin_failed",
          "social_signin_cancelled",
          "account_deletion_started",
          "account_deletion_completed",
          "account_deletion_cancelled",
          "account_deletion_failed",
          "account_deletion_external_flow"
        ]
      },
      "PlatformUiPlatformUIRiotIDStatus": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiPlatformUIState": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlatformUiPlatformUIError"
          },
          "status": {
            "$ref": "#/components/schemas/PlatformUistatus"
          },
          "view": {
            "type": "string"
          }
        }
      },
      "PlatformUiPlatformUIStateV2": {
        "type": "object",
        "properties": {
          "activePageId": {
            "type": "string"
          },
          "activeUI": {
            "$ref": "#/components/schemas/PlatformUiMobileViewType"
          }
        }
      },
      "PlatformUiPlatformUIVNGEditProfileStatus": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlatformUiOnlinePlatform"
          }
        }
      },
      "PlatformUiPlayerSessionState": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlatformUiAccessToken"
          },
          "actionRequired": {
            "type": "boolean"
          },
          "config": {
            "$ref": "#/components/schemas/PlatformUiInitiateLoginSessionRequest"
          },
          "errorCode": {
            "type": "string"
          },
          "gameSessionId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlatformUiIdToken"
          },
          "loginCountry": {
            "type": "string"
          },
          "loginState": {
            "$ref": "#/components/schemas/PlatformUiPlayerSessionStateType"
          },
          "persistence": {
            "$ref": "#/components/schemas/PlatformUiPersistence"
          },
          "suggestedActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiSuggestedAction"
            }
          },
          "userInfo": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiPlayerSessionStateType": {
        "type": "string",
        "enum": [
          "PendingInitialization",
          "PendingPlatformUser",
          "PendingClientConfigData",
          "Initializing",
          "PendingClientId",
          "PendingPersistenceInitialization",
          "RestoreAuthorization",
          "PendingCreateAuthorization",
          "PendingAuthIntent",
          "PendingLoginStrategyData",
          "PendingLoginStrategy",
          "PendingCreateAccountStrategy",
          "PendingSignInStrategy",
          "GameUpdateRequired",
          "PendingPlatformAuthorizationConsent",
          "PendingProviderCredentials",
          "PlatformAgeRestricted",
          "PendingAuthentication",
          "PendingKRIdVerification",
          "PendingSignup",
          "SignupAgeRestricted",
          "PendingHealup",
          "PendingMultifactor",
          "MultifactorChallengeDenied",
          "LoginTokenExchange",
          "PendingForget",
          "PendingConsent",
          "PendingEulaData",
          "PendingEulaAcceptance",
          "PendingGamepassStatus",
          "PendingRiotIDData",
          "PendingRiotID",
          "PendingVNGProfileData",
          "PendingVNGProfile",
          "PendingLolRegionSelectionData",
          "PendingLolRegionSelection",
          "PendingProductLaunchRestrictionData",
          "ProductLaunchRestricted",
          "PendingProductAgeRestrictionData",
          "ProductAgeRestricted",
          "PendingAccountEntitlementData",
          "MissingAccountEntitlement",
          "PendingAffinityData",
          "PendingLoginQueueData",
          "PendingLoginQueueBypass",
          "PendingLoginQueue",
          "PendingGameSession",
          "LoginQueueBusy",
          "GameSessionTakenOver",
          "Authorized",
          "Error"
        ]
      },
      "PlatformUiPlaystationAccountErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ]
      },
      "PlatformUiPlaystationAccountUser": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "number",
            "format": "int64"
          },
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlatformUiPlaystationAccountErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlatformUiPlaystationAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NotSignedUp",
          "Logout",
          "LatestSystemSoftwareExist",
          "ClientIdEmpty",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "PlatformUiPlaystationAccountV2AuthorizationNativeCode": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlatformUiPlaystationAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiPlaystationAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiPlaystationAccountV2AuthorizationError"
          },
          "nativeCode": {
            "$ref": "#/components/schemas/PlatformUiPlaystationAccountV2AuthorizationNativeCode"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiPlaystationAccountV2AuthorizationResponseType"
          }
        }
      },
      "PlatformUiPlaystationAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "NativeCode"
        ]
      },
      "PlatformUiPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "PlatformUiProductAlias": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "PlatformUiProductDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiProductDefinitionMap": {
        "type": "object",
        "properties": {
          "productDefinitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiProductDefinition"
            }
          }
        }
      },
      "PlatformUiProductMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiPatchlineMetadata"
            }
          }
        }
      },
      "PlatformUiProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiProductMetadata"
            }
          }
        }
      },
      "PlatformUiPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PlatformUiPublishState": {
        "type": "string",
        "enum": [
          "NotPublished",
          "Published"
        ]
      },
      "PlatformUiRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/PlatformUiImplicitGrantModeTelemetryContext"
          }
        }
      },
      "PlatformUiRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlatformUiTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/PlatformUiTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlatformUiTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "PlatformUiRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlatformUiRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlatformUiRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "PlatformUiRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "PlatformUiRegionDataResource": {
        "type": "object",
        "properties": {
          "available_regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_region": {
            "type": "string"
          }
        }
      },
      "PlatformUiResponseType": {
        "type": "string",
        "enum": [
          "auth",
          "healup",
          "kr-id-verification",
          "signup",
          "multifactor",
          "gamepass",
          "success",
          "error"
        ]
      },
      "PlatformUiRestrictions": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/PlatformUirestrictionData"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlatformUiRiotIdentityAuthCompleteInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlatformUiRiotIdentityAuthStartInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "PlatformUiSecondaryPatchlineMap": {
        "type": "object",
        "properties": {
          "secondaryPatchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformUiSecondaryPatchlineMetadata"
            }
          }
        }
      },
      "PlatformUiSecondaryPatchlineMetadata": {
        "type": "object",
        "properties": {
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiDynamicTags"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PlatformUiSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlatformUiSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/PlatformUiAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "PlatformUiSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlatformUiAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlatformUiMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiSessionResponseType"
          }
        }
      },
      "PlatformUiSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "PlatformUiSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlatformUiShardsDataResource": {
        "type": "object",
        "properties": {
          "game_shard_zone": {
            "type": "string"
          },
          "valid_shards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiSignupCodeLinking": {
        "type": "object",
        "properties": {
          "direct_url": {
            "type": "string"
          },
          "manual_url": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "short_url": {
            "type": "string"
          },
          "status_url": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "PlatformUiSignupLinkDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "code_linking": {
            "$ref": "#/components/schemas/PlatformUiSignupCodeLinking"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous_linking": {
            "type": "string"
          },
          "suggested": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlatformUiSignupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/PlatformUiSignupLinkDetails"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlatformUiStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PlatformUiSuccessResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "is_console_link_session": {
            "type": "boolean"
          },
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "PlatformUiSuggestedAction": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        }
      },
      "PlatformUiTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "PlatformUiTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiUpdateAuthIntentRequest": {
        "type": "object",
        "properties": {
          "authIntent": {
            "$ref": "#/components/schemas/PlatformUiAuthIntentType"
          }
        }
      },
      "PlatformUiUpdateLoginStrategyRequest": {
        "type": "object",
        "properties": {
          "loginStrategy": {
            "$ref": "#/components/schemas/PlatformUiLoginStrategyType"
          }
        }
      },
      "PlatformUiUser": {
        "type": "object",
        "properties": {
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlatformUiErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUiUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "PlatformUiV1ActionRequired": {
        "type": "string",
        "enum": [
          "None",
          "Registration",
          "PhoneVerification"
        ]
      },
      "PlatformUiV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PlatformUiV1Profile": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "governmentId": {
            "type": "string"
          },
          "governmentIdIssueDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "PlatformUiV1ProfileField": {
        "type": "string",
        "enum": [
          "name",
          "email",
          "phone",
          "address",
          "governmentId",
          "governmentIdIssueDate",
          "dateOfBirth",
          "eulaAgreement"
        ]
      },
      "PlatformUiV1ProfileVerificationError": {
        "type": "string",
        "enum": [
          "VerificationFailed",
          "TooManyRequests"
        ]
      },
      "PlatformUiV1SendVerificationCodeConfig": {
        "type": "object",
        "properties": {
          "digits": {
            "type": "number",
            "format": "int32"
          },
          "expiresIn": {
            "type": "number",
            "format": "int64"
          },
          "otpToken": {
            "type": "string"
          },
          "retryAfter": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUiV1SendVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/PlatformUiV1SendVerificationCodeConfig"
          },
          "responseCode": {
            "type": "string"
          }
        }
      },
      "PlatformUiV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_type": {
            "$ref": "#/components/schemas/PlatformUiV1ActionRequired"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformUiV1ProfileField"
            }
          }
        }
      },
      "PlatformUiV1SubmitProfileResponse": {
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/PlatformUiV1SubmitProfileResponseCode"
          }
        }
      },
      "PlatformUiV1SubmitProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidEmail",
          "InvalidPhone",
          "InvalidGovernmentId",
          "InvalidDatetime",
          "InvalidName",
          "AgeLimited",
          "PhoneVerificationRequired"
        ]
      },
      "PlatformUiV1VerificationDetails": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          },
          "otpToken": {
            "type": "string"
          }
        }
      },
      "PlatformUiV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NoDefaultUser",
          "EmptyResponse",
          "FailedToGetRsoAuthenticatorUrl",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError",
          "TooYoung",
          "ContentUpdateRequired"
        ]
      },
      "PlatformUiV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlatformUiV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlatformUiV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlatformUiV2AuthorizationResponseType"
          }
        }
      },
      "PlatformUiV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "PlatformUiV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "PlatformUiVProfileVerificationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlatformUiV1ProfileVerificationError"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiViewStatus": {
        "type": "object",
        "properties": {
          "loading": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "PlatformUiWebLinkingStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "PENDING",
          "EXPIRED",
          "COMPLETED"
        ]
      },
      "PlatformUiWebLinkingStatusResponse": {
        "type": "object",
        "properties": {
          "login_token": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PlatformUiWebLinkingStatus"
          },
          "ttl": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlatformUiXboxSelectUserParameters": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/PlatformUiXboxSignInOptions"
          },
          "shouldRetryOnAbort": {
            "type": "boolean"
          }
        }
      },
      "PlatformUiXboxSignInOptions": {
        "type": "string",
        "enum": [
          "add_default_user_allowing_ui",
          "show_user_selector",
          "allow_guests"
        ]
      },
      "PlatformUicode": {
        "type": "string",
        "enum": [
          "NotFound",
          "RateLimited",
          "SingletonMissing",
          "FetchProductIdFailure",
          "InvalidCDNPath",
          "LoginStrategyMissing",
          "ConfigAuthMethodMissing",
          "ConfigAuthPayloadMissing",
          "InvalidLoginState",
          "CreateSessionFailure",
          "UpdateSessionFailure",
          "UpdateLoginStrategyFailure",
          "DeleteSessionFailure",
          "AuthenticationFailure",
          "FetchCurrentAuthenticationFailure",
          "InvalidAuthenticationState",
          "ReadinessTimeout",
          "SignupFailure",
          "TooYoung",
          "SigninFailure",
          "SigninAuthFailure",
          "SigninCaptchaNotLoaded",
          "SigninMfaFailure",
          "AcceptEulaFailure",
          "AcceptEulaRequired",
          "RetryEulaContentFailure",
          "PlatformConsentFailure",
          "GenerateTaglineFailure",
          "CreateRiotIDFailure",
          "AccountUpdateRequired",
          "UnsupportedLoginStrategy",
          "LoginInitFailure"
        ]
      },
      "PlatformUierrorState": {
        "type": "string",
        "enum": [
          "AuthNFailure",
          "ConnectionTimeout",
          "RateLimited",
          "RequirementsNotMet",
          "UserCancelled",
          "PendingConsent",
          "PendingForget",
          "PendingHealup",
          "ProductLaunchRestricted",
          "GameUpdateRequired",
          "GuestAccount",
          "SystemSignedOut",
          "SystemOutOfDate",
          "NetworkDisconnected",
          "GamepadDisconnected",
          "ReadinessTimeout",
          "WebHandoffTimeout",
          "AcceptEulaRequired",
          "AccountUpdateRequired",
          "MissingAccountEntitlement",
          "RestoreAuthorizationFailure",
          "MissingEulaContent",
          "LoginQueueBusy",
          "GameSessionTakenOver",
          "InternalError"
        ]
      },
      "PlatformUirestrictionData": {
        "type": "object",
        "properties": {
          "expirationMillis": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlatformUistatus": {
        "type": "string",
        "enum": [
          "Destroyed",
          "Initializing",
          "Ready",
          "Authorizing",
          "Error",
          "ReadyToPlay"
        ]
      },
      "PlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/OnlinePlatform"
          }
        }
      },
      "PlayerAccountAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1Alias": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "type": "number",
            "format": "int64"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1AliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1AliasList": {
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias"
            }
          }
        }
      },
      "PlayerAccountAliasesV1AliasLookup": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1AliasLookupResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasLookup"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1AliasValidationReason": {
        "type": "string",
        "enum": [
          "no_error",
          "invalid_product_id_or_wallet_location",
          "insufficient_balance",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ]
      },
      "PlayerAccountAliasesV1PurchaseAliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1PurchaseEligibilityInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV1PurchaseEligibilityResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isFreeChangeEligible": {
            "type": "boolean"
          },
          "isPaidChangeEligible": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          },
          "walletBalance": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlayerAccountAliasesV1RequiredResponse": {
        "type": "object",
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountAliasesV1StatusResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1Alias"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountAliasesV2GenerateTaglineInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV2GenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "invalidReason": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV2ValidityAliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAliasesV2ValidityAliasResponse": {
        "type": "object",
        "properties": {
          "invalidReason": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerAccountAuthHintType"
          }
        }
      },
      "PlayerAccountAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "PlayerAccountAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "PlayerAccountAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "PlayerAccountAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerAccountAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlayerAccountAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerAccountAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlayerAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerAccountImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerAccountAuthorizationResponseType"
          }
        }
      },
      "PlayerAccountAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerAccountTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/PlayerAccountAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerAccountTokenContext"
          }
        }
      },
      "PlayerAccountAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "PlayerAccountAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlayerAccountClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "PlayerAccountClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/PlayerAccountAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/PlayerAccountAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/PlayerAccountClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/PlayerAccountRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerAccountConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountLoginAMR"
            }
          }
        }
      },
      "PlayerAccountConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "PlayerAccountConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlayerAccountConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlayerAccountConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/PlayerAccountConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "PlayerAccountEligibilityResponse": {
        "type": "object",
        "properties": {
          "eligibleAfter": {
            "type": "number",
            "format": "int64"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGameNameAndTagLine": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGenerateTaglineInput": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/PlayerAccountAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAccountGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlayerAccountHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "PlayerAccountHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PlayerAccountHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountHttpCookie"
            }
          }
        }
      },
      "PlayerAccountIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerAccountAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerAccountIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/PlayerAccountClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/PlayerAccountSessionResponse"
          }
        }
      },
      "PlayerAccountLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "PlayerAccountLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "PlayerAccountLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PlayerAccountLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1XboxNameset"
          }
        }
      },
      "PlayerAccountLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV1XboxNameset"
          }
        }
      },
      "PlayerAccountLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PlayerAccountLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "PlayerAccountLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "PlayerAccountLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/PlayerAccountLookupV2XboxNameset"
          }
        }
      },
      "PlayerAccountLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "PlayerAccountLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "PlayerAccountLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "PlayerAccountMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "PlayerAccountMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "PlayerAccountMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "PlayerAccountMfaV1VerifyFactorRequest": {
        "type": "object",
        "properties": {
          "device": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          }
        }
      },
      "PlayerAccountMfaV1VerifyFactorResponse": {
        "type": "object",
        "properties": {
          "device": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/PlayerAccountMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerAccountMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "PlayerAccountOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PlayerAccountPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/PlayerAccountGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/PlayerAccountGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/PlayerAccountGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/PlayerAccountMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/PlayerAccountMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/PlayerAccountTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/PlayerAccountWeGamePartnerCredentials"
          }
        }
      },
      "PlayerAccountPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/PlayerAccountGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/PlayerAccountGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/PlayerAccountGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/PlayerAccountMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/PlayerAccountTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/PlayerAccountWeGamePartnerCredentials"
          }
        }
      },
      "PlayerAccountPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlayerAccountOnlinePlatform"
          }
        }
      },
      "PlayerAccountPlayerAccountPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAccountServiceUrl": {
            "type": "string"
          },
          "promotionBlockTimeDays": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "PlayerAccountPromotionV1AccountDetails": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "tou_agree": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlayerAccountPromotionV1AccountPromotionResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/PlayerAccountPromotionV1AccountPromotionValidationFailures"
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountPromotionV1AccountPromotionValidationFailures": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email_address": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newsletter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tou_agree": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountPromotionV1BlockListResponse": {
        "type": "object",
        "properties": {
          "blockList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountPromotionV1BlockedPuuid"
            }
          }
        }
      },
      "PlayerAccountPromotionV1BlockedPuuid": {
        "type": "object",
        "properties": {
          "blockExpiryDate": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountPromotionV1EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "number",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          },
          "isTooYoung": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountPromotionV1UpdateableFieldsResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/PlayerAccountImplicitGrantModeTelemetryContext"
          }
        }
      },
      "PlayerAccountRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerAccountTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/PlayerAccountTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerAccountTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "PlayerAccountRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "PlayerAccountRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PlayerAccountRegionsV1AvailableRegionsResponse": {
        "type": "object",
        "properties": {
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isReady": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountRegionsV1EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "isReady": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountRegionsV1RegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/PlayerAccountRegionsV1RegionAssignmentResponseMessage"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountRegionsV1RegionAssignmentResponseMessage": {
        "type": "string",
        "enum": [
          "LOGIN_REQUIRED",
          "SERVER_ERROR",
          "AUTH_REFRESH_FAILED",
          "REGION_ALREADY_ASSIGNED",
          "REGION_EXISTS",
          "REGION_NOT_ALLOWED",
          "BAD_ENTITY_PARAMETER",
          "NO_ERROR"
        ]
      },
      "PlayerAccountSanitizeRequest": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "level": {
            "type": "number",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountSanitizeResponse": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PlayerAccountSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/PlayerAccountAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "PlayerAccountSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerAccountAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlayerAccountMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerAccountSessionResponseType"
          }
        }
      },
      "PlayerAccountSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "PlayerAccountSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAccountStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PlayerAccountTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "PlayerAccountTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountUserFieldChangeDetails": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "new_value": {
            "type": "string"
          },
          "old_value": {
            "type": "string"
          }
        }
      },
      "PlayerAccountUserFieldChangeMessage": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/PlayerAccountUserFieldChangeDetails"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlayerAccountUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "PlayerAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PlayerAccountV1LoginLocationInfo": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "region": {
            "type": "string"
          },
          "timestamp": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerAccountV1PlayerLoginLocationHistory": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountV1LoginLocationInfo"
            }
          },
          "lastUpdated": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAccountV1PlayersLoginLocationHistory": {
        "type": "object",
        "properties": {
          "playersLoginLocationHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountV1PlayerLoginLocationHistory"
            }
          }
        }
      },
      "PlayerAccountV1RequestedPlayersLoginLocationHistory": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAccountVngV1HomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "PlayerAccountVngV1Profile": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "governmentId": {
            "type": "string"
          },
          "governmentIdIssueDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "PlayerAccountVngV1RegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PlayerAccountVngV1SetProfileResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerAccountVngV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_type": {
            "$ref": "#/components/schemas/PlayerAccountvngV1ActionRequired"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerAccountvngV1ProfileField"
            }
          }
        }
      },
      "PlayerAccountVngV1WebUrlRequest": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "PlayerAccountVngV1WebUrlResponse": {
        "type": "object",
        "properties": {
          "web_url": {
            "type": "string"
          }
        }
      },
      "PlayerAccountWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "PlayerAccountvngV1ActionRequired": {
        "type": "string",
        "enum": [
          "None",
          "Registration",
          "PhoneVerification"
        ]
      },
      "PlayerAccountvngV1ProfileField": {
        "type": "string",
        "enum": [
          "name",
          "email",
          "phone",
          "address",
          "governmentId",
          "governmentIdIssueDate",
          "dateOfBirth",
          "eulaAgreement"
        ]
      },
      "PlayerAccountvngV1ProfileVerificationError": {
        "type": "string",
        "enum": [
          "VerificationFailed",
          "TooManyRequests"
        ]
      },
      "PlayerAccountvngV1SendVerificationCodeConfig": {
        "type": "object",
        "properties": {
          "digits": {
            "type": "number",
            "format": "int32"
          },
          "expiresIn": {
            "type": "number",
            "format": "int64"
          },
          "otpToken": {
            "type": "string"
          },
          "retryAfter": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerAccountvngV1SendVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/PlayerAccountvngV1SendVerificationCodeConfig"
          },
          "responseCode": {
            "type": "string"
          }
        }
      },
      "PlayerAccountvngV1SubmitProfileResponse": {
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/PlayerAccountvngV1SubmitProfileResponseCode"
          }
        }
      },
      "PlayerAccountvngV1SubmitProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidEmail",
          "InvalidPhone",
          "InvalidGovernmentId",
          "InvalidDatetime",
          "InvalidName",
          "AgeLimited",
          "PhoneVerificationRequired"
        ]
      },
      "PlayerAccountvngV1VerificationDetails": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          },
          "otpToken": {
            "type": "string"
          }
        }
      },
      "PlayerAccountvngVProfileVerificationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlayerAccountvngV1ProfileVerificationError"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerAffinityAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityAffinityV1AffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityAffinityV2AffinityProductInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerAffinityAccessToken"
          },
          "claims": {
            "$ref": "#/components/schemas/PlayerAffinityIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerAffinityIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityDataSource": {
        "type": "string",
        "enum": [
          "localCache",
          "serverAuthoritative"
        ]
      },
      "PlayerAffinityIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/PlayerAffinityAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityCachedProductAffinity": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityCachedServiceAffinity": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityDataSource": {
        "type": "string",
        "enum": [
          "localCache",
          "serverAuthoritative"
        ]
      },
      "PlayerAffinityPlayerAffinityPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAffinityServiceUrl": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityPluginStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerAffinityPlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityServiceToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityShardInfo": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "shard": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityPlayerAffinityTokenProduct": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerAffinityPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityProductAffinityInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PlayerAffinityDataSource"
          },
          "product": {
            "type": "string"
          },
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PlayerAffinityServiceAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerBehaviorTokenAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerBehaviorTokenPbTokenUpdatedNotification": {
        "type": "object",
        "properties": {
          "updateId": {
            "type": "string"
          }
        }
      },
      "PlayerBehaviorTokenPlayerAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerBehaviorTokenPlayerAffinityStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerBehaviorTokenPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesAffinityV1AffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesAffinityV2AffinityProductInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerPreferencesAccessToken"
          },
          "claims": {
            "$ref": "#/components/schemas/PlayerPreferencesIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerPreferencesIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/PlayerPreferencesAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityCachedProductAffinity": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityCachedServiceAffinity": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityDataSource": {
        "type": "string",
        "enum": [
          "localCache",
          "serverAuthoritative"
        ]
      },
      "PlayerPreferencesPlayerAffinityPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAffinityServiceUrl": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityPluginStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityServiceToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityShardInfo": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "shard": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerPreferencesPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerAffinityTokenProduct": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/PlayerPreferencesPlayerAffinityDataSource"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPlayerPreferencesData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesProductAffinityInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesRegionLocale": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          }
        }
      },
      "PlayerPreferencesServiceAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerProductsState": {
        "type": "string",
        "enum": [
          "LoggedOut",
          "WaitingForProducts",
          "Complete"
        ]
      },
      "PlayerReportingAuthorization": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerReportingGapsMailboxUpdated": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerReportingLocalizedReporterFeedbackMessage": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "recipientType": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PlayerReportingMail": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "int64"
          },
          "mailId": {
            "type": "string"
          },
          "mailType": {
            "$ref": "#/components/schemas/PlayerReportingMailType"
          },
          "message": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerReportingMailState"
          }
        }
      },
      "PlayerReportingMailState": {
        "type": "string",
        "enum": [
          "NEW",
          "READ",
          "ACKNOWLEDGED"
        ]
      },
      "PlayerReportingMailType": {
        "type": "string",
        "enum": [
          "STANDARD",
          "ACK_REQUIRED"
        ]
      },
      "PlayerReportingMailboxStatusUpdated": {
        "type": "object",
        "properties": {
          "lastUpdateReceived": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerReportingPlayerAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerReportingPlayerAffinityStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerReportingPlayerAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          }
        }
      },
      "PlayerReportingPlayerReport": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "match_token": {
            "type": "string"
          },
          "offender_puuid": {
            "type": "string"
          }
        }
      },
      "PlayerReportingPlayerReportV2": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "offenderId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          }
        }
      },
      "PlayerReportingPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "PlayerReportingPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlayerReportingRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "PlayerReportingReporterFeedback": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "recipientType": {
            "type": "string"
          }
        }
      },
      "PlayerReportingReporterFeedbackAcknowledgedEvent": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "recipientType": {
            "type": "string"
          },
          "reportCategory": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerReportingReporterFeedbackDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "recipientType": {
            "type": "string"
          }
        }
      },
      "PlayerReportingReporterFeedbackReceivedEvent": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "recipientType": {
            "type": "string"
          },
          "reportCategory": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerReportingRequestMailParameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "format": "int64"
          },
          "includedStates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerReportingMailState"
            }
          },
          "startIndex": {
            "type": "number",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerReportingUnsignedConversationContext": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string"
          },
          "conversationType": {
            "type": "string"
          }
        }
      },
      "PlayerReportingUnsignedPlayerReportV1": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "conversationContext": {
            "$ref": "#/components/schemas/PlayerReportingUnsignedConversationContext"
          },
          "location": {
            "type": "string"
          },
          "offenderId": {
            "type": "string"
          },
          "unstructuredContext": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlayerReportingUpdateMailStateRequest": {
        "type": "object",
        "properties": {
          "mailId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerReportingMailState"
          }
        }
      },
      "PlayerSessionLifecycleAcceptance": {
        "type": "string",
        "enum": [
          "WaitingForAllServiceData",
          "AcceptanceRequired",
          "Accepted"
        ]
      },
      "PlayerSessionLifecycleAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleAgeRestriction": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleAppleAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "invalid_credentials_type",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_authorization_error_failed",
          "as_authorization_error_invalid_response",
          "as_authorization_error_not_handled",
          "as_authorization_error_unknown",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "PlayerSessionLifecycleAppleAuthorizationOpenConnectId": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleAppleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleAppleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAppleAuthorizationError"
          },
          "open_connect_id": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAppleAuthorizationOpenConnectId"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAppleAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleAppleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "open_connect_id",
          "code_exchange"
        ]
      },
      "PlayerSessionLifecycleAuthIntentType": {
        "type": "string",
        "enum": [
          "SignIn",
          "CreateAccount"
        ]
      },
      "PlayerSessionLifecycleAuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleAuthResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticateGameCenterInput": {
        "type": "object",
        "properties": {
          "gamecenter": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameCenterInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticateNintendoInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "nintendo": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticatePlaystationInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticateXboxInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "xbox": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxInput"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticationResponse": {
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthResponseDetails"
          },
          "cluster": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "healup": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleHealupResponseDetails"
          },
          "kr-id-verification": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleKRIdVerificationResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSuccessResponseDetails"
          },
          "suuid": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleResponseType"
          }
        }
      },
      "PlayerSessionLifecycleAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "PlayerSessionLifecycleAuthorizationClassicLogin": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "facebook_app_id": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "PlayerSessionLifecycleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "PlayerSessionLifecycleBuildInfo": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string"
          },
          "branchFull": {
            "type": "string"
          },
          "codeBuildId": {
            "type": "number",
            "format": "int32"
          },
          "contentBuildId": {
            "type": "number",
            "format": "int32"
          },
          "gameBranch": {
            "type": "string"
          },
          "gameBranchFull": {
            "type": "string"
          },
          "gameDataBuildId": {
            "type": "number",
            "format": "int32"
          },
          "patchline": {
            "type": "string"
          },
          "patchlineVisibleName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleClientConfig": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "params": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleConfigParams"
          },
          "updateTime": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerSessionLifecycleConfigNamespaceUpdate": {
        "type": "object",
        "properties": {
          "player": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "public": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleConfigParams": {
        "type": "object",
        "properties": {
          "appName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleConfigType"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleConfigReadinessEnum": {
        "type": "string",
        "enum": [
          "NotReady",
          "Ready",
          "Disabled",
          "EnvironmentMismatch"
        ]
      },
      "PlayerSessionLifecycleConfigStatus": {
        "type": "object",
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleConfigReadinessEnum"
          },
          "updateId": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerSessionLifecycleConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "PlayerSessionLifecycleConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleConnectivityValue"
          }
        }
      },
      "PlayerSessionLifecycleConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "PlayerSessionLifecycleDataPaths": {
        "type": "object",
        "properties": {
          "configRoot": {
            "type": "string"
          },
          "dataRoot": {
            "type": "string"
          },
          "localSettingsPath": {
            "type": "string"
          },
          "userDataRoot": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleEntitlementsTokenResourceV2": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleFacebookAuthorizationError": {
        "type": "string",
        "enum": [
          "missing_credentials",
          "serialization_failed",
          "fbsdk_login_error_password_changed",
          "fbsdk_login_error_user_checkpointed",
          "fbsdk_login_error_user_mismatch",
          "fbsdk_login_error_unconfirmed_user",
          "fbsdk_login_error_system_account_app_disabled",
          "fbsdk_login_error_system_account_unavailable",
          "fbsdk_login_error_bad_challenge_string",
          "fbsdk_login_error_invalid_id_token",
          "fbsdk_login_error_missing_access_token",
          "fbsdk_login_error_unknown",
          "fbsdk_init_error",
          "unknown_java_error",
          "unknown"
        ]
      },
      "PlayerSessionLifecycleFacebookAuthorizationParameters": {
        "type": "object",
        "properties": {
          "force_use_classic_mode": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleFacebookAuthorizationResponse": {
        "type": "object",
        "properties": {
          "classic_login": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthorizationClassicLogin"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleFacebookAuthorizationError"
          },
          "id_token": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleFacebookAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleFacebookAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "id_token",
          "classic_login"
        ]
      },
      "PlayerSessionLifecycleGameCenterAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown"
        ]
      },
      "PlayerSessionLifecycleGameCenterAuthorizationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameCenterAuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameCenterToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameCenterAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleGameCenterAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "success"
        ]
      },
      "PlayerSessionLifecycleGameCenterInput": {
        "type": "object",
        "properties": {
          "bundle_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "public_key_url": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleGameCenterToken": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleGameNameAndTagLine": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleGameSessionV1ClusterList": {
        "type": "object",
        "properties": {
          "clusters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleGameSessionV1GameSessionId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleGameSessionV1GameSessionMessage": {
        "type": "string",
        "enum": [
          "no_error",
          "player_banned",
          "account_restricted",
          "account_locked",
          "queue_busy",
          "bad_entity_parameter",
          "missing_entitlements",
          "bad_authorization_param",
          "service_create_session_failure",
          "service_refresh_session_failure",
          "service_delete_session_failure",
          "internal",
          "unknown"
        ]
      },
      "PlayerSessionLifecycleGameSessionV1GameSessionRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "clientName": {
            "type": "string"
          },
          "cluster": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "rsoClientId": {
            "type": "string"
          },
          "shouldAttemptQueueBypass": {
            "type": "boolean"
          },
          "shouldFetchSessionToken": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleGameSessionV1GameSessionResponse": {
        "type": "object",
        "properties": {
          "bypassQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "bypassQueueToken": {
            "type": "string"
          },
          "errorId": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameSessionV1GameSessionMessage"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "loginQueueClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "loginQueueToken": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "queueIsOpen": {
            "type": "boolean"
          },
          "queuePosition": {
            "type": "number",
            "format": "int64"
          },
          "sessionClaims": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "sessionToken": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameSessionV1GameSessionState"
          },
          "waitTime": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerSessionLifecycleGameSessionV1GameSessionState": {
        "type": "string",
        "enum": [
          "initializing",
          "fetching_bypass",
          "joining_queue",
          "in_queue",
          "login_created",
          "creating_session",
          "connected",
          "deleting_session",
          "deleting_session_taken_over",
          "failed"
        ]
      },
      "PlayerSessionLifecycleGamepassResponseDetails": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "number",
            "format": "int32"
          },
          "remaining": {
            "type": "number",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGamepassStatus"
          }
        }
      },
      "PlayerSessionLifecycleGamepassStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "NONE"
        ]
      },
      "PlayerSessionLifecycleGoogleAuthorizationError": {
        "type": "string",
        "enum": [
          "unknown",
          "sign_in_currently_in_progress",
          "sign_in_failed",
          "developer_error",
          "internal_error",
          "network_error",
          "invalid_account",
          "missing_result",
          "missing_code",
          "aswebauthentication_session_presentation_context_invalid",
          "aswebauthentication_session_presentation_context_not_provided",
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "unknown_aswebauthentication_session_error",
          "unknown_sfauthentication_session_error",
          "unknown_java_error"
        ]
      },
      "PlayerSessionLifecycleGoogleAuthorizationParameters": {
        "type": "object",
        "properties": {
          "googleClientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleGoogleAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGoogleAuthorizationError"
          },
          "idToken": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGoogleAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleGoogleAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "cancelled",
          "error",
          "token",
          "code"
        ]
      },
      "PlayerSessionLifecycleHealupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlayerSessionLifecycleHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleIdToken"
          }
        }
      },
      "PlayerSessionLifecycleInitiateLoginSessionRequest": {
        "type": "object",
        "properties": {
          "authIntent": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthIntentType"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "loginQueueRegion": {
            "type": "string"
          },
          "loginStrategy": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleLoginStrategyType"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "requireLoginQueue": {
            "type": "boolean"
          },
          "requireLolRegion": {
            "type": "boolean"
          },
          "requireRiotID": {
            "type": "boolean"
          },
          "requireVNG": {
            "type": "boolean"
          },
          "requiredEntitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleKRIdVerificationResponseDetails": {
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleLaunchRestrictions": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclerestrictionData"
          },
          "scope": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleLoginPersistenceConfig": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleLoginPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ]
      },
      "PlayerSessionLifecycleLoginStatus": {
        "type": "object",
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleLoginPhase"
          }
        }
      },
      "PlayerSessionLifecycleLoginStrategyType": {
        "type": "string",
        "enum": [
          "riot_identity",
          "google",
          "gamecenter",
          "facebook",
          "apple",
          "nintendo",
          "xbox",
          "playstation",
          "okta",
          "qrcode"
        ]
      },
      "PlayerSessionLifecycleLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorMethod"
          }
        }
      },
      "PlayerSessionLifecycleMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "PlayerSessionLifecycleMultifactorResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "known_value": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountAuthorization": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountErrorCode"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountErrorCode": {
        "type": "string",
        "enum": [
          "user_canceled_authotization",
          "user_canceled_login"
        ]
      },
      "PlayerSessionLifecycleNintendoAccountGetNetworkServiceAccountParameters": {
        "type": "object",
        "properties": {
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountNetworkServiceAccount": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountNetworkServiceAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountNetworkServiceAccount"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountErrorCode"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "UserCanceledAuthorization",
          "UserCanceledLogIn",
          "EmptyResponse",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "PlayerSessionLifecycleNintendoAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleNintendoAccountV2AuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleNintendoAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "PlayerSessionLifecycleNintendoAccountV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "idToken": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleNintendoInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "nsa_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleOktaAuthorizationError": {
        "type": "string",
        "enum": [
          "invalid_redirect_path",
          "invalid_redirect_schema",
          "redirect_missing_query_parameters",
          "missing_result",
          "missing_code",
          "as_web_authentication_session_presentation_context_invalid",
          "as_web_authentication_session_presentation_context_not_provided",
          "unknown_as_web_authentication_session_error",
          "unknown_java_error",
          "unknown_sf_authentication_session_error",
          "unknown"
        ]
      },
      "PlayerSessionLifecycleOktaAuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleOktaAuthorizationResponse": {
        "type": "object",
        "properties": {
          "code_exchange": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleOktaAuthorizationError"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleOktaAuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleOktaAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "none",
          "canceled",
          "error",
          "code_exchange"
        ]
      },
      "PlayerSessionLifecycleOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PlayerSessionLifecyclePersistence": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePersistentAuthorizationOutcome": {
        "type": "string",
        "enum": [
          "None",
          "PrivateSettingsMissing",
          "PrivateSettingsCleared",
          "NoRefreshToken",
          "NoIdToken",
          "ScopeMismatch",
          "ClaimsMismatch",
          "Success"
        ]
      },
      "PlayerSessionLifecyclePlatformLoginPersistenceConfig": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecyclePlatformLoginPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "not_logged_in",
          "logged_in"
        ]
      },
      "PlayerSessionLifecyclePlatformLoginStatus": {
        "type": "object",
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlatformLoginPhase"
          }
        }
      },
      "PlayerSessionLifecyclePlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleOnlinePlatform"
          }
        }
      },
      "PlayerSessionLifecyclePlayerAffinityCachedProductAffinity": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlayerAffinityCachedServiceAffinity": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlayerAffinityPluginStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecyclePlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "product": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlayerAffinityServiceToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlayerSessionState": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAccessToken"
          },
          "actionRequired": {
            "type": "boolean"
          },
          "availableAccountCreationStrategies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availableLoginStrategies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleInitiateLoginSessionRequest"
          },
          "errorCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "gameSessionId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleIdToken"
          },
          "loginCountry": {
            "type": "string"
          },
          "loginState": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlayerSessionStateType"
          },
          "persistence": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePersistence"
          },
          "riotID": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleGameNameAndTagLine"
          },
          "suggestedActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleSuggestedAction"
            }
          },
          "userInfo": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "userInfoRaw": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlayerSessionStateType": {
        "type": "string",
        "enum": [
          "PendingInitialization",
          "PendingPlatformUser",
          "PendingClientConfigData",
          "Initializing",
          "PendingClientId",
          "PendingPersistenceInitialization",
          "RestoreAuthorization",
          "PendingCreateAuthorization",
          "PendingAuthIntent",
          "PendingLoginStrategyData",
          "PendingLoginStrategy",
          "PendingCreateAccountStrategy",
          "PendingSignInStrategy",
          "GameUpdateRequired",
          "PendingPlatformAuthorizationConsent",
          "PendingProviderCredentials",
          "PlatformAgeRestricted",
          "PendingAuthentication",
          "PendingKRIdVerification",
          "PendingSignup",
          "SignupAgeRestricted",
          "PendingHealup",
          "PendingMultifactor",
          "MultifactorChallengeDenied",
          "LoginTokenExchange",
          "PendingForget",
          "PendingConsent",
          "PendingEulaData",
          "PendingEulaAcceptance",
          "PendingGamepassStatus",
          "PendingRiotIDData",
          "PendingRiotID",
          "PendingVNGProfileData",
          "PendingVNGProfile",
          "PendingLolRegionSelectionData",
          "PendingLolRegionSelection",
          "PendingProductLaunchRestrictionData",
          "ProductLaunchRestricted",
          "PendingProductAgeRestrictionData",
          "ProductAgeRestricted",
          "PendingAccountEntitlementData",
          "MissingAccountEntitlement",
          "PendingAffinityData",
          "PendingLoginQueueData",
          "PendingLoginQueueBypass",
          "PendingLoginQueue",
          "PendingGameSession",
          "LoginQueueBusy",
          "GameSessionTakenOver",
          "Authorized",
          "Error"
        ]
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorization": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "authorization_consent": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountErrorCode"
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountConfig": {
        "type": "object",
        "properties": {
          "enable_setting_persistence": {
            "type": "boolean"
          },
          "require_user_confirmation": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ]
      },
      "PlayerSessionLifecyclePlaystationAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NotSignedUp",
          "Logout",
          "LatestSystemSoftwareExist",
          "ClientIdEmpty",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "PlayerSessionLifecyclePlaystationAccountV2AuthorizationNativeCode": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountV2AuthorizationError"
          },
          "nativeCode": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountV2AuthorizationNativeCode"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePlaystationAccountV2AuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecyclePlaystationAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "NativeCode"
        ]
      },
      "PlayerSessionLifecyclePlaystationInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "authorization_consent": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePluginConfigResponse": {
        "type": "object",
        "properties": {
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleAuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclePremiumStatus": {
        "type": "object",
        "properties": {
          "is_premium": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleProductAffinityInput": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "PlayerSessionLifecycleReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRegionElectionV1AvailableRegions": {
        "type": "object",
        "properties": {
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isReady": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleRegionElectionV1EligibilityResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "isReady": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleRegionElectionV1RegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleRegionElectionV1RegionAssignmentResponseMessage"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleRegionElectionV1RegionAssignmentResponseMessage": {
        "type": "string",
        "enum": [
          "LOGIN_REQUIRED",
          "SERVER_ERROR",
          "AUTH_REFRESH_FAILED",
          "REGION_ALREADY_ASSIGNED",
          "REGION_EXISTS",
          "REGION_NOT_ALLOWED",
          "BAD_ENTITY_PARAMETER",
          "NO_ERROR"
        ]
      },
      "PlayerSessionLifecycleResponseType": {
        "type": "string",
        "enum": [
          "auth",
          "healup",
          "kr-id-verification",
          "signup",
          "multifactor",
          "gamepass",
          "success",
          "error"
        ]
      },
      "PlayerSessionLifecycleRiotClientAuthAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRiotClientAuthAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRiotClientAuthIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleRiotClientAuthAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleServiceAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleSession": {
        "type": "object",
        "properties": {
          "isInternal": {
            "type": "boolean"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSessionState"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSessionResponseType"
          }
        }
      },
      "PlayerSessionLifecycleSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "PlayerSessionLifecycleSessionRestoreResult": {
        "type": "string",
        "enum": [
          "Pending",
          "RetryableFailure",
          "Failure",
          "Success"
        ]
      },
      "PlayerSessionLifecycleSessionState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "PlayerSessionLifecycleSessionsUpdate": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleSession"
            }
          },
          "updateType": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleUpdateType"
          }
        }
      },
      "PlayerSessionLifecycleSignupLinkDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggested": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlayerSessionLifecycleSignupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSignupLinkDetails"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "PlayerSessionLifecycleSuccessResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "is_console_link_session": {
            "type": "boolean"
          },
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleSuggestedAction": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleTelemetrySessionRestoreResultData": {
        "type": "object",
        "properties": {
          "maxDurationBetweenRestores": {
            "type": "number",
            "format": "int64"
          },
          "persistedDataOutcome": {
            "$ref": "#/components/schemas/PlayerSessionLifecyclePersistentAuthorizationOutcome"
          },
          "refreshTokenWriteCount": {
            "type": "number",
            "format": "int64"
          },
          "refreshTokensSessionId": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleSessionRestoreResult"
          },
          "timeSinceCreated": {
            "type": "number",
            "format": "int64"
          },
          "timeSinceLastRestore": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerSessionLifecycleTokenV2": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleRiotClientAuthAuthorization"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleUpdateAuthIntentRequest": {
        "type": "object",
        "properties": {
          "authIntent": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleAuthIntentType"
          }
        }
      },
      "PlayerSessionLifecycleUpdateLoginStrategyRequest": {
        "type": "object",
        "properties": {
          "loginStrategy": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleLoginStrategyType"
          }
        }
      },
      "PlayerSessionLifecycleUpdateType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "PlayerSessionLifecycleUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV1ActionRequired": {
        "type": "string",
        "enum": [
          "None",
          "Registration",
          "PhoneVerification"
        ]
      },
      "PlayerSessionLifecycleV1AuthenticateCodeInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleV1AuthenticateFacebookInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "facebook": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1FacebookInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleV1AuthenticateOpenIdConnectInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "open_id": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1OpenIdConnectInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleV1FacebookInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "app_id": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV1OpenIdConnectInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV1Profile": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "governmentId": {
            "type": "string"
          },
          "governmentIdIssueDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV1ProfileField": {
        "type": "string",
        "enum": [
          "name",
          "email",
          "phone",
          "address",
          "governmentId",
          "governmentIdIssueDate",
          "dateOfBirth",
          "eulaAgreement"
        ]
      },
      "PlayerSessionLifecycleV1ProfileVerificationError": {
        "type": "string",
        "enum": [
          "VerificationFailed",
          "TooManyRequests"
        ]
      },
      "PlayerSessionLifecycleV1SendVerificationCodeConfig": {
        "type": "object",
        "properties": {
          "digits": {
            "type": "number",
            "format": "int32"
          },
          "expiresIn": {
            "type": "number",
            "format": "int64"
          },
          "otpToken": {
            "type": "string"
          },
          "retryAfter": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlayerSessionLifecycleV1SendVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1SendVerificationCodeConfig"
          },
          "responseCode": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1ActionRequired"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerSessionLifecycleV1ProfileField"
            }
          }
        }
      },
      "PlayerSessionLifecycleV1SubmitProfileResponse": {
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1SubmitProfileResponseCode"
          }
        }
      },
      "PlayerSessionLifecycleV1SubmitProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidEmail",
          "InvalidPhone",
          "InvalidGovernmentId",
          "InvalidDatetime",
          "InvalidName",
          "AgeLimited",
          "PhoneVerificationRequired"
        ]
      },
      "PlayerSessionLifecycleV1VerificationDetails": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          },
          "otpToken": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NoDefaultUser",
          "EmptyResponse",
          "FailedToGetRsoAuthenticatorUrl",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError",
          "TooYoung",
          "ContentUpdateRequired"
        ]
      },
      "PlayerSessionLifecycleV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV2AuthorizationResponseType"
          }
        }
      },
      "PlayerSessionLifecycleV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "PlayerSessionLifecycleV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleVProfileVerificationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleV1ProfileVerificationError"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleWebLinkingStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "PENDING",
          "EXPIRED",
          "COMPLETED"
        ]
      },
      "PlayerSessionLifecycleWebLinkingStatusResponse": {
        "type": "object",
        "properties": {
          "login_token": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleWebLinkingStatus"
          },
          "ttl": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlayerSessionLifecycleXboxAccountAgeGroup": {
        "type": "string",
        "enum": [
          "child",
          "teen",
          "adult"
        ]
      },
      "PlayerSessionLifecycleXboxAccountAuthorization": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecycleXboxAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "authenticatorUrl": {
            "type": "string"
          },
          "minimumAgeGroup": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxAccountAgeGroup"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "PlayerSessionLifecycleXboxAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlayerSessionLifecycleXboxAccountErrorCode"
          }
        }
      },
      "PlayerSessionLifecycleXboxAccountErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "no_default_user",
          "too_young",
          "content_update_required"
        ]
      },
      "PlayerSessionLifecycleXboxInput": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "PlayerSessionLifecyclerestrictionData": {
        "type": "object",
        "properties": {
          "expirationMillis": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "PlaystationAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountAuthorization": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "authorization_consent": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlaystationAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/PlaystationAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlaystationAccountErrorCode"
          }
        }
      },
      "PlaystationAccountConfig": {
        "type": "object",
        "properties": {
          "enable_setting_persistence": {
            "type": "boolean"
          },
          "require_user_confirmation": {
            "type": "boolean"
          }
        }
      },
      "PlaystationAccountErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ]
      },
      "PlaystationAccountOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "PlaystationAccountPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/PlaystationAccountOnlinePlatform"
          }
        }
      },
      "PlaystationAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlaystationAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountPremiumStatus": {
        "type": "object",
        "properties": {
          "is_premium": {
            "type": "boolean"
          }
        }
      },
      "PlaystationAccountUser": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "number",
            "format": "int64"
          },
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/PlaystationAccountErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PlaystationAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "PlaystationAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "PlaystationAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/PlaystationAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/PlaystationAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NotSignedUp",
          "Logout",
          "LatestSystemSoftwareExist",
          "ClientIdEmpty",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError"
        ]
      },
      "PlaystationAccountV2AuthorizationNativeCode": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "PlaystationAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlaystationAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/PlaystationAccountV2AuthorizationError"
          },
          "nativeCode": {
            "$ref": "#/components/schemas/PlaystationAccountV2AuthorizationNativeCode"
          },
          "type": {
            "$ref": "#/components/schemas/PlaystationAccountV2AuthorizationResponseType"
          }
        }
      },
      "PlaystationAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "NativeCode"
        ]
      },
      "PluginDescriptionResource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "riotMeta": {
            "$ref": "#/components/schemas/PluginMetadataResource"
          },
          "pluginDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PluginLcdsEvent": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "subtopic": {
            "type": "string"
          },
          "typeName": {
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "PluginLcdsResponse": {
        "type": "object",
        "properties": {
          "typeName": {
            "type": "string"
          },
          "body": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "PluginManagerResource": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/PluginManagerState"
          }
        }
      },
      "PluginManagerState": {
        "type": "string",
        "enum": [
          "NotReady",
          "PluginsInitialized"
        ]
      },
      "PluginMetadataResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "app": {
            "type": "string"
          },
          "feature": {
            "type": "string"
          },
          "hasBundledAssets": {
            "type": "boolean"
          },
          "globalAssetBundles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "perLocaleAssetBundles": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "implements": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "threading": {
            "$ref": "#/components/schemas/PluginThreadingModel"
          }
        }
      },
      "PluginRegionLocaleChangedEvent": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "PluginResource": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "supertype": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "app": {
            "type": "string"
          },
          "feature": {
            "type": "string"
          },
          "dynLibFileName": {
            "type": "string"
          },
          "dynLibPath": {
            "type": "string"
          },
          "threadingModel": {
            "type": "string"
          },
          "isDynamicLibraryLoaded": {
            "type": "boolean"
          },
          "isDynamicLibraryInited": {
            "type": "boolean"
          },
          "externalUri": {
            "type": "string"
          },
          "assetBundleNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mountedAssetBundles": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "orderDynamicLibraryLoaded": {
            "type": "number",
            "format": "int32"
          },
          "orderDynamicLibraryInited": {
            "type": "number",
            "format": "int32"
          },
          "orderWADFileMounted": {
            "type": "number",
            "format": "int32"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginResourceContract"
            }
          },
          "implementedContracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginResourceContract"
            }
          }
        }
      },
      "PluginResourceContract": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          }
        }
      },
      "PluginResourceEvent": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          },
          "eventType": {
            "$ref": "#/components/schemas/PluginResourceEventType"
          },
          "data": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "PluginResourceEventType": {
        "type": "string",
        "enum": [
          "Create",
          "Update",
          "Delete"
        ]
      },
      "PluginServiceError": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "version": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PluginServiceProxyResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "methodName": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "PluginState": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpToDateStatus"
          },
          "version": {
            "type": "string"
          },
          "restartRequired": {
            "type": "boolean"
          }
        }
      },
      "PluginThreadingModel": {
        "type": "string",
        "enum": [
          "dedicated",
          "sequential",
          "concurrent",
          "parallel"
        ]
      },
      "PreparePermissionsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PrivacyPrivacySettings": {
        "type": "object",
        "properties": {
          "canRequestTrackingPermission": {
            "type": "boolean"
          },
          "canUseTracking": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/PrivacyTrackingPermissionRequestState"
          }
        }
      },
      "PrivacyTrackingPermissionRequestState": {
        "type": "string",
        "enum": [
          "Unrequested",
          "Requesting",
          "Completed"
        ]
      },
      "PrivateSettingsOperationResult": {
        "type": "string",
        "enum": [
          "Success",
          "FailureOnSecureOperation",
          "Failure"
        ]
      },
      "PrivateSettingsOperationType": {
        "type": "string",
        "enum": [
          "Save",
          "Load",
          "ConfigChange",
          "Delete"
        ]
      },
      "PrivateSettingsTelemetryContext": {
        "type": "object",
        "properties": {
          "mismatchOnDataLoad": {
            "type": "boolean"
          },
          "operationResult": {
            "$ref": "#/components/schemas/PrivateSettingsOperationResult"
          },
          "operationType": {
            "$ref": "#/components/schemas/PrivateSettingsOperationType"
          },
          "rolloutStage": {
            "type": "string"
          }
        }
      },
      "ProcessControlProcess": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "restart-countdown-seconds": {
            "type": "number",
            "format": "double"
          },
          "pid": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ProductIntegrationAppRepairApplyRequest": {
        "type": "object",
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationRepairCode"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationAppUpdateApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "ProductIntegrationAppUpdateStatusFile": {
        "type": "object",
        "properties": {
          "productSessionId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ProductIntegrationProductIntegrationAppUpdateStatus"
          }
        }
      },
      "ProductIntegrationDebugAppUpdateStatus": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "ProductIntegrationDepsAppRepairApplyRequest": {
        "type": "object",
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationDepsRepairCode"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationDepsAppUpdateApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationDepsAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "ProductIntegrationDepsRepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed"
        ]
      },
      "ProductIntegrationDetachedSession": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "pid": {
            "type": "number",
            "format": "int32"
          },
          "productId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationHeartbeatFile": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "source": {
            "$ref": "#/components/schemas/ProductIntegrationDetachedSession"
          }
        }
      },
      "ProductIntegrationLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationLocaleUpdate": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationPatchlineMetadata": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "locale_data": {
            "$ref": "#/components/schemas/ProductIntegrationLocaleDataResource"
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductIntegrationProductIntegrationAppRepairBody": {
        "type": "object",
        "properties": {
          "repairCode": {
            "$ref": "#/components/schemas/ProductIntegrationRepairCode"
          }
        }
      },
      "ProductIntegrationProductIntegrationAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "ProductIntegrationProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationRepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed"
        ]
      },
      "ProductIntegrationSettingsToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ProductIntegrationSettingsTokenRequest": {
        "type": "object",
        "properties": {
          "extraSettings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "productSessionId": {
            "type": "string"
          },
          "rsoClaims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductIntegrationSignoutPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "Disallowed",
          "DisallowedOtherProducts"
        ]
      },
      "ProductLauncherAgeRestriction": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "ProductLauncherBuildInfo": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          }
        }
      },
      "ProductLauncherDataStoreDataPaths": {
        "type": "object",
        "properties": {
          "userDataRoot": {
            "type": "string"
          }
        }
      },
      "ProductLauncherDataStoreDefaultProduct": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executable": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "relative_path": {
            "type": "string"
          }
        }
      },
      "ProductLauncherDataStorePartnerProduct": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executable": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "relative_path": {
            "type": "string"
          }
        }
      },
      "ProductLauncherDetachedSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "pid": {
            "type": "number",
            "format": "int32"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "ProductLauncherLaunchConfiguration": {
        "type": "object",
        "properties": {
          "executable": {
            "type": "string"
          },
          "workingDirectory": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "string"
          },
          "voiceLocale": {
            "type": "string"
          }
        }
      },
      "ProductLauncherLoginStatus": {
        "type": "string",
        "enum": [
          "Authenticated",
          "NotAuthenticated",
          "AccountNotLinked",
          "MismatchedPuuid",
          "NoXToken",
          "XbgpDisabled"
        ]
      },
      "ProductLauncherLoginStatusResponse": {
        "type": "object",
        "properties": {
          "xToken": {
            "type": "string"
          },
          "loginToken": {
            "type": "string"
          },
          "xboxAccountPuuid": {
            "type": "string"
          },
          "rsoPuuid": {
            "type": "string"
          },
          "userHash": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ProductLauncherLoginStatus"
          }
        }
      },
      "ProductLauncherPatchlineResource": {
        "type": "object",
        "properties": {
          "release_id": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "install_full_path": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rogue_process_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          }
        }
      },
      "ProductLauncherProductPatchlineResource": {
        "type": "object",
        "properties": {
          "patchline": {
            "$ref": "#/components/schemas/ProductLauncherPatchlineResource"
          }
        }
      },
      "ProductLauncherRogueProcessResult": {
        "type": "string",
        "enum": [
          "DidNotTerminate",
          "FailedToTerminate",
          "ProcessTerminated",
          "ProcessWentAway",
          "ProcessWentAwayDuringTerminate"
        ]
      },
      "ProductLauncherSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "patchlineFullName": {
            "type": "string"
          },
          "launchConfiguration": {
            "$ref": "#/components/schemas/ProductLauncherLaunchConfiguration"
          },
          "userAgent": {
            "type": "string"
          },
          "exitReason": {
            "type": "string"
          },
          "exitCode": {
            "type": "number",
            "format": "int64"
          },
          "isInternal": {
            "type": "boolean"
          }
        }
      },
      "ProductLauncherSessionHeartbeat": {
        "type": "object",
        "properties": {
          "sessionTTL": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ProductLauncherVngStatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          }
        }
      },
      "ProductLocalizationConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "ProductLocalizationContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationCookie"
            }
          }
        }
      },
      "ProductLocalizationCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ProductLocalizationPatchlineMetadata": {
        "type": "object",
        "properties": {
          "config_type": {
            "$ref": "#/components/schemas/ProductLocalizationConfigType"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationContentCookies"
            }
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "ProductLocalizationProductLocalizationData": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationCookie"
            }
          },
          "translations_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationTranslationsData"
            }
          }
        }
      },
      "ProductLocalizationProductMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductLocalizationPatchlineMetadata"
            }
          }
        }
      },
      "ProductLocalizationProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductLocalizationProductMetadata"
            }
          }
        }
      },
      "ProductLocalizationTranslateRequest": {
        "type": "object",
        "properties": {
          "blocking": {
            "type": "boolean"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "ProductLocalizationTranslateResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizationTranslateResult"
            }
          }
        }
      },
      "ProductLocalizationTranslateResult": {
        "type": "object",
        "properties": {
          "found": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ProductLocalizationTranslationsData": {
        "type": "object",
        "properties": {
          "etag": {
            "type": "string"
          },
          "last_query_id": {
            "type": "number",
            "format": "int32"
          },
          "latest_response_id": {
            "type": "number",
            "format": "int32"
          },
          "locale": {
            "type": "string"
          },
          "response_code": {
            "type": "number",
            "format": "int32"
          },
          "translations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ProductMetadataAppStoreUpdateInfo": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "appUrl": {
            "type": "string"
          }
        }
      },
      "ProductMetadataClientProductType": {
        "type": "string",
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ]
      },
      "ProductMetadataConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "ProductMetadataConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "ProductMetadataContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            }
          }
        }
      },
      "ProductMetadataCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ProductMetadataCookieVector": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataCookie"
            }
          }
        }
      },
      "ProductMetadataDebugClientConfigSource": {
        "type": "object",
        "properties": {
          "parseRequired": {
            "type": "boolean"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
            }
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductDefinition"
            }
          },
          "rawConfig": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "ProductMetadataDependency": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "elevate": {
            "type": "boolean"
          },
          "hash": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ProductMetadataDynamicTagHeuristics": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductMetadataDynamicTags": {
        "type": "object",
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/ProductMetadataDynamicTagHeuristics"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductMetadataInstallId": {
        "type": "object",
        "properties": {
          "installId": {
            "type": "string"
          }
        }
      },
      "ProductMetadataLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "ProductMetadataLoginCountry": {
        "type": "object",
        "properties": {
          "login_country": {
            "type": "string"
          }
        }
      },
      "ProductMetadataPatchComponentMetadata": {
        "type": "object",
        "properties": {
          "excludedPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sieveLabels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sieveProductId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductMetadataPatchSetMetadata": {
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataPatchComponentMetadata"
            }
          }
        }
      },
      "ProductMetadataPatchlineConfigurationMetadata": {
        "type": "object",
        "properties": {
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/ProductMetadataAppStoreUpdateInfo"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDependency"
            }
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            }
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchSetMetadata"
            }
          },
          "region_data": {
            "$ref": "#/components/schemas/ProductMetadataRegionDataResource"
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ProductMetadataPatchlineMetadata": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/ProductMetadataProductAlias"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app_store_update_info": {
            "$ref": "#/components/schemas/ProductMetadataAppStoreUpdateInfo"
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/ProductMetadataClientProductType"
          },
          "config_type": {
            "$ref": "#/components/schemas/ProductMetadataConfigType"
          },
          "configuration": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/ProductMetadataConfigurationStatus"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataContentCookies"
            }
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDependency"
            }
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            }
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "full_name": {
            "type": "string"
          },
          "had_install_settings_on_init": {
            "type": "boolean"
          },
          "icon_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale_data": {
            "$ref": "#/components/schemas/ProductMetadataLocaleDataResource"
          },
          "matching_shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "parent_patchline_id": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "patching_metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchSetMetadata"
            }
          },
          "path_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "region_data": {
            "$ref": "#/components/schemas/ProductMetadataRegionDataResource"
          },
          "rogue_process_checklist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rogue_process_whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "shards_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataShardsDataResource"
            }
          },
          "supported_versions": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "theme_manifest": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ProductMetadataPlayerAffinityDataSource": {
        "type": "string",
        "enum": [
          "localCache",
          "serverAuthoritative"
        ]
      },
      "ProductMetadataPlayerAffinityPluginStatus": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "ProductMetadataPlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "product": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ProductMetadataPlayerAffinityDataSource"
          }
        }
      },
      "ProductMetadataProductAlias": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "ProductMetadataProductDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductMetadataProductDefinitionMap": {
        "type": "object",
        "properties": {
          "productDefinitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductDefinition"
            }
          }
        }
      },
      "ProductMetadataProductMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataPatchlineMetadata"
            }
          }
        }
      },
      "ProductMetadataProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataProductMetadata"
            }
          }
        }
      },
      "ProductMetadataPublishState": {
        "type": "string",
        "enum": [
          "NotPublished",
          "Published"
        ]
      },
      "ProductMetadataRegionDataResource": {
        "type": "object",
        "properties": {
          "available_regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_region": {
            "type": "string"
          }
        }
      },
      "ProductMetadataRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "ProductMetadataScdCookie": {
        "type": "object",
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "ProductMetadataScdCookieVector": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataScdCookie"
            }
          }
        }
      },
      "ProductMetadataScdEnabled": {
        "type": "string",
        "enum": [
          "Off",
          "On"
        ]
      },
      "ProductMetadataSecondaryPatchlineMap": {
        "type": "object",
        "properties": {
          "secondaryPatchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProductMetadataSecondaryPatchlineMetadata"
            }
          }
        }
      },
      "ProductMetadataSecondaryPatchlineMetadata": {
        "type": "object",
        "properties": {
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bundles_url": {
            "type": "string"
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMetadataDynamicTags"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ProductMetadataShardsDataResource": {
        "type": "object",
        "properties": {
          "game_shard_zone": {
            "type": "string"
          },
          "valid_shards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProductPatchline": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "ProductPatchlineInfo": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "willAutoLaunch": {
            "type": "boolean"
          }
        }
      },
      "ProductRegistryContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRegistryCookie"
            }
          }
        }
      },
      "ProductRegistryCookie": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "httponly": {
            "type": "boolean"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "ProductRegistryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "launcher_component_id": {
            "type": "string"
          },
          "root_dir": {
            "type": "string"
          },
          "install_full_path": {
            "type": "string"
          },
          "patching_policy": {
            "type": "string"
          },
          "auto_patching_enabled_by_player": {
            "type": "boolean"
          },
          "patching_ask_policy": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/ConfigurationStatus"
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "restart_required": {
            "type": "boolean"
          },
          "vanguard_dependency": {
            "type": "boolean"
          }
        }
      },
      "ProductRegistryProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRegistryPatchline"
            }
          }
        }
      },
      "ProductRegistryProductPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "$ref": "#/components/schemas/ProductRegistryPatchline"
          }
        }
      },
      "ProductSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "isInternal": {
            "type": "boolean"
          },
          "exitReason": {
            "type": "string"
          },
          "exitCode": {
            "type": "number",
            "format": "int64"
          },
          "launchConfiguration": {
            "$ref": "#/components/schemas/LaunchConfiguration"
          }
        }
      },
      "ProductSessionHeartbeatInfo": {
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase"
          },
          "sessionTTL": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ProductSessionLaunchConfiguration": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "executable": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "voiceLocale": {
            "type": "string"
          },
          "workingDirectory": {
            "type": "string"
          }
        }
      },
      "ProductSessionProductPhase": {
        "type": "string",
        "enum": [
          "None",
          "Pending",
          "Idle",
          "Gameplay"
        ]
      },
      "ProductSessionSession": {
        "type": "object",
        "properties": {
          "exitCode": {
            "type": "number",
            "format": "int64"
          },
          "exitReason": {
            "$ref": "#/components/schemas/ProductSessionTerminationReason"
          },
          "isInternal": {
            "type": "boolean"
          },
          "launchConfiguration": {
            "$ref": "#/components/schemas/ProductSessionLaunchConfiguration"
          },
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ProductSessionSessionHeartbeat": {
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/ProductSessionProductPhase"
          },
          "sessionTTL": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ProductSessionTerminationReason": {
        "type": "string",
        "enum": [
          "StillRunning",
          "Interrupt",
          "Exit",
          "Timeout",
          "Unknown"
        ]
      },
      "ProductUpdateScannerAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "ProductUpdateScannerConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "ProductUpdateScannerPatchlineInfo": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "ProductUpdateScannerProductRegistryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "configType": {
            "$ref": "#/components/schemas/ProductUpdateScannerConfigType"
          }
        }
      },
      "ProductUpdateScannerProductRegistryProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductUpdateScannerProductRegistryPatchline"
            }
          }
        }
      },
      "ProductUpdateScannerProductSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "ProductUpdateScannerRefreshRequestOptions": {
        "type": "object",
        "properties": {
          "quickValidation": {
            "type": "boolean"
          }
        }
      },
      "PublicProductsState": {
        "type": "string",
        "enum": [
          "WaitingForProducts",
          "Complete"
        ]
      },
      "PublishingContentData": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishingContentNewsItem"
            }
          },
          "contentGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishingContentMultigameContentGroup"
            }
          }
        }
      },
      "PublishingContentLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "next": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          }
        }
      },
      "PublishingContentMetadata": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "number",
            "format": "int32"
          },
          "totalPages": {
            "type": "number",
            "format": "int32"
          },
          "from": {
            "type": "number",
            "format": "int32"
          },
          "to": {
            "type": "number",
            "format": "int32"
          },
          "numPromotedItems": {
            "type": "number",
            "format": "int32"
          },
          "locale": {
            "type": "string"
          },
          "multigamePromoChannelId": {
            "type": "string"
          },
          "multigameContentGroupId": {
            "type": "string"
          },
          "dateUpdated": {
            "type": "string"
          }
        }
      },
      "PublishingContentMultigameContentGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsFeed": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PublishingContentData"
          },
          "metadata": {
            "$ref": "#/components/schemas/PublishingContentMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/PublishingContentLinks"
          }
        }
      },
      "PublishingContentNewsFeedRequest": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "number",
            "format": "int32"
          },
          "multigamePromoChannelId": {
            "type": "string"
          },
          "multigameContentGroupId": {
            "type": "string"
          },
          "from": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "PublishingContentNewsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/PublishingContentNewsItemProduct"
          },
          "headline": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "featureImage": {
            "$ref": "#/components/schemas/PublishingContentNewsItemFeatureImage"
          },
          "featureVideo": {
            "$ref": "#/components/schemas/PublishingContentNewsItemFeatureVideo"
          },
          "renderType": {
            "type": "string"
          },
          "originalRenderType": {
            "type": "string"
          },
          "renderOptions": {
            "$ref": "#/components/schemas/PublishingContentNewsItemRenderOptions"
          },
          "sendMobilePushNotification": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/PublishingContentNewsItemAction"
          },
          "videoLengthInSeconds": {
            "type": "number",
            "format": "int32"
          },
          "category": {
            "$ref": "#/components/schemas/PublishingContentNewsItemCategory"
          },
          "publishedAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "cms": {
            "$ref": "#/components/schemas/PublishingContentNewsItemCms"
          }
        }
      },
      "PublishingContentNewsItemAction": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "youtubeId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "originalType": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemCms": {
        "type": "object",
        "properties": {
          "stack": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "version": {
            "type": "number",
            "format": "int32"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemFeatureImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "labelColor": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemFeatureVideo": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "PublishingContentNewsItemRenderOptions": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string"
          }
        }
      },
      "RcAuthAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth"
        ]
      },
      "RcAuthAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RcAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RcAuthRSOAuthorizationTrustLevel"
            }
          },
          "clientId": {
            "type": "string"
          }
        }
      },
      "RcAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RcAuthAuthorizationResponseType"
          }
        }
      },
      "RcAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "RcAuthGamepassResponseDetails": {
        "type": "object",
        "properties": {
          "remaining": {
            "type": "number",
            "format": "int32"
          },
          "delay": {
            "type": "number",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/RcAuthGamepassStatus"
          }
        }
      },
      "RcAuthGamepassStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "NONE"
        ]
      },
      "RcAuthLoginRequest": {
        "type": "object",
        "properties": {
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/RcAuthAuthenticationTypeEnum"
          }
        }
      },
      "RcAuthLoginResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RcAuthSessionResponseType"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "RcAuthLoginStatus": {
        "type": "string",
        "enum": [
          "Authenticated",
          "NotAuthenticated",
          "AccountNotLinked",
          "MismatchedPuuid",
          "NoXToken",
          "XbgpDisabled"
        ]
      },
      "RcAuthLoginStatusResponse": {
        "type": "object",
        "properties": {
          "xToken": {
            "type": "string"
          },
          "loginToken": {
            "type": "string"
          },
          "xboxAccountPuuid": {
            "type": "string"
          },
          "rsoPuuid": {
            "type": "string"
          },
          "userHash": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RcAuthLoginStatus"
          }
        }
      },
      "RcAuthRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RcAuthRegionLocale": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "RcAuthRsoAuthenticatorAuthResponse": {
        "type": "object",
        "properties": {
          "gamepass": {
            "$ref": "#/components/schemas/RcAuthGamepassResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/RcAuthSuccessResponseDetails"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "RcAuthSessionResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/RcAuthAuthenticationTypeEnum"
          }
        }
      },
      "RcAuthSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "RcAuthSuccessResponseDetails": {
        "type": "object",
        "properties": {
          "login_token": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "linked": {
            "type": "string"
          },
          "is_console_link_session": {
            "type": "boolean"
          },
          "auth_method": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "RcAuthV1XboxInput": {
        "type": "object",
        "properties": {
          "xsts_token": {
            "type": "string"
          },
          "user_hash": {
            "type": "string"
          }
        }
      },
      "RcAuthV1XboxLogin": {
        "type": "object",
        "properties": {
          "xbox": {
            "$ref": "#/components/schemas/RcAuthV1XboxInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RcInfoRadiatorAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RcInfoRadiatorHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          },
          "cached_home_base_country": {
            "type": "string"
          }
        }
      },
      "RcInfoRadiatorLoginCountry": {
        "type": "object",
        "properties": {
          "login_country": {
            "type": "string"
          }
        }
      },
      "RcInfoRadiatorRegionLocale": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "ReferenceEchoRequest": {
        "type": "object",
        "properties": {
          "echo": {
            "type": "string"
          }
        }
      },
      "ReferenceEchoResponse": {
        "type": "object",
        "properties": {
          "echo": {
            "type": "string"
          }
        }
      },
      "RegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "webLanguage": {
            "type": "string"
          },
          "webRegion": {
            "type": "string"
          }
        }
      },
      "RegisterWatchPathRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "RemotingHelpFormat": {
        "type": "string",
        "enum": [
          "Full",
          "Epytext",
          "Brief",
          "Console"
        ]
      },
      "RemotingPrivilege": {
        "type": "string",
        "enum": [
          "None",
          "User",
          "Admin",
          "Local"
        ]
      },
      "RemotingSerializedFormat": {
        "type": "string",
        "enum": [
          "JSON",
          "YAML",
          "MsgPack"
        ]
      },
      "RepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ]
      },
      "RestrictionLaunchRestrictions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/RestrictionrestrictionData"
          }
        }
      },
      "RestrictionRestrictions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/RestrictionrestrictionData"
          }
        }
      },
      "RestrictionrestrictionData": {
        "type": "object",
        "properties": {
          "expirationMillis": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RiotClientAuthApiAlias": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAccessToken"
          },
          "authenticationType": {
            "type": "string"
          },
          "claims": {
            "$ref": "#/components/schemas/RiotClientAuthApiIdClaims"
          },
          "idToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthIdToken"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiClientDetails": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiHomeBaseCountry": {
        "type": "object",
        "properties": {
          "cached_home_base_country": {
            "type": "string"
          },
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiIdClaims": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/RiotClientAuthApiAlias"
          },
          "acr": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "login_country": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiLoginCountry": {
        "type": "object",
        "properties": {
          "login_country": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiUserInfo": {
        "type": "object",
        "properties": {
          "acct": {
            "$ref": "#/components/schemas/RiotClientAuthApiAlias"
          },
          "country": {
            "type": "string"
          },
          "email_verified": {
            "type": "boolean"
          },
          "lol": {
            "$ref": "#/components/schemas/RiotClientAuthApiUserInfoLol"
          },
          "lol_account": {
            "$ref": "#/components/schemas/RiotClientAuthApiUserInfoSummoner"
          },
          "phone_number_verified": {
            "type": "boolean"
          },
          "player_plocale": {
            "type": "string"
          },
          "preferred_username": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiUserInfoLol": {
        "type": "object",
        "properties": {
          "cpid": {
            "type": "string"
          },
          "ploc": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthApiUserInfoSummoner": {
        "type": "object",
        "properties": {
          "summoner_name": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthRsoAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiotClientAuthRsoAuthAuthorizationTrustLevel"
            }
          }
        }
      },
      "RiotClientAuthRsoAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAuthorizationResponseType"
          }
        }
      },
      "RiotClientAuthRsoAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "unknown_authorization_response",
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "RiotClientAuthRsoAuthAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RiotClientAuthRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "nonce": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RiotClientAuthRsoAuthImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RiotClientAuthRsoAuthIdToken"
          }
        }
      },
      "RiotClientAuthRsoAuthReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "RiotClientAuthRsoAuthUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "RiotClientLifecycleStateBoundState": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "RiotClientLifecycleStatePlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/PlayerAffinityProductToken"
          }
        }
      },
      "RiotClientLifecycleStateRegionLocale": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "RiotFriendsChatFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "type": "number",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "RiotFriendsChatFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiotFriendsChatFriend"
            }
          }
        }
      },
      "RiotFriendsFriendUpdateList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiotFriendsChatFriend"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RiotLoginAuthenticationMethod": {
        "type": "string",
        "enum": [
          "Riot",
          "Google",
          "GameCenter",
          "Facebook",
          "Apple",
          "QQ",
          "Wechat",
          "Wegame"
        ]
      },
      "RiotLoginAuthorizationRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiotLoginRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RiotLoginAuthorizationResponse": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RiotLoginAuthorizationResponseType"
          }
        }
      },
      "RiotLoginAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "authorized"
        ]
      },
      "RiotLoginLoginPersistenceConfig": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RiotLoginLoginPhase": {
        "type": "string",
        "enum": [
          "unknown",
          "pending",
          "not_logged_in",
          "logged_in"
        ]
      },
      "RiotLoginLoginResult": {
        "type": "object",
        "properties": {
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "error": {
            "type": "string"
          },
          "isLoginSuccessful": {
            "type": "boolean"
          },
          "loginType": {
            "$ref": "#/components/schemas/RiotLoginLoginTypeEnum"
          },
          "rsoSignOnAttemptEvent": {
            "$ref": "#/components/schemas/RiotLoginRSOSignOnAttemptEvent"
          }
        }
      },
      "RiotLoginLoginStatus": {
        "type": "object",
        "properties": {
          "persist": {
            "type": "boolean"
          },
          "phase": {
            "$ref": "#/components/schemas/RiotLoginLoginPhase"
          }
        }
      },
      "RiotLoginLoginTypeEnum": {
        "type": "string",
        "enum": [
          "Invalid",
          "NoLongLivedSession",
          "LongLivedSessionRejected",
          "LongLivedSessionAccepted"
        ]
      },
      "RiotLoginOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "RiotLoginOutcome": {
        "type": "string",
        "enum": [
          "Success",
          "PrivateSettingsMissing",
          "PrivateSettingsEmpty",
          "RegionLocaleMissing",
          "RegionMismatch",
          "RegionDataMissing",
          "NoLoginSessionCookies",
          "SetPersistedLoginFailed",
          "AuthRequestFailed",
          "AuthResultNotAuthorized"
        ]
      },
      "RiotLoginPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/RiotLoginOnlinePlatform"
          }
        }
      },
      "RiotLoginProduct": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "RiotLoginRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RiotLoginRSOSignOnAttemptEvent": {
        "type": "object",
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/RiotLoginAuthenticationMethod"
          },
          "errorCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "outcome": {
            "$ref": "#/components/schemas/RiotLoginOutcome"
          },
          "product": {
            "$ref": "#/components/schemas/RiotLoginProduct"
          },
          "signOnAttemptNumber": {
            "type": "number",
            "format": "int32"
          },
          "storedSessionState": {
            "$ref": "#/components/schemas/RiotLoginStoredSessionState"
          }
        }
      },
      "RiotLoginReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "RiotLoginSessionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/RiotLoginSessionResponseType"
          }
        }
      },
      "RiotLoginSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "RiotLoginStoredSessionState": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "Absent"
        ]
      },
      "RiotMessagingServiceAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServiceAcknowledgeBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServiceConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/RiotMessagingServiceConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/RiotMessagingServiceConnectivityValue"
          }
        }
      },
      "RiotMessagingServiceConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "RiotMessagingServiceEntitlementsToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServiceMessage": {
        "type": "object",
        "properties": {
          "ackRequired": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "timestamp": {
            "type": "number",
            "format": "int64"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServicePlayerServiceAffinityInput": {
        "type": "object",
        "properties": {
          "hint": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServicePlayerServiceAffinityToken": {
        "type": "object",
        "properties": {
          "affinity": {
            "type": "string"
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "issuedAt": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RiotMessagingServiceSession": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/RiotMessagingServiceState"
          },
          "token": {
            "type": "string"
          },
          "tokenType": {
            "$ref": "#/components/schemas/RiotMessagingServiceTokenType"
          }
        }
      },
      "RiotMessagingServiceState": {
        "type": "string",
        "enum": [
          "Disconnecting",
          "Disconnected",
          "Connecting",
          "SwitchingServers",
          "Connected"
        ]
      },
      "RiotMessagingServiceTokenType": {
        "type": "string",
        "enum": [
          "Unavailable",
          "Access",
          "Identity"
        ]
      },
      "RiotStatusBuildInfo": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          }
        }
      },
      "RiotStatusConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "RiotStatusCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          },
          "httponly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RiotStatusCookieVector": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiotStatusCookie"
            }
          }
        }
      },
      "RiotStatusPatchlineMetadata": {
        "type": "object",
        "properties": {
          "config_type": {
            "$ref": "#/components/schemas/RiotStatusConfigType"
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        }
      },
      "RiotStatusProductMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RiotStatusPatchlineMetadata"
            }
          }
        }
      },
      "RiotStatusProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RiotStatusProductMetadata"
            }
          }
        }
      },
      "RmsMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "timestamp": {
            "type": "number",
            "format": "int64"
          },
          "payload": {
            "type": "string"
          },
          "ackRequired": {
            "type": "boolean"
          }
        }
      },
      "RnetLifecycleLeagueRegionElectionResource": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "regionAssignmentResponseMessage": {
            "type": "string"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetLifecycleProductContext": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "willAutoLaunch": {
            "type": "boolean"
          }
        }
      },
      "RnetLifecycleRegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RnetLifecycleUxCommand": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/AnyType"
          },
          "showUxIfHidden": {
            "type": "boolean"
          }
        }
      },
      "RnetPftExternalSurveyData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "RnetPftInternalSurveyData": {
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetPftSurveyQuestion"
            }
          }
        }
      },
      "RnetPftSurvey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "survey-id": {
            "type": "string"
          },
          "product-id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "caption": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RnetPftSurveyType"
          },
          "display": {
            "type": "string"
          },
          "internal-survey-data": {
            "$ref": "#/components/schemas/RnetPftInternalSurveyData"
          },
          "external-survey-data": {
            "$ref": "#/components/schemas/RnetPftExternalSurveyData"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetPftSurveyAction"
            }
          }
        }
      },
      "RnetPftSurveyAction": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/RnetPftSurveyActionType"
          },
          "timestamp": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "RnetPftSurveyActionType": {
        "type": "string",
        "enum": [
          "CREATE",
          "EXPAND",
          "SUBMIT",
          "POPOUT",
          "UPDATE",
          "CLOSE"
        ]
      },
      "RnetPftSurveyQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RnetPftSurveyQuestionType"
          },
          "text": {
            "type": "string"
          },
          "response": {
            "type": "string"
          }
        }
      },
      "RnetPftSurveyQuestionType": {
        "type": "string",
        "enum": [
          "FREE_RESPONSE",
          "LIKERT"
        ]
      },
      "RnetPftSurveyRequest": {
        "type": "object",
        "properties": {
          "event-type": {
            "type": "string"
          },
          "product-id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/AnyType"
          }
        }
      },
      "RnetPftSurveyRequestResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "RnetPftSurveyType": {
        "type": "string",
        "enum": [
          "external",
          "internal"
        ]
      },
      "RnetProductRegistryAppImmediateRepairRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryAppRepairApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "repairCode": {
            "$ref": "#/components/schemas/RnetProductRegistryRepairCode"
          }
        }
      },
      "RnetProductRegistryAppUpdateApplyRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryAvailableDiskSpaceRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryBackgroundPatchingState": {
        "type": "string",
        "enum": [
          "Unknown",
          "Disabled",
          "Enabled",
          "Priority"
        ]
      },
      "RnetProductRegistryClientProductType": {
        "type": "string",
        "enum": [
          "riot_game",
          "thunderdome",
          "forge",
          "third_party",
          "special_event",
          "hidden"
        ]
      },
      "RnetProductRegistryCombinedPatchState": {
        "type": "string",
        "enum": [
          "awaiting_headers",
          "unknown",
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "bad_install_path"
        ]
      },
      "RnetProductRegistryConfigType": {
        "type": "string",
        "enum": [
          "public",
          "player"
        ]
      },
      "RnetProductRegistryConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "bundles_url": {
            "type": "string"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistrySecondaryPatchline"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDependency"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDynamicTags"
            }
          },
          "delete_foreign_paths": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "RnetProductRegistryCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryCookies": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "format": "int32"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryCookie"
            }
          }
        }
      },
      "RnetProductRegistryCreateShortcutsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "min_version": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid_exit_codes": {
            "type": "string"
          },
          "elevate": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryDependencyIsInstalledMap": {
        "type": "object",
        "properties": {}
      },
      "RnetProductRegistryDependencyState": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatusPhase"
          }
        }
      },
      "RnetProductRegistryDirectorySizeRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryDynamicTagHeuristics": {
        "type": "object",
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryDynamicTags": {
        "type": "object",
        "properties": {
          "heuristics": {
            "$ref": "#/components/schemas/RnetProductRegistryDynamicTagHeuristics"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "locked_file_info": {
            "$ref": "#/components/schemas/RnetProductRegistryLockedFileInfo"
          }
        }
      },
      "RnetProductRegistryHomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          },
          "cached_home_base_country": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryInstall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryInstallState": {
        "type": "string",
        "enum": [
          "unknown",
          "installed",
          "not_installed"
        ]
      },
      "RnetProductRegistryLifecycleStateAppRepairBinding": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryLifecycleStateAppRepairBindingState"
          }
        }
      },
      "RnetProductRegistryLifecycleStateAppRepairBindingState": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/RnetProductRegistryAppRepairApplyRequest"
          }
        }
      },
      "RnetProductRegistryLifecycleStateHomeBaseCountry": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryHomeBaseCountry"
          }
        }
      },
      "RnetProductRegistryLifecycleStatePlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryPlayerAffinityProductToken"
          }
        }
      },
      "RnetProductRegistryLifecycleStateRegionLocale": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryRegionLocale"
          }
        }
      },
      "RnetProductRegistryLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_locale": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryLockedFileInfo": {
        "type": "object",
        "properties": {
          "process_name": {
            "type": "string"
          },
          "process_id": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetProductRegistryManifestProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetProductRegistryMoveInstallOptions": {
        "type": "object",
        "properties": {
          "new_path": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryMoveInstallStatus": {
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/RnetProductRegistryMoveInstallStatusPhase"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "error_message": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryMoveInstallStatusPhase": {
        "type": "string",
        "enum": [
          "Waiting",
          "InProgress",
          "Cancelling",
          "Succeeded",
          "Cancelled",
          "Failed",
          "Corrupted",
          "Unstarted"
        ]
      },
      "RnetProductRegistryPatchRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "bundlesUrl": {
            "type": "string"
          },
          "allowedHttpFallbackHostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "temp_path": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "repair": {
            "type": "boolean"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryPatchRequestOptions": {
        "type": "object",
        "properties": {
          "createShortcut": {
            "type": "boolean"
          },
          "installPath": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryPatchStatus": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryPatchStatusState"
          },
          "progress": {
            "$ref": "#/components/schemas/RnetProductRegistryProgress"
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/RnetProductRegistryError"
          }
        }
      },
      "RnetProductRegistryPatchStatusState": {
        "type": "string",
        "enum": [
          "updating",
          "out_of_date",
          "up_to_date",
          "not_installed",
          "pending_verify",
          "repairing"
        ]
      },
      "RnetProductRegistryPatchingResource": {
        "type": "object",
        "properties": {
          "install": {
            "$ref": "#/components/schemas/RnetProductRegistryInstall"
          },
          "dependency_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
            }
          },
          "combined_patch_state": {
            "$ref": "#/components/schemas/RnetProductRegistryCombinedPatchState"
          },
          "patch_status": {
            "$ref": "#/components/schemas/RnetProductRegistryPatchStatus"
          },
          "configuration": {
            "$ref": "#/components/schemas/RnetProductRegistryConfigurationResource"
          },
          "patch_requested": {
            "type": "boolean"
          },
          "user_cancelled_patching": {
            "type": "boolean"
          },
          "repair_code": {
            "$ref": "#/components/schemas/RnetProductRegistryRepairCode"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "release_id": {
            "type": "string"
          },
          "path_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "theme_manifest": {
            "type": "string"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRegistryContentCookies"
            }
          },
          "patching_policy": {
            "type": "string"
          },
          "auto_patching_enabled_by_player": {
            "type": "boolean"
          },
          "patching_ask_policy": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "configType": {
            "$ref": "#/components/schemas/RnetProductRegistryConfigType"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "root_dir": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "install_full_path": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/AnyType"
          },
          "product_install_move_status": {
            "$ref": "#/components/schemas/AnyType"
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "patch_status_known": {
            "type": "boolean"
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistrySecondaryPatchlineResource"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDependency"
            }
          },
          "dependencyStates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetProductRegistryDependencyState"
            }
          },
          "locale_data": {
            "$ref": "#/components/schemas/RnetProductRegistryLocaleDataResource"
          },
          "region_data": {
            "$ref": "#/components/schemas/RnetProductRegistryRegionDataResource"
          },
          "shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "rogue_process_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/RnetProductRegistryConfigurationStatus"
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "restart_required": {
            "type": "boolean"
          },
          "vanguard_dependency": {
            "type": "boolean"
          },
          "should_repair": {
            "type": "boolean"
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/RnetProductRegistryProductAlias"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/RnetProductRegistryClientProductType"
          }
        }
      },
      "RnetProductRegistryPatchlineInfo": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryPatchlineMetadata": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "parent_patchline_id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "config_type": {
            "$ref": "#/components/schemas/RnetProductRegistryConfigType"
          },
          "path_name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "icon_path": {
            "type": "string"
          },
          "install_dir": {
            "type": "string"
          },
          "patch_notes": {
            "type": "string"
          },
          "theme_manifest": {
            "type": "string"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRegistryContentCookies"
            }
          },
          "content_paths": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "platform": {
            "type": "string"
          },
          "primary_executable": {
            "type": "string"
          },
          "launcher_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supported_versions": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "configuration": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/RnetProductRegistryConfigurationStatus"
          },
          "patch_notes_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "bundles_url": {
            "type": "string"
          },
          "allowed_http_fallback_hostnames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seed_url": {
            "type": "string"
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDependency"
            }
          },
          "secondary_patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistrySecondaryPatchlineMetadata"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDynamicTags"
            }
          },
          "launchable_on_update_fail": {
            "type": "boolean"
          },
          "delete_foreign_paths": {
            "type": "boolean"
          },
          "excluded_compat_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "launch_disabled": {
            "type": "boolean"
          },
          "disallow_32bit_windows": {
            "type": "boolean"
          },
          "locale_data": {
            "$ref": "#/components/schemas/RnetProductRegistryLocaleDataResource"
          },
          "region_data": {
            "$ref": "#/components/schemas/RnetProductRegistryRegionDataResource"
          },
          "shards_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryShardsDataResource"
            }
          },
          "matching_shards_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "rogue_process_allow_list": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "install_size_bytes": {
            "type": "number",
            "format": "int64"
          },
          "had_install_settings_on_init": {
            "type": "boolean"
          },
          "rso_client_id": {
            "type": "string"
          },
          "rso_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "available_platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/RnetProductRegistryProductAlias"
          },
          "client_product_type": {
            "$ref": "#/components/schemas/RnetProductRegistryClientProductType"
          }
        }
      },
      "RnetProductRegistryPatchlineUpdate": {
        "type": "object",
        "properties": {
          "install_path": {
            "type": "string"
          },
          "patching_policy": {
            "type": "string"
          },
          "patching_ask_policy": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryPhase": {
        "type": "string",
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair"
        ]
      },
      "RnetProductRegistryPlayerAffinityProductToken": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string"
          },
          "affinities": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryPlayerProductsState": {
        "type": "string",
        "enum": [
          "LoggedOut",
          "WaitingForProducts",
          "Complete"
        ]
      },
      "RnetProductRegistryPluginState": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RnetProductRegistryUpToDateStatus"
          },
          "version": {
            "type": "string"
          },
          "available": {
            "type": "string"
          },
          "progress": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
          },
          "enabled": {
            "type": "boolean"
          },
          "restartRequired": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryPrepareDirectoryPermissionsRequest": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryPreviewDiff": {
        "type": "object",
        "properties": {
          "network_bytes_compressed": {
            "type": "number",
            "format": "int64"
          },
          "disk_read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "disk_write_bytes": {
            "type": "number",
            "format": "int64"
          },
          "cache_read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "cache_write_bytes": {
            "type": "number",
            "format": "int64"
          },
          "new_bytes": {
            "type": "number",
            "format": "int64"
          },
          "disk_size_diff": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetProductRegistryPreviewRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "type": "number",
            "format": "int32"
          },
          "fast": {
            "type": "boolean"
          }
        }
      },
      "RnetProductRegistryPreviewStatus": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/RnetProductRegistryPreviewStatusState"
          },
          "diff": {
            "$ref": "#/components/schemas/RnetProductRegistryPreviewDiff"
          },
          "error": {
            "$ref": "#/components/schemas/RnetProductRegistryError"
          }
        }
      },
      "RnetProductRegistryPreviewStatusState": {
        "type": "string",
        "enum": [
          "pending",
          "done",
          "inconsistent"
        ]
      },
      "RnetProductRegistryProductAlias": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryProductDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryProductDefinitionMap": {
        "type": "object",
        "properties": {
          "productDefinitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetProductRegistryProductDefinition"
            }
          }
        }
      },
      "RnetProductRegistryProductInstallStateResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "has_installed_patchline": {
            "type": "boolean"
          },
          "patchline_install_states": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetProductRegistryInstallState"
            }
          }
        }
      },
      "RnetProductRegistryProductMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetProductRegistryPatchlineMetadata"
            }
          }
        }
      },
      "RnetProductRegistryProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetProductRegistryProductMetadata"
            }
          }
        }
      },
      "RnetProductRegistryProductPatchlineKey": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryProductPatchlineResourceV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "$ref": "#/components/schemas/RnetProductRegistryPatchline"
          }
        }
      },
      "RnetProductRegistryProductSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryProductV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryPatchline"
            }
          }
        }
      },
      "RnetProductRegistryProgress": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/RnetProductRegistryPhase"
          },
          "manifest": {
            "$ref": "#/components/schemas/RnetProductRegistryManifestProgress"
          },
          "update": {
            "$ref": "#/components/schemas/RnetProductRegistryUpdateProgress"
          },
          "repair": {
            "$ref": "#/components/schemas/RnetProductRegistryRepairProgress"
          }
        }
      },
      "RnetProductRegistryPublicProductsState": {
        "type": "string",
        "enum": [
          "WaitingForProducts",
          "Complete"
        ]
      },
      "RnetProductRegistryPublishState": {
        "type": "string",
        "enum": [
          "NotPublished",
          "Published"
        ]
      },
      "RnetProductRegistryRegionDataResource": {
        "type": "object",
        "properties": {
          "available_regions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_region": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryRegionLocale": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryRegisterWatchPathsRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryRepairCode": {
        "type": "string",
        "enum": [
          "default",
          "integrity_check_failed",
          "immediate_repair"
        ]
      },
      "RnetProductRegistryRepairProgress": {
        "type": "object",
        "properties": {
          "repaired_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_repair": {
            "type": "number",
            "format": "int64"
          },
          "repaired_files": {
            "type": "number",
            "format": "int64"
          },
          "files_to_repair": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetProductRegistryScdCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryScdCookies": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "format": "int32"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryScdCookie"
            }
          }
        }
      },
      "RnetProductRegistrySecondaryPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dynamic_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RnetProductRegistryDynamicTags"
            }
          }
        }
      },
      "RnetProductRegistrySecondaryPatchlineMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excluded_paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistrySecondaryPatchlineResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "relativePath": {
            "type": "string"
          }
        }
      },
      "RnetProductRegistryShardsDataResource": {
        "type": "object",
        "properties": {
          "game_shard_zone": {
            "type": "string"
          },
          "valid_shards": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetProductRegistryUpToDateStatus": {
        "type": "string",
        "enum": [
          "UpToDate",
          "Updating",
          "UpdateAvailable"
        ]
      },
      "RnetProductRegistryUpdateProgress": {
        "type": "object",
        "properties": {
          "read_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_read": {
            "type": "number",
            "format": "int64"
          },
          "written_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_write": {
            "type": "number",
            "format": "int64"
          },
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          },
          "stage": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "RnetSanitizerContainsSanitizedRequest": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "level": {
            "type": "number",
            "format": "int32"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "RnetSanitizerContainsSanitizedResponse": {
        "type": "object",
        "properties": {
          "contains": {
            "type": "boolean"
          }
        }
      },
      "RnetSanitizerLocaleDataResource": {
        "type": "object",
        "properties": {
          "available_locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetSanitizerPatchlineMetadata": {
        "type": "object",
        "properties": {
          "locale_data": {
            "$ref": "#/components/schemas/RnetSanitizerLocaleDataResource"
          }
        }
      },
      "RnetSanitizerPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "RnetSanitizerPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "RnetSanitizerProductMetadata": {
        "type": "object",
        "properties": {
          "patchlines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetSanitizerPatchlineMetadata"
            }
          }
        }
      },
      "RnetSanitizerProductMetadataMap": {
        "type": "object",
        "properties": {
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RnetSanitizerProductMetadata"
            }
          }
        }
      },
      "RnetSanitizerSanitizeRequest": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "level": {
            "type": "number",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetSanitizerSanitizeResponse": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RnetSanitizerSanitizerLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          }
        }
      },
      "RnetSanitizerSanitizerStatus": {
        "type": "object",
        "properties": {
          "allowlistedWordCountsByLevel": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "breakingCharsCount": {
            "type": "number",
            "format": "int32"
          },
          "filteredWordCountsByLevel": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "int32"
            }
          },
          "locale": {
            "type": "string"
          },
          "projectedCharsCount": {
            "type": "number",
            "format": "int32"
          },
          "ready": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "RnetSelfUpdateBuildInfo": {
        "type": "object",
        "properties": {
          "patchlineVisibleName": {
            "type": "string"
          }
        }
      },
      "RnetSelfUpdateInstall": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "seed_path": {
            "type": "string"
          },
          "metadata_path": {
            "type": "string"
          }
        }
      },
      "RnetSelfUpdateManifestProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetSelfUpdatePatchError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "RnetSelfUpdatePhase": {
        "type": "string",
        "enum": [
          "None",
          "Manifest",
          "Update",
          "Repair",
          "Seed"
        ]
      },
      "RnetSelfUpdateProgress": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "number",
            "format": "double"
          },
          "phase": {
            "$ref": "#/components/schemas/RnetSelfUpdatePhase"
          },
          "manifest": {
            "$ref": "#/components/schemas/RnetSelfUpdateManifestProgress"
          },
          "seed": {
            "$ref": "#/components/schemas/RnetSelfUpdateSeedProgress"
          }
        }
      },
      "RnetSelfUpdateRelease": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/RnetSelfUpdateReleaseState"
          },
          "url": {
            "type": "string"
          },
          "is_critical": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/RnetSelfUpdateReleaseError"
          }
        }
      },
      "RnetSelfUpdateReleaseError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "RnetSelfUpdateReleaseState": {
        "type": "string",
        "enum": [
          "updating",
          "ready",
          "failed"
        ]
      },
      "RnetSelfUpdateSeedProgress": {
        "type": "object",
        "properties": {
          "downloaded_bytes": {
            "type": "number",
            "format": "int64"
          },
          "bytes_to_download": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RnetSelfUpdateSeedRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RnetSelfUpdateSeedStatus": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/RnetSelfUpdateSeedStatusState"
          },
          "progress": {
            "$ref": "#/components/schemas/RnetSelfUpdateProgress"
          },
          "error": {
            "$ref": "#/components/schemas/RnetSelfUpdatePatchError"
          }
        }
      },
      "RnetSelfUpdateSeedStatusState": {
        "type": "string",
        "enum": [
          "seeding",
          "up_to_date",
          "out_of_date",
          "pending_verify"
        ]
      },
      "RnetSelfUpdateStatus": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/components/schemas/RnetSelfUpdateRelease"
          }
        }
      },
      "RsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "RsoAuthAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthAuthHintType"
          }
        }
      },
      "RsoAuthAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "RsoAuthAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "RsoAuthAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RsoAuthAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "RsoAuthAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "RsoAuthAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoAuthAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthAuthorizationResponseType"
          }
        }
      },
      "RsoAuthAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/RsoAuthAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthTokenContext"
          }
        }
      },
      "RsoAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "RsoAuthAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoAuthClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "RsoAuthClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/RsoAuthAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/RsoAuthAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/RsoAuthClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/RsoAuthRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RsoAuthConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthLoginAMR"
            }
          }
        }
      },
      "RsoAuthConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "RsoAuthConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoAuthConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoAuthConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/RsoAuthConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "RsoAuthEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "RsoAuthGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "RsoAuthHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "RsoAuthHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RsoAuthHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthHttpCookie"
            }
          }
        }
      },
      "RsoAuthIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/RsoAuthClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/RsoAuthSessionResponse"
          }
        }
      },
      "RsoAuthLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "RsoAuthLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoAuthLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "RsoAuthMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "RsoAuthMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "RsoAuthMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "RsoAuthMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoAuthMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RsoAuthMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "RsoAuthPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/RsoAuthGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/RsoAuthGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/RsoAuthGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/RsoAuthMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/RsoAuthMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/RsoAuthTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/RsoAuthWeGamePartnerCredentials"
          }
        }
      },
      "RsoAuthPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/RsoAuthGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/RsoAuthGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/RsoAuthGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/RsoAuthMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/RsoAuthTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/RsoAuthWeGamePartnerCredentials"
          }
        }
      },
      "RsoAuthPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/RsoAuthImplicitGrantModeTelemetryContext"
          }
        }
      },
      "RsoAuthRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/RsoAuthTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RsoAuthRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RsoAuthRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "RsoAuthRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "RsoAuthSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/RsoAuthAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthSessionResponseType"
          }
        }
      },
      "RsoAuthSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "RsoAuthSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RsoAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "RsoAuthTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "RsoAuthWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorAuthConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorV1AuthMethodConfig"
            }
          }
        }
      },
      "RsoAuthenticatorAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth"
        ]
      },
      "RsoAuthenticatorHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "expiryTime": {
            "type": "number",
            "format": "int64"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "RsoAuthenticatorPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/RsoAuthenticatorOnlinePlatform"
          }
        }
      },
      "RsoAuthenticatorPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorRSOAuthenticatorFlow": {
        "type": "string",
        "enum": [
          "QRCode",
          "Unknown"
        ]
      },
      "RsoAuthenticatorRSOAuthenticatorTelemetryEvent": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "string"
          },
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "flow": {
            "$ref": "#/components/schemas/RsoAuthenticatorRSOAuthenticatorFlow"
          },
          "operation": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "suuid": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RsoAuthenticatorReadyState": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorRsoAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoAuthenticatorRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoAuthenticatorRsoAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthAuthorizationResponseType"
          }
        }
      },
      "RsoAuthenticatorRsoAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "RsoAuthenticatorRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorRsoAuthImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoAuthenticatorRsoAuthIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorRsoAuthSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthenticatorAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1AuthResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateCodeInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateFacebookInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateGameCenterInput": {
        "type": "object",
        "properties": {
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateMultifactorInput": {
        "type": "object",
        "properties": {
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateNintendoInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateOpenIdConnectInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "open_id": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticatePlaystationInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticateXboxInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "xbox": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticationRedirectInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticationRequest": {
        "type": "object",
        "properties": {
          "apple": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "campaign": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1CodeExchangeInput"
          },
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
          },
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
          },
          "google": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "language": {
            "type": "string"
          },
          "mockDeviceId": {
            "type": "string"
          },
          "mockPlatform": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput"
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
          },
          "platform": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput"
          },
          "qrcode": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1QRCodeInput"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
          },
          "riot_identity_signup": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentitySignupCreateInput"
          },
          "rso": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1AuthenticationRsoInput"
          },
          "sdkVersion": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          },
          "xbox": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticationResponse": {
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1AuthResponseDetails"
          },
          "captcha": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1Captcha"
          },
          "cluster": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "gamepass": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GamepassResponseDetails"
          },
          "healup": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1HealupResponseDetails"
          },
          "kr-id-verification": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1KRIdVerificationResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorResponseDetails"
          },
          "retryAfter": {
            "type": "number",
            "format": "int32"
          },
          "signup": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SuccessResponseDetails"
          },
          "suuid": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          },
          "validation_captcha": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1Captcha"
          }
        }
      },
      "RsoAuthenticatorV1AuthenticationRsoInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "authentication_redirect_uri": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1Captcha": {
        "type": "object",
        "properties": {
          "hcaptcha": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1HCaptcha"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1CaptchaType"
          }
        }
      },
      "RsoAuthenticatorV1CaptchaType": {
        "type": "string",
        "enum": [
          "none",
          "hcaptcha"
        ]
      },
      "RsoAuthenticatorV1CodeExchangeInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "RsoAuthenticatorV1FacebookInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "app_id": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1GameCenterInput": {
        "type": "object",
        "properties": {
          "bundle_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "public_key_url": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1GamepassResponseDetails": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "number",
            "format": "int32"
          },
          "remaining": {
            "type": "number",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GamepassStatus"
          }
        }
      },
      "RsoAuthenticatorV1GamepassStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "NONE"
        ]
      },
      "RsoAuthenticatorV1Geolocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "string"
          },
          "lon": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1HCaptcha": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1HealupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoAuthenticatorV1KRIdVerificationResponseDetails": {
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1LoginRequest": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/RsoAuthenticatorAuthenticationTypeEnum"
          },
          "login_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1MultifactorInput": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1MultifactorResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "known_value": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1NintendoInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          },
          "nsa_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1OpenIdConnectInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1PlaystationInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "authorization_consent": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1QRCodeInput": {
        "type": "object",
        "properties": {}
      },
      "RsoAuthenticatorV1QrCodeAuthStartInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1ResendLinkRequest": {
        "type": "object",
        "properties": {
          "multifactor": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1MultifactorInput"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          }
        }
      },
      "RsoAuthenticatorV1ResponseType": {
        "type": "string",
        "enum": [
          "auth",
          "healup",
          "kr-id-verification",
          "signup",
          "multifactor",
          "gamepass",
          "success",
          "error"
        ]
      },
      "RsoAuthenticatorV1RiotIdentityAuthCompleteInput": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentityAuthCompleteRequest": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentityAuthStartInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentityInput": {
        "type": "object",
        "properties": {
          "captcha": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentitySignupCompleteInput": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "tou_agree": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentitySignupCompleteRequest": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "tou_agree": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1RiotIdentitySignupCreateInput": {
        "type": "object",
        "properties": {}
      },
      "RsoAuthenticatorV1RiotIdentitySignupStartInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1RsoInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1SessionAuthenticationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "RsoAuthenticatorV1SessionDetails": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "string"
          },
          "suuid": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1SessionInfoAuthSession": {
        "type": "object",
        "properties": {
          "geolocation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1Geolocation"
          }
        }
      },
      "RsoAuthenticatorV1SessionInfoRequest": {
        "type": "object",
        "properties": {
          "geolocation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1Geolocation"
          },
          "timestamp": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "RsoAuthenticatorV1SessionInfoResponse": {
        "type": "object",
        "properties": {
          "auth_session": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SessionInfoAuthSession"
          },
          "request": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SessionInfoRequest"
          }
        }
      },
      "RsoAuthenticatorV1SignupCodeLinking": {
        "type": "object",
        "properties": {
          "direct_url": {
            "type": "string"
          },
          "manual_url": {
            "type": "string"
          },
          "short_code": {
            "type": "string"
          },
          "short_url": {
            "type": "string"
          },
          "status_url": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1SignupLinkDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "code_linking": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupCodeLinking"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous_linking": {
            "type": "string"
          },
          "suggested": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoAuthenticatorV1SignupLinkRequest": {
        "type": "object",
        "properties": {
          "apple": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "code": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1CodeExchangeInput"
          },
          "facebook": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1FacebookInput"
          },
          "gamecenter": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1GameCenterInput"
          },
          "google": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1OpenIdConnectInput"
          },
          "nintendo": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1NintendoInput"
          },
          "playstation": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1PlaystationInput"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RiotIdentityInput"
          },
          "rso": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1RsoInput"
          },
          "type": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1ResponseType"
          },
          "xbox": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1XboxInput"
          }
        }
      },
      "RsoAuthenticatorV1SignupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1SignupLinkDetails"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoAuthenticatorV1SuccessResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "is_console_link_session": {
            "type": "boolean"
          },
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1UsernameValidationRequest": {
        "type": "object",
        "properties": {
          "captcha": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1UsernameValidationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "valid": {
            "type": "boolean"
          },
          "validation_captcha": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1Captcha"
          }
        }
      },
      "RsoAuthenticatorV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox",
          "okta"
        ]
      },
      "RsoAuthenticatorV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "RsoAuthenticatorV1WebLinkingStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "PENDING",
          "EXPIRED",
          "COMPLETED"
        ]
      },
      "RsoAuthenticatorV1WebLinkingStatusResponse": {
        "type": "object",
        "properties": {
          "login_token": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RsoAuthenticatorV1WebLinkingStatus"
          },
          "ttl": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "RsoAuthenticatorV1XboxInput": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAcceptance": {
        "type": "string",
        "enum": [
          "WaitingForAllServiceData",
          "AcceptanceRequired",
          "Accepted"
        ]
      },
      "RsoMobileUiAccountDeletionV1AccountDeletionUIStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RsoMobileUiAccountDeletionV1AccountDeletionUIStatusType"
          }
        }
      },
      "RsoMobileUiAccountDeletionV1AccountDeletionUIStatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "started",
          "external",
          "visible",
          "completed",
          "cancelled",
          "error",
          "shutdown"
        ]
      },
      "RsoMobileUiAccountDeletionV1HomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAccountPromotionStatus": {
        "type": "object",
        "properties": {
          "error_description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiAccountPromotionStatusType"
          }
        }
      },
      "RsoMobileUiAccountPromotionStatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "initialized",
          "promoted",
          "cancelled",
          "error"
        ]
      },
      "RsoMobileUiAliasValidationReason": {
        "type": "string",
        "enum": [
          "no_error",
          "invalid_product_id_or_wallet_location",
          "insufficient_balance",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ]
      },
      "RsoMobileUiAliasesV1Alias": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "type": "number",
            "format": "int64"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAliasesV1AliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAliasesV1EligibilityResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RsoMobileUiAliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiAliasesV1GenerateTaglineInput": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAliasesV1GenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/RsoMobileUiAliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAliasesV1StatusResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/RsoMobileUiAliasesV1Alias"
          },
          "errorCode": {
            "$ref": "#/components/schemas/RsoMobileUiAliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiAuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiAuthenticationMethod": {
        "type": "string",
        "enum": [
          "Riot",
          "Google",
          "GameCenter",
          "Facebook",
          "Apple",
          "QQ",
          "Wechat",
          "Wegame"
        ]
      },
      "RsoMobileUiAuthenticationRedirectRequest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiConfigReadinessEnum": {
        "type": "string",
        "enum": [
          "NotReady",
          "Ready"
        ]
      },
      "RsoMobileUiConfigStatus": {
        "type": "object",
        "properties": {
          "readiness": {
            "$ref": "#/components/schemas/RsoMobileUiConfigReadinessEnum"
          }
        }
      },
      "RsoMobileUiEULAUIInitiate": {
        "type": "object",
        "properties": {
          "accept": {
            "type": "string"
          },
          "allowDecline": {
            "type": "boolean"
          },
          "decline": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "privacyPolicy": {
            "type": "string"
          },
          "privacyPolicyUri": {
            "type": "string"
          },
          "termsOfUse": {
            "type": "string"
          },
          "termsOfUseUri": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiEULAUIStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RsoMobileUiEULAUIStatusType"
          }
        }
      },
      "RsoMobileUiEULAUIStatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "visible",
          "accepted",
          "declined",
          "error"
        ]
      },
      "RsoMobileUiEULAUIV2Agreement": {
        "type": "object",
        "properties": {
          "isAccepted": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiEULAUIV2Config": {
        "type": "object",
        "properties": {
          "privacyNoticeUrl": {
            "type": "string"
          },
          "termsOfServiceContent": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiEULAUIV2Status": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RsoMobileUiEULAUIV2StatusType"
          }
        }
      },
      "RsoMobileUiEULAUIV2StatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "visible",
          "accepted",
          "acceptanceRequired",
          "declined",
          "error"
        ]
      },
      "RsoMobileUiFederatedAuthState": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiFederatedAuthStateType"
          }
        }
      },
      "RsoMobileUiFederatedAuthStateType": {
        "type": "string",
        "enum": [
          "none",
          "success",
          "failure",
          "cancelled"
        ]
      },
      "RsoMobileUiFederatedLoginRequest": {
        "type": "object",
        "properties": {
          "facebookUseClassicLogin": {
            "type": "boolean"
          },
          "forceUseWebView": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/RsoMobileUiLoginStrategyType"
          }
        }
      },
      "RsoMobileUiGameOutOfDateUIInitiate": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "appUrl": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiIOSEventInfo": {
        "type": "object",
        "properties": {
          "optionsAnnotation": {
            "type": "string"
          },
          "sourceApplication": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiKrAccountPromotionSession": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiLoginInitiateRequest": {
        "type": "object",
        "properties": {
          "facebookUseClassicLogin": {
            "type": "boolean"
          },
          "forceUseWebView": {
            "type": "boolean"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "strategy": {
            "$ref": "#/components/schemas/RsoMobileUiLoginStrategyType"
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoMobileUiRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoMobileUiLoginStatus": {
        "type": "object",
        "properties": {
          "error_description": {
            "type": "string"
          },
          "federated_error_code": {
            "type": "number",
            "format": "int32"
          },
          "ready": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/RsoMobileUiLoginStrategyType"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiLoginStatusType"
          }
        }
      },
      "RsoMobileUiLoginStatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "initialized",
          "authenticating",
          "cancelled",
          "success",
          "error"
        ]
      },
      "RsoMobileUiLoginStrategyInfo": {
        "type": "object",
        "properties": {
          "appInstalled": {
            "type": "boolean"
          },
          "forceUseWebView": {
            "type": "boolean"
          },
          "strategy": {
            "$ref": "#/components/schemas/RsoMobileUiLoginStrategyType"
          }
        }
      },
      "RsoMobileUiLoginStrategyType": {
        "type": "string",
        "enum": [
          "riot",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "qq",
          "wechat",
          "wegame",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "RsoMobileUiLoginTypeEnum": {
        "type": "string",
        "enum": [
          "Invalid",
          "NoLongLivedSession",
          "LongLivedSessionRejected",
          "LongLivedSessionAccepted"
        ]
      },
      "RsoMobileUiLoginV1Request": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "requestId": {
            "type": "number",
            "format": "int32"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "RsoMobileUiOutcome": {
        "type": "string",
        "enum": [
          "Success",
          "PrivateSettingsMissing",
          "PrivateSettingsEmpty",
          "RegionLocaleMissing",
          "RegionMismatch",
          "RegionDataMissing",
          "NoLoginSessionCookies",
          "SetPersistedLoginFailed",
          "AuthRequestFailed",
          "AuthResultNotAuthorized"
        ]
      },
      "RsoMobileUiPSLPlayerSessionState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/RsoMobileUiOnlinePlatform"
          }
        }
      },
      "RsoMobileUiPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoMobileUiAuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiProduct": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "RsoMobileUiRSOSignOnAttemptEvent": {
        "type": "object",
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/RsoMobileUiAuthenticationMethod"
          },
          "errorCode": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "outcome": {
            "$ref": "#/components/schemas/RsoMobileUiOutcome"
          },
          "product": {
            "$ref": "#/components/schemas/RsoMobileUiProduct"
          },
          "signOnAttemptNumber": {
            "type": "number",
            "format": "int32"
          },
          "storedSessionState": {
            "$ref": "#/components/schemas/RsoMobileUiStoredSessionState"
          }
        }
      },
      "RsoMobileUiRegionElectionV1EligibilityResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoMobileUiRegionElectionV1InitiateRequest": {
        "type": "object",
        "properties": {
          "regionHint": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRegionElectionV1RegionElection": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "$ref": "#/components/schemas/RsoMobileUiRegionsV1RegionAssignmentResponseMessage"
          },
          "productId": {
            "type": "string"
          },
          "regionHint": {
            "type": "string"
          },
          "selectedRegion": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRegionElectionV1UpdateRequest": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRegionsV1EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoMobileUiRegionsV1RegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/RsoMobileUiRegionsV1RegionAssignmentResponseMessage"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRegionsV1RegionAssignmentResponseMessage": {
        "type": "string",
        "enum": [
          "LOGIN_REQUIRED",
          "SERVER_ERROR",
          "AUTH_REFRESH_FAILED",
          "REGION_ALREADY_ASSIGNED",
          "REGION_EXISTS",
          "BAD_ENTITY_PARAMETER",
          "NO_ERROR"
        ]
      },
      "RsoMobileUiRiotIDPromptV1GenerateTaglineRequest": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRiotIDPromptV1GenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRiotIDPromptV1InitiateRequest": {
        "type": "object",
        "properties": {
          "promptReason": {
            "$ref": "#/components/schemas/RsoMobileUiRiotIDPromptV1RiotIDPromptReason"
          }
        }
      },
      "RsoMobileUiRiotIDPromptV1RiotIDPrompt": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRiotIDPromptV1RiotIDPromptReason": {
        "type": "string",
        "enum": [
          "set_new_id",
          "forced_name_change"
        ]
      },
      "RsoMobileUiRiotIDPromptV1UpdateRequest": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthAuthorizationRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RsoMobileUiRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "RsoMobileUiRsoAuthAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthAuthorizationResponseType"
          }
        }
      },
      "RsoMobileUiRsoAuthAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "RsoMobileUiRsoAuthIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthIdToken"
          }
        }
      },
      "RsoMobileUiRsoAuthMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthMultifactorMethod"
          }
        }
      },
      "RsoMobileUiRsoAuthMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "RsoMobileUiRsoAuthOpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoMobileUiRsoAuthSessionLoginToken": {
        "type": "object",
        "properties": {
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthSessionResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthSessionState"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthSessionResponseType"
          }
        }
      },
      "RsoMobileUiRsoAuthSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "RsoMobileUiRsoAuthSessionState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateCodeInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateFacebookInput": {
        "type": "object",
        "properties": {
          "facebook": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorFacebookInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateGameCenterInput": {
        "type": "object",
        "properties": {
          "gamecenter": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorGameCenterInput"
          },
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateMultifactorInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorMultifactorInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateOpenIdConnectInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "open_id": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorOpenIdConnectInput"
          },
          "remember": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticateRiotIdentityInput": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_identity": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorRiotIdentityInput"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorAuthenticationResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "gamepass": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorGamepassResponseDetails"
          },
          "healup": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorHealupResponseDetails"
          },
          "multifactor": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorMultifactorResponseDetails"
          },
          "signup": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorSignupResponseDetails"
          },
          "success": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorSuccessResponseDetails"
          },
          "type": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorResponseType"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorDisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "RsoMobileUiRsoAuthenticatorFacebookInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "app_id": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorGameCenterInput": {
        "type": "object",
        "properties": {
          "bundle_id": {
            "type": "string"
          },
          "player_id": {
            "type": "string"
          },
          "public_key_url": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorGamepassResponseDetails": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "number",
            "format": "int32"
          },
          "remaining": {
            "type": "number",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorGamepassStatus"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorGamepassStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "NONE"
        ]
      },
      "RsoMobileUiRsoAuthenticatorHealupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorMultifactorInput": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorMultifactorResponseDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorOpenIdConnectInput": {
        "type": "object",
        "properties": {
          "authorization_code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorResponseType": {
        "type": "string",
        "enum": [
          "auth",
          "healup",
          "signup",
          "multifactor",
          "gamepass",
          "success",
          "error"
        ]
      },
      "RsoMobileUiRsoAuthenticatorRiotIdentityInput": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorSignupLinkDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggested": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorSignupResponseDetails": {
        "type": "object",
        "properties": {
          "auth_method": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorSignupLinkDetails"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "required_fields_hints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorSuccessResponseDetails": {
        "type": "object",
        "properties": {
          "linked": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiRsoAuthenticatorWebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "RsoMobileUiRsoAuthenticatorWebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorDisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/RsoMobileUiRsoAuthenticatorWebAuthenticationMethod"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiStoredSessionState": {
        "type": "string",
        "enum": [
          "Accepted",
          "Rejected",
          "Absent"
        ]
      },
      "RsoMobileUiUIAccountPromotionFieldResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RsoMobileUiUIAccountPromotionResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiUIAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIEligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "number",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          },
          "isTooYoung": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiUIMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIPartnerCredentials": {
        "type": "object",
        "properties": {
          "msdk_qq": {
            "$ref": "#/components/schemas/RsoMobileUiUIMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/RsoMobileUiUIMSDKWeChatPartnerCredentials"
          }
        }
      },
      "RsoMobileUiUIWebViewIncomingCloseRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "userInitiated": {
            "type": "boolean"
          }
        }
      },
      "RsoMobileUiUIWebViewIncomingError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIWebViewIncomingResourceRequest": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIWebViewOutgoingResourceData": {
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "code": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "RsoMobileUiUIWebViewOutgoingResourceNotification": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RsoMobileUiUIWebViewOutgoingResourceNotificationData"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiUIWebViewOutgoingResourceNotificationData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "RsoMobileUiUIWebViewOutgoingResourceRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RsoMobileUiUIWebViewOutgoingResourceData"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiVngV1RegistrationUIStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RsoMobileUiVngV1RegistrationUIStatusType"
          }
        }
      },
      "RsoMobileUiVngV1RegistrationUIStatusType": {
        "type": "string",
        "enum": [
          "uninitialized",
          "visible",
          "completed",
          "cancelled",
          "error"
        ]
      },
      "RsoMobileUiVngV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_url": {
            "type": "string"
          }
        }
      },
      "RsoMobileUiWebViewAccountPromotionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "SGPErrorMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status_code": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "SGPErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SGPErrorMessage"
          }
        }
      },
      "ScdCookie": {
        "type": "object",
        "properties": {
          "cookie": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "ScdCookies": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScdCookie"
            }
          },
          "expires_in": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "ScdEntitlementsToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ScdProductSession": {
        "type": "object",
        "properties": {}
      },
      "ScdScdEnabled": {
        "type": "string",
        "enum": [
          "Off",
          "On"
        ]
      },
      "SocialAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1Alias": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_datetime": {
            "type": "number",
            "format": "int64"
          },
          "game_name": {
            "type": "string"
          },
          "summoner": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1AliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1AliasList": {
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAliasesV1Alias"
            }
          }
        }
      },
      "SocialAliasesV1AliasLookup": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1AliasLookupResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/SocialAliasesV1AliasLookup"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1AliasValidationReason": {
        "type": "string",
        "enum": [
          "no_error",
          "invalid_product_id_or_wallet_location",
          "insufficient_balance",
          "name_change_forbidden",
          "name_not_available",
          "rate_limited"
        ]
      },
      "SocialAliasesV1PurchaseAliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1PurchaseEligibilityInput": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "walletLocation": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV1PurchaseEligibilityResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SocialAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isFreeChangeEligible": {
            "type": "boolean"
          },
          "isPaidChangeEligible": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          },
          "walletBalance": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "SocialAliasesV1RequiredResponse": {
        "type": "object",
        "properties": {
          "isAliasChangeRequired": {
            "type": "boolean"
          },
          "isAliasMissing": {
            "type": "boolean"
          }
        }
      },
      "SocialAliasesV1StatusResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/SocialAliasesV1Alias"
          },
          "errorCode": {
            "$ref": "#/components/schemas/SocialAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          }
        }
      },
      "SocialAliasesV2GenerateTaglineInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV2GenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "invalidReason": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV2ValidityAliasInput": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialAliasesV2ValidityAliasResponse": {
        "type": "object",
        "properties": {
          "invalidReason": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          }
        }
      },
      "SocialAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "SocialAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/SocialAuthHintType"
          }
        }
      },
      "SocialAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "SocialAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "SocialAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "SocialAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "SocialAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "SocialAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/SocialAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "SocialAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/SocialAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "SocialAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/SocialImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SocialAuthorizationResponseType"
          }
        }
      },
      "SocialAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/SocialTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/SocialAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/SocialTokenContext"
          }
        }
      },
      "SocialAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "SocialAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "SocialBlockList": {
        "type": "object",
        "properties": {
          "blockedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialBlockedUser"
            }
          }
        }
      },
      "SocialBlockPid": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialBlockedUser": {
        "type": "object",
        "properties": {
          "blockedPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialOnlinePlatform"
            }
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "puuid": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          }
        }
      },
      "SocialClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "SocialClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/SocialAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/SocialAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/SocialClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/SocialRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLoginAMR"
            }
          }
        }
      },
      "SocialConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "SocialConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "SocialConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "SocialConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/SocialConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "SocialDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "SocialEligibilityResponse": {
        "type": "object",
        "properties": {
          "eligibleAfter": {
            "type": "number",
            "format": "int64"
          },
          "errorCode": {
            "$ref": "#/components/schemas/SocialAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "isTagLineCustomizable": {
            "type": "boolean"
          }
        }
      },
      "SocialEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SocialErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "not_signed_up",
          "logout",
          "latest_system_software_exist"
        ]
      },
      "SocialFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "activePlatformPlayerName": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/SocialLookupV1NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "SocialFriendList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialFriend"
            }
          }
        }
      },
      "SocialFriendListV1": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialFriendV1"
            }
          }
        }
      },
      "SocialFriendListV3": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialFriendV3"
            }
          }
        }
      },
      "SocialFriendRequestListPuuid": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialFriendRequestPuuid"
            }
          }
        }
      },
      "SocialFriendRequestPost": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialFriendRequestPuuid": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/SocialFriendSubscriptionType"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialFriendSubscriptionType": {
        "type": "string",
        "enum": [
          "pending_out",
          "pending_in"
        ]
      },
      "SocialFriendV1": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercard_background_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/SocialLookupV1NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "patchline": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "product_folder_name": {
            "type": "string"
          },
          "product_presence_name": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "SocialFriendV3": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "activePlatformPlayerName": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "hovercardBackgroundUrl": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string"
          },
          "isBlockedOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "isFriendsOnRiot": {
            "type": "boolean"
          },
          "msg": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namesets": {
            "$ref": "#/components/schemas/SocialLookupV2NamesetsForPuuidResponse"
          },
          "note": {
            "type": "string"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialPresencesChatParty"
            }
          },
          "patchline": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "platformState": {
            "type": "string"
          },
          "preferredDisplayName": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "privateJwt": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "productFolderName": {
            "type": "string"
          },
          "productPresenceName": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "relationshipOnConsole": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          },
          "relationshipOnRiot": {
            "$ref": "#/components/schemas/SocialUserRelationship"
          },
          "showState": {
            "type": "string"
          }
        }
      },
      "SocialGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "SocialGameNameAndTagLine": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "SocialGenerateTaglineInput": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          }
        }
      },
      "SocialGenerateTaglineResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/SocialAliasesV1AliasValidationReason"
          },
          "errorMessage": {
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "SocialGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "SocialHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "SocialHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SocialHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialHttpCookie"
            }
          }
        }
      },
      "SocialIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SocialImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/SocialAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/SocialIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "SocialImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/SocialClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/SocialSessionResponse"
          }
        }
      },
      "SocialLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "SocialLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "SocialLookupV1ConsoleIdsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialLookupV1ConsoleIdsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "SocialLookupV1GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "shadow_gnt": {
            "type": "boolean"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1GamerNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "shadowGnt": {
            "type": "boolean"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/SocialLookupV1GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/SocialLookupV1PlaystationNameset"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/SocialLookupV1SwitchNameset"
          },
          "xbox": {
            "$ref": "#/components/schemas/SocialLookupV1XboxNameset"
          }
        }
      },
      "SocialLookupV1NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "gnt": {
            "$ref": "#/components/schemas/SocialLookupV1GamerNameAndTagline"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/SocialLookupV1PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/SocialLookupV1SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/SocialLookupV1XboxNameset"
          }
        }
      },
      "SocialLookupV1NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialLookupV1NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLookupV1NamesetsForPuuidResponse"
            }
          }
        }
      },
      "SocialLookupV1PlaystationNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1PuuidAndProvider": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1PuuidsForConsoleIdsRequest": {
        "type": "object",
        "properties": {
          "consoleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1PuuidsForConsoleIdsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLookupV1PuuidAndProvider"
            }
          }
        }
      },
      "SocialLookupV1SwitchNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SocialLookupV1XboxNameset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2GameNameAndTagline": {
        "type": "object",
        "properties": {
          "gameName": {
            "type": "string"
          },
          "tagLine": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2GameNameTaglinePASResponse": {
        "type": "object",
        "properties": {
          "game_name": {
            "type": "string"
          },
          "tag_line": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2NamesetsForPuuidPASResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/SocialLookupV2GameNameTaglinePASResponse"
          },
          "error": {
            "type": "string"
          },
          "playstation": {
            "$ref": "#/components/schemas/SocialLookupV2PlaystationNamesetPASResponse"
          },
          "puuid": {
            "type": "string"
          },
          "switch": {
            "$ref": "#/components/schemas/SocialLookupV2SwitchNamesetPASResponse"
          },
          "xbox": {
            "$ref": "#/components/schemas/SocialLookupV2XboxNamesetPASResponse"
          }
        }
      },
      "SocialLookupV2NamesetsForPuuidRequest": {
        "type": "object",
        "properties": {
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2NamesetsForPuuidResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "$ref": "#/components/schemas/SocialLookupV2GameNameAndTagline"
          },
          "error": {
            "type": "string"
          },
          "playstationNameset": {
            "$ref": "#/components/schemas/SocialLookupV2PlaystationNameset"
          },
          "providerId": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "switchNameset": {
            "$ref": "#/components/schemas/SocialLookupV2SwitchNameset"
          },
          "xboxNameset": {
            "$ref": "#/components/schemas/SocialLookupV2XboxNameset"
          }
        }
      },
      "SocialLookupV2NamesetsForPuuidsRequest": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialLookupV2NamesetsForPuuidsResponse": {
        "type": "object",
        "properties": {
          "namesets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLookupV2NamesetsForPuuidResponse"
            }
          }
        }
      },
      "SocialLookupV2PlaystationNameset": {
        "type": "object",
        "properties": {
          "onlineId": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2PlaystationNamesetPASResponse": {
        "type": "object",
        "properties": {
          "online_id": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2SwitchNameset": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2SwitchNamesetPASResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2XboxNameset": {
        "type": "object",
        "properties": {
          "classicGamertag": {
            "type": "string"
          },
          "modernGamertag": {
            "type": "string"
          },
          "modernSuffix": {
            "type": "string"
          }
        }
      },
      "SocialLookupV2XboxNamesetPASResponse": {
        "type": "object",
        "properties": {
          "classic_gamertag": {
            "type": "string"
          },
          "modern_gamertag": {
            "type": "string"
          },
          "modern_gamertag_suffix": {
            "type": "string"
          }
        }
      },
      "SocialMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "SocialMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "SocialMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "SocialMfaV1VerifyFactorRequest": {
        "type": "object",
        "properties": {
          "device": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          }
        }
      },
      "SocialMfaV1VerifyFactorResponse": {
        "type": "object",
        "properties": {
          "device": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "SocialMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/SocialMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "SocialOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "SocialPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/SocialGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/SocialGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/SocialGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/SocialMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/SocialMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/SocialTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/SocialWeGamePartnerCredentials"
          }
        }
      },
      "SocialPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/SocialGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/SocialGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/SocialGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/SocialMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/SocialTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/SocialWeGamePartnerCredentials"
          }
        }
      },
      "SocialPermissionDetails": {
        "type": "object",
        "properties": {
          "denyReason": {
            "type": "string"
          },
          "hasPermission": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          }
        }
      },
      "SocialPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/SocialPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "SocialPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "SocialPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/SocialPlatformSocialOnlineStatus"
          }
        }
      },
      "SocialPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/SocialOnlinePlatform"
          }
        }
      },
      "SocialPlayerAccountPluginConfig": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "playerAccountServiceUrl": {
            "type": "string"
          },
          "promotionBlockTimeDays": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialPluginCallerId_MockCallerId": {
        "type": "object",
        "properties": {
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "SocialPluginCallerId_ProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "SocialPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "SocialPresencesChatParty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "max_party_size": {
            "type": "number",
            "format": "int64"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialPresencesChatPartyMember"
            }
          },
          "status": {
            "$ref": "#/components/schemas/SocialPresencesPartyStatus"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialPresencesChatPartyMember": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/SocialPresencesPartyMemberRole"
          },
          "time": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialPresencesPartyMemberRole": {
        "type": "string",
        "enum": [
          "mem",
          "ldr"
        ]
      },
      "SocialPresencesPartyStatus": {
        "type": "string",
        "enum": [
          "open",
          "closed"
        ]
      },
      "SocialProductContext": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "SocialPromotionV1AccountDetails": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "newsletter": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "tou_agree": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "SocialPromotionV1AccountPromotionResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/SocialPromotionV1AccountPromotionValidationFailures"
          },
          "message": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "SocialPromotionV1AccountPromotionValidationFailures": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email_address": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newsletter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tou_agree": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialPromotionV1BlockListResponse": {
        "type": "object",
        "properties": {
          "blockList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialPromotionV1BlockedPuuid"
            }
          }
        }
      },
      "SocialPromotionV1BlockedPuuid": {
        "type": "object",
        "properties": {
          "blockExpiryDate": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialPromotionV1EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "number",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          },
          "isTooYoung": {
            "type": "boolean"
          }
        }
      },
      "SocialPromotionV1UpdateableFieldsResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SocialRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/SocialImplicitGrantModeTelemetryContext"
          }
        }
      },
      "SocialRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "SocialRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "SocialRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/SocialTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/SocialTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/SocialTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "SocialRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "SocialRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "SocialRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "SocialRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SocialRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "SocialRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SocialRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "SocialRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "SocialRegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "SocialRegionsV1AvailableRegionsResponse": {
        "type": "object",
        "properties": {
          "availableRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isReady": {
            "type": "boolean"
          }
        }
      },
      "SocialRegionsV1EligibilityCheckResponse": {
        "type": "object",
        "properties": {
          "canSelectRegion": {
            "type": "boolean"
          },
          "isReady": {
            "type": "boolean"
          },
          "multipleRegionsAllowed": {
            "type": "boolean"
          },
          "selectedRegions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialRegionsV1RegionAssignmentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/SocialRegionsV1RegionAssignmentResponseMessage"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "SocialRegionsV1RegionAssignmentResponseMessage": {
        "type": "string",
        "enum": [
          "LOGIN_REQUIRED",
          "SERVER_ERROR",
          "AUTH_REFRESH_FAILED",
          "REGION_ALREADY_ASSIGNED",
          "REGION_EXISTS",
          "REGION_NOT_ALLOWED",
          "BAD_ENTITY_PARAMETER",
          "NO_ERROR"
        ]
      },
      "SocialSanitizeRequest": {
        "type": "object",
        "properties": {
          "aggressiveScan": {
            "type": "boolean"
          },
          "level": {
            "type": "number",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialSanitizeResponse": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "SocialSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/SocialAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "SocialSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "SocialSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "SocialSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/SocialAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/SocialMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SocialSessionResponseType"
          }
        }
      },
      "SocialSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "SocialSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "SocialStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SocialTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "SocialTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "SocialTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "SocialUser": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "number",
            "format": "int64"
          },
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/SocialErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "SocialUserFieldChangeDetails": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "new_value": {
            "type": "string"
          },
          "old_value": {
            "type": "string"
          }
        }
      },
      "SocialUserFieldChangeMessage": {
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/SocialUserFieldChangeDetails"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SocialUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "SocialUserRelationship": {
        "type": "string",
        "enum": [
          "none",
          "friend",
          "blocked"
        ]
      },
      "SocialV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "SocialV1LoginLocationInfo": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "region": {
            "type": "string"
          },
          "timestamp": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SocialV1PlayerLoginLocationHistory": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialV1LoginLocationInfo"
            }
          },
          "lastUpdated": {
            "type": "number",
            "format": "int64"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "SocialV1PlayersLoginLocationHistory": {
        "type": "object",
        "properties": {
          "playersLoginLocationHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialV1PlayerLoginLocationHistory"
            }
          }
        }
      },
      "SocialV1RequestedPlayersLoginLocationHistory": {
        "type": "object",
        "properties": {
          "puuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialVngV1HomeBaseCountry": {
        "type": "object",
        "properties": {
          "home_base_country": {
            "type": "string"
          }
        }
      },
      "SocialVngV1Profile": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "government_id": {
            "type": "string"
          },
          "government_id_issue_date": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "SocialVngV1RegionLocale": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "SocialVngV1SetProfileResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "SocialVngV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          }
        }
      },
      "SocialVngV1WebUrlRequest": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "SocialVngV1WebUrlResponse": {
        "type": "object",
        "properties": {
          "web_url": {
            "type": "string"
          }
        }
      },
      "SocialWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "StructuredLogRequest": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/LogSeverityLevels"
          },
          "message": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "SystemInfoAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "SystemInfoProcessInfo": {
        "type": "object",
        "properties": {
          "ProcessName": {
            "type": "string"
          },
          "ProcessId": {
            "type": "number",
            "format": "int32"
          },
          "CpuUsage": {
            "type": "number",
            "format": "double"
          },
          "MemUsageInMB": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SystemTrayBuildInfo": {
        "type": "object",
        "properties": {
          "patchlineVisibleName": {
            "type": "string"
          }
        }
      },
      "SystemTrayConfigurationStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "has_configuration",
          "unsupported_region",
          "unsupported_shard",
          "unsupported_os",
          "unsupported_32_bit_os"
        ]
      },
      "SystemTrayContentCookies": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string"
          },
          "content_path": {
            "type": "string"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemTrayCookie"
            }
          }
        }
      },
      "SystemTrayCookie": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "httponly": {
            "type": "boolean"
          },
          "expires": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "SystemTrayNotificationData": {
        "type": "object",
        "properties": {
          "titleId": {
            "type": "string"
          },
          "bodyId": {
            "type": "string"
          }
        }
      },
      "SystemTrayPatcherProductState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/SystemTrayPatcherProductStateAction"
          },
          "isUpToDate": {
            "type": "boolean"
          },
          "isStopped": {
            "type": "boolean"
          }
        }
      },
      "SystemTrayPatcherProductStateAction": {
        "type": "string",
        "enum": [
          "Idle",
          "CheckingForUpdates",
          "Patching",
          "Repairing"
        ]
      },
      "SystemTrayPatchingResource": {
        "type": "object",
        "properties": {
          "combined_patch_state": {
            "type": "string"
          }
        }
      },
      "SystemTrayPatchline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "configuration_status": {
            "$ref": "#/components/schemas/SystemTrayConfigurationStatus"
          },
          "theme_manifest": {
            "type": "string"
          },
          "default_theme_manifest": {
            "type": "string"
          },
          "content_cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemTrayContentCookies"
            }
          }
        }
      },
      "SystemTrayProductContext": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "SystemTrayProductPatchlineResourceV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "install_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchline": {
            "$ref": "#/components/schemas/SystemTrayPatchline"
          }
        }
      },
      "SystemTrayProductSessionSession": {
        "type": "object",
        "properties": {}
      },
      "SystemTrayProductV4": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "patchlines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemTrayPatchline"
            }
          }
        }
      },
      "SystemTrayThemeManifest": {
        "type": "object",
        "properties": {
          "system_tray_icon": {
            "type": "string"
          }
        }
      },
      "SystemTrayUxCommand": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/AnyType"
          },
          "showUxIfHidden": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "TencentLauncherAuthHint": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherAuthHintType"
          }
        }
      },
      "TencentLauncherAuthHintType": {
        "type": "string",
        "enum": [
          "email_verification",
          "password_reset",
          "parental_consent",
          "ambiguous_username",
          "alias_change_required"
        ]
      },
      "TencentLauncherAuthenticationTypeEnum": {
        "type": "string",
        "enum": [
          "SSOAuth",
          "RiotAuth",
          "None"
        ]
      },
      "TencentLauncherAuthorization": {
        "type": "object",
        "properties": {
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "TencentLauncherAuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "code_verifier": {
            "type": "string"
          }
        }
      },
      "TencentLauncherAuthorizationKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "TencentLauncherAuthorizationKeyRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "client_id": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TencentLauncherAuthorizationRequest": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "TencentLauncherAuthorizationRequestTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum"
          },
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string"
          },
          "keepAlive": {
            "type": "boolean"
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "TencentLauncherAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/TencentLauncherImplicitAuthorization"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherAuthorizationResponseType"
          }
        }
      },
      "TencentLauncherAuthorizationResponseTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/TencentLauncherTokenContext"
          },
          "authorizationResponseType": {
            "$ref": "#/components/schemas/TencentLauncherAuthorizationResponseType"
          },
          "country": {
            "type": "string"
          },
          "idToken": {
            "$ref": "#/components/schemas/TencentLauncherTokenContext"
          }
        }
      },
      "TencentLauncherAuthorizationResponseType": {
        "type": "string",
        "enum": [
          "needs_authentication",
          "needs_reauthentication",
          "authorized"
        ]
      },
      "TencentLauncherAuthorizationUpdateRequest": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prompt": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trustLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTrustLevel"
            }
          }
        }
      },
      "TencentLauncherClientAuthorizationState": {
        "type": "string",
        "enum": [
          "Created",
          "Updated",
          "Destroyed"
        ]
      },
      "TencentLauncherClientAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "type": "string"
          },
          "authorizationRequest": {
            "$ref": "#/components/schemas/TencentLauncherAuthorizationRequestTelemetryContext"
          },
          "authorizationResponse": {
            "$ref": "#/components/schemas/TencentLauncherAuthorizationResponseTelemetryContext"
          },
          "authorizationState": {
            "$ref": "#/components/schemas/TencentLauncherClientAuthorizationState"
          },
          "clientId": {
            "type": "string"
          },
          "refreshId": {
            "type": "string"
          },
          "rsoAuthorization": {
            "$ref": "#/components/schemas/TencentLauncherRSOAuthorizationTelemetryContext"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopesNum": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "TencentLauncherConfigV3AMRValuesSupported": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherLoginAMR"
            }
          }
        }
      },
      "TencentLauncherConfigV3AuthProgress": {
        "type": "string",
        "enum": [
          "None",
          "Ready",
          "Pending",
          "Complete",
          "Skipped",
          "Error"
        ]
      },
      "TencentLauncherConfigV3OpenIdConfiguration": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "TencentLauncherConfigV3PartnerAuthConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          }
        }
      },
      "TencentLauncherConfigV3ReadyState": {
        "type": "object",
        "properties": {
          "configAuthProgress": {
            "$ref": "#/components/schemas/TencentLauncherConfigV3AuthProgress"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherDeviceId": {
        "type": "object",
        "properties": {
          "collectorServerName": {
            "type": "string"
          },
          "frameUrl": {
            "type": "string"
          },
          "installId": {
            "type": "string"
          },
          "merchantId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "TencentLauncherEntitlementsToken": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherGameCenterAuthCredentials": {
        "type": "object",
        "properties": {
          "bundleId": {
            "type": "string"
          },
          "playerId": {
            "type": "string"
          },
          "publicKeyUrl": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TencentLauncherGarenaPartnerCredentials": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherGoogleAuthCredentials": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string"
          }
        }
      },
      "TencentLauncherHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "TencentLauncherHttpCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "hostOnly": {
            "type": "boolean"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "secureOnly": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TencentLauncherHttpCookieJar": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherHttpCookie"
            }
          }
        }
      },
      "TencentLauncherIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherImplicitAuthorization": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/TencentLauncherAccessToken"
          },
          "idToken": {
            "$ref": "#/components/schemas/TencentLauncherIdToken"
          },
          "isDPoPBound": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherImplicitGrantModeTelemetryContext": {
        "type": "object",
        "properties": {
          "clientAuthorizationContext": {
            "$ref": "#/components/schemas/TencentLauncherClientAuthorizationTelemetryContext"
          },
          "clientAuthorizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clientAuthorizationsNum": {
            "type": "number",
            "format": "int64"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TencentLauncherTelemetryEvent"
            }
          },
          "eventsNum": {
            "type": "number",
            "format": "int64"
          },
          "methodName": {
            "type": "string"
          },
          "refreshErrorCount": {
            "type": "number",
            "format": "int32"
          },
          "restoredSession": {
            "type": "boolean"
          },
          "sessionState": {
            "$ref": "#/components/schemas/TencentLauncherSessionResponse"
          }
        }
      },
      "TencentLauncherLoginAMR": {
        "type": "string",
        "enum": [
          "cookie",
          "password",
          "captcha",
          "mfa",
          "signup",
          "google_auth",
          "game_center",
          "facebook",
          "apple",
          "msdk_qq",
          "msdk_wechat",
          "wegame",
          "tencent",
          "garena"
        ]
      },
      "TencentLauncherLoginToken": {
        "type": "object",
        "properties": {
          "claims": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TencentLauncherLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "TencentLauncherMSDKQQPartnerCredentials": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          },
          "openKey": {
            "type": "string"
          }
        }
      },
      "TencentLauncherMSDKV5PartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "TencentLauncherMSDKWeChatPartnerCredentials": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "msdkKey": {
            "type": "string"
          },
          "openId": {
            "type": "string"
          }
        }
      },
      "TencentLauncherMultifactorDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/TencentLauncherMultifactorMethod"
          },
          "methods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mfaVersion": {
            "type": "string"
          },
          "multiFactorCodeLength": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "TencentLauncherMultifactorMethod": {
        "type": "string",
        "enum": [
          "method_not_set",
          "email",
          "authenticator",
          "sms",
          "push"
        ]
      },
      "TencentLauncherPartnerCredentials": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/TencentLauncherGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/TencentLauncherGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/TencentLauncherGoogleAuthCredentials"
          },
          "msdk_qq": {
            "$ref": "#/components/schemas/TencentLauncherMSDKQQPartnerCredentials"
          },
          "msdk_wechat": {
            "$ref": "#/components/schemas/TencentLauncherMSDKWeChatPartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/TencentLauncherTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/TencentLauncherWeGamePartnerCredentials"
          }
        }
      },
      "TencentLauncherPartnerCredentialsV3": {
        "type": "object",
        "properties": {
          "game_center": {
            "$ref": "#/components/schemas/TencentLauncherGameCenterAuthCredentials"
          },
          "garena": {
            "$ref": "#/components/schemas/TencentLauncherGarenaPartnerCredentials"
          },
          "google_auth": {
            "$ref": "#/components/schemas/TencentLauncherGoogleAuthCredentials"
          },
          "msdk_v5": {
            "$ref": "#/components/schemas/TencentLauncherMSDKV5PartnerCredentials"
          },
          "tencent": {
            "$ref": "#/components/schemas/TencentLauncherTencentPartnerCredentials"
          },
          "wegame": {
            "$ref": "#/components/schemas/TencentLauncherWeGamePartnerCredentials"
          }
        }
      },
      "TencentLauncherProductIntegrationAppUpdateStatus": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean"
          },
          "updateRequired": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherProductSessionHeartbeatInfo": {
        "type": "object",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/TencentLauncherProductSessionProductPhase"
          },
          "sessionTTL": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "TencentLauncherProductSessionProductPhase": {
        "type": "string",
        "enum": [
          "None",
          "Pending",
          "Idle",
          "Gameplay"
        ]
      },
      "TencentLauncherPublicClientConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOAuthTelemetryContext": {
        "type": "object",
        "properties": {
          "implicitGrantModeContext": {
            "$ref": "#/components/schemas/TencentLauncherImplicitGrantModeTelemetryContext"
          }
        }
      },
      "TencentLauncherRSOAuthTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "grantType": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "prevSteps": {
            "type": "string"
          },
          "result": {
            "type": "string"
          },
          "step": {
            "type": "string"
          },
          "useTokenGrantMode": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherRSOAuthorizationSubmission": {
        "type": "object",
        "properties": {
          "acr_values": {
            "type": "string"
          },
          "claims": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "code_challenge": {
            "type": "string"
          },
          "code_challenge_method": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "riot_patchline": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOAuthorizationTelemetryContext": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/TencentLauncherTokenContext"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "currentPlatformId": {
            "type": "string"
          },
          "entitlementsToken": {
            "$ref": "#/components/schemas/TencentLauncherTokenContext"
          },
          "hasGasToken": {
            "type": "boolean"
          },
          "hasRefreshToken": {
            "type": "boolean"
          },
          "idToken": {
            "$ref": "#/components/schemas/TencentLauncherTokenContext"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOAuthorizationTrustLevel": {
        "type": "string",
        "enum": [
          "always_trusted",
          "trusted_device",
          "always_verify"
        ]
      },
      "TencentLauncherRSOCredentialSubmission": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOJWTConfig": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOOTPSubmission": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "rememberDevice": {
            "type": "boolean"
          },
          "retry": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOPlayerCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "platformId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRSOReauthenticationSubmission": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TencentLauncherRefreshReason": {
        "type": "string",
        "enum": [
          "forced",
          "periodic",
          "retry"
        ]
      },
      "TencentLauncherRefreshTokenRequest": {
        "type": "object",
        "properties": {
          "id_token": {
            "type": "string"
          },
          "is_dpop_bound": {
            "type": "boolean"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherSessionCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "TencentLauncherSessionLoginToken": {
        "type": "object",
        "properties": {
          "authentication_type": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum"
          },
          "code_verifier": {
            "type": "string"
          },
          "login_token": {
            "type": "string"
          },
          "persist_login": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherSessionMultifactor": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "retry": {
            "type": "boolean"
          },
          "trustDevice": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherSessionReauthentication": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "TencentLauncherSessionResponse": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/TencentLauncherAuthenticationTypeEnum"
          },
          "country": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "multifactor": {
            "$ref": "#/components/schemas/TencentLauncherMultifactorDetails"
          },
          "persistLogin": {
            "type": "boolean"
          },
          "securityProfile": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TencentLauncherSessionResponseType"
          }
        }
      },
      "TencentLauncherSessionResponseType": {
        "type": "string",
        "enum": [
          "unknown_authentication_response",
          "needs_credentials",
          "needs_password",
          "needs_multifactor_verification",
          "authenticated",
          "error"
        ]
      },
      "TencentLauncherSessionSignup": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherStatusMessage": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TencentLauncherTelemetryEvent": {
        "type": "object",
        "properties": {
          "accessTokenUpdated": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "idTokenExists": {
            "type": "boolean"
          },
          "idTokenUpdated": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherTencentLauncherLoginArguments": {
        "type": "object",
        "properties": {
          "tencentGameId": {
            "type": "string"
          },
          "tencentGameKey": {
            "type": "string"
          }
        }
      },
      "TencentLauncherTencentLauncherLoginInfo": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "TencentLauncherTencentPartnerCredentials": {
        "type": "object",
        "properties": {
          "accountType": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "cltkey": {
            "type": "string"
          },
          "cltkeyLength": {
            "type": "string"
          },
          "gameSignatureLength": {
            "type": "string"
          },
          "szGameSignature": {
            "type": "string"
          },
          "uId": {
            "type": "string"
          }
        }
      },
      "TencentLauncherTokenContext": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "hasToken": {
            "type": "boolean"
          }
        }
      },
      "TencentLauncherUserInfo": {
        "type": "object",
        "properties": {
          "userInfo": {
            "type": "string"
          }
        }
      },
      "TencentLauncherWeGamePartnerCredentials": {
        "type": "object",
        "properties": {
          "railGameId": {
            "type": "string"
          },
          "railId": {
            "type": "string"
          },
          "railSessionTicket": {
            "type": "string"
          }
        }
      },
      "ThirdPartyDependencyRequest": {
        "type": "object",
        "properties": {
          "dependency": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "validExitCodes": {
            "type": "string"
          },
          "elevate": {
            "type": "boolean"
          },
          "optional": {
            "type": "boolean"
          },
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "ThirdPartyDependencyStatesV2": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "format": "int32"
          },
          "installed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstalledDependency"
            }
          }
        }
      },
      "ThirdPartyDependencyStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dependency": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatusPhase"
          },
          "download": {
            "$ref": "#/components/schemas/DownloadProgress"
          },
          "install": {
            "$ref": "#/components/schemas/InstallProgress"
          },
          "error": {
            "type": "string"
          },
          "errorType": {
            "type": "string"
          },
          "optional": {
            "type": "boolean"
          },
          "hash": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          }
        }
      },
      "ThirdPartyDependencyStatusPhase": {
        "type": "string",
        "enum": [
          "Unknown",
          "NotInstalled",
          "Imported",
          "AlreadyInstalled",
          "Waiting",
          "Download",
          "Install",
          "Failed",
          "Cancelled",
          "Succeeded"
        ]
      },
      "UpToDateStatus": {
        "type": "string",
        "enum": [
          "UpToDate",
          "Updating",
          "UpdateAvailable"
        ]
      },
      "UriHandlerRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "uriProtocol": {
            "type": "string"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "lol": {
            "$ref": "#/components/schemas/LolInfo"
          },
          "preferred_username": {
            "type": "string"
          }
        }
      },
      "UxCommand": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UxCommandAction"
          },
          "parameters": {
            "$ref": "#/components/schemas/AnyType"
          },
          "showUxIfHidden": {
            "type": "boolean"
          }
        }
      },
      "UxCommandAction": {
        "type": "string",
        "enum": [
          "ShowLogin",
          "ShowAllProducts",
          "ShowProduct",
          "ShowSettings",
          "PassFocusPermissionToFoundation",
          "Test"
        ]
      },
      "VanguardAuthorization": {
        "type": "object",
        "properties": {
          "currentPlatformId": {
            "type": "string"
          },
          "currentAccountId": {
            "type": "number",
            "format": "int64"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "VanguardInjectorInstallState": {
        "type": "string",
        "enum": [
          "unknown",
          "installed",
          "not_installed"
        ]
      },
      "VanguardInjectorProductInstallStateResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "has_installed_patchline": {
            "type": "boolean"
          },
          "patchline_install_states": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/VanguardInjectorInstallState"
            }
          }
        }
      },
      "VanguardInstallState": {
        "type": "string",
        "enum": [
          "unknown",
          "installed",
          "not_installed"
        ]
      },
      "VanguardPatchlineDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "minVersion": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "elevate": {
            "type": "boolean"
          }
        }
      },
      "VanguardPatchlineMetadata": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VanguardPatchlineDependency"
            }
          }
        }
      },
      "VanguardPluginState": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/VanguardUpToDateStatus"
          },
          "version": {
            "type": "string"
          },
          "available": {
            "type": "string"
          },
          "progress": {
            "$ref": "#/components/schemas/ThirdPartyDependencyStatus"
          },
          "enabled": {
            "type": "boolean"
          },
          "restartRequired": {
            "type": "boolean"
          }
        }
      },
      "VanguardProductInstallStateResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "has_installed_patchline": {
            "type": "boolean"
          },
          "patchline_install_states": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/VanguardInstallState"
            }
          }
        }
      },
      "VanguardProductSession": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "VanguardPublishState": {
        "type": "string",
        "enum": [
          "NotPublished",
          "Published"
        ]
      },
      "VanguardScdCookie": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "cookie": {
            "type": "string"
          }
        }
      },
      "VanguardScdCookies": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "format": "int32"
          },
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VanguardScdCookie"
            }
          }
        }
      },
      "VanguardScdEnabled": {
        "type": "string",
        "enum": [
          "Off",
          "On"
        ]
      },
      "VanguardSessionManagerAuthorizationIdToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "VanguardSessionManagerHealthCheckReason": {
        "type": "string",
        "enum": [
          "driverQueryFailure",
          "securityQueryFailure",
          "driverDidNotStartWithBoot",
          "systemTamperEvident",
          "systemAVNotInstalled",
          "systemAVDisabled",
          "systemAVOutOfDate"
        ]
      },
      "VanguardSessionManagerHealthCheckResult": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/VanguardSessionManagerHealthCheckStatus"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VanguardSessionManagerHealthCheckReason"
            }
          }
        }
      },
      "VanguardSessionManagerHealthCheckStatus": {
        "type": "string",
        "enum": [
          "failedToConnect",
          "disconnected",
          "healthCheckPending",
          "healthCheckSuccess",
          "healthCheckNotRequired",
          "healthCheckFailure",
          "healthCheckTimeout",
          "unknownError"
        ]
      },
      "VanguardUpToDateStatus": {
        "type": "string",
        "enum": [
          "UpToDate",
          "Updating",
          "UpdateAvailable"
        ]
      },
      "VngAccessToken": {
        "type": "object",
        "properties": {
          "expiry": {
            "type": "number",
            "format": "int64"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          }
        }
      },
      "VngAccountRequiredStatus": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          }
        }
      },
      "VngGetProfileData": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "ppDOI": {
            "type": "string"
          },
          "ppID": {
            "type": "string"
          }
        }
      },
      "VngGetProfileResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VngGetProfileData"
          },
          "message_": {
            "type": "string"
          },
          "returnCode": {
            "$ref": "#/components/schemas/VngGetProfileResponseCode"
          }
        }
      },
      "VngGetProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidDataInput",
          "UnsupportedApi",
          "NonexistedProfile",
          "LimitedAge",
          "InvalidAuth",
          "PhoneVerificationRequired",
          "IncorrectConfiguration",
          "TooManyRequests"
        ]
      },
      "VngHomeBaseCountry": {
        "type": "object",
        "properties": {
          "homeBaseCountry": {
            "type": "string"
          }
        }
      },
      "VngOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "VngPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/VngOnlinePlatform"
          }
        }
      },
      "VngProfileVerificationResponse": {
        "type": "object",
        "properties": {
          "message_": {
            "type": "string"
          },
          "returnCode": {
            "$ref": "#/components/schemas/VngProfileVerificationResponseCode"
          }
        }
      },
      "VngProfileVerificationResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidDataInput",
          "InvalidAuth",
          "VerificationFailed",
          "IncorrectConfiguration",
          "TooManyRequests"
        ]
      },
      "VngSendVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VngVerificationCodeData"
          },
          "messageCode": {
            "type": "string"
          },
          "returnCode": {
            "$ref": "#/components/schemas/VngSendVerificationResponseCode"
          }
        }
      },
      "VngSendVerificationResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidDataInput",
          "RateLimited",
          "InvalidAuth",
          "VerificationNotRequired",
          "IncorrectConfiguration",
          "TooManyRequests"
        ]
      },
      "VngSubmitLoginResponse": {
        "type": "object",
        "properties": {
          "message_": {
            "type": "string"
          },
          "returnCode": {
            "$ref": "#/components/schemas/VngSubmitLoginResponseCode"
          }
        }
      },
      "VngSubmitLoginResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidDataInput",
          "UnsupportedApi",
          "InvalidAuth",
          "IncorrectConfiguration",
          "TooManyRequests"
        ]
      },
      "VngSubmitProfileRequest": {
        "type": "object",
        "properties": {
          "addr": {
            "type": "string"
          },
          "dob": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "ppDOI": {
            "type": "string"
          },
          "ppID": {
            "type": "string"
          }
        }
      },
      "VngSubmitProfileResponse": {
        "type": "object",
        "properties": {
          "message_": {
            "type": "string"
          },
          "returnCode": {
            "$ref": "#/components/schemas/VngSubmitProfileResponseCode"
          }
        }
      },
      "VngSubmitProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidDataInput",
          "UnsupportedApi",
          "InvalidEmail",
          "InvalidPhone",
          "InvalidGovernmentId",
          "InvalidDatetime",
          "InvalidName",
          "AgeLimited",
          "InvalidAuth",
          "PhoneVerificationRequired",
          "IncorrectConfiguration",
          "TooManyRequests"
        ]
      },
      "VngV1ActionRequired": {
        "type": "string",
        "enum": [
          "None",
          "Registration",
          "PhoneVerification"
        ]
      },
      "VngV1Profile": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "governmentId": {
            "type": "string"
          },
          "governmentIdIssueDate": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "VngV1ProfileField": {
        "type": "string",
        "enum": [
          "name",
          "email",
          "phone",
          "address",
          "governmentId",
          "governmentIdIssueDate",
          "dateOfBirth",
          "eulaAgreement"
        ]
      },
      "VngV1ProfileVerificationError": {
        "type": "string",
        "enum": [
          "VerificationFailed",
          "TooManyRequests"
        ]
      },
      "VngV1SendVerificationCodeConfig": {
        "type": "object",
        "properties": {
          "digits": {
            "type": "number",
            "format": "int32"
          },
          "expiresIn": {
            "type": "number",
            "format": "int64"
          },
          "otpToken": {
            "type": "string"
          },
          "retryAfter": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "VngV1SendVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/VngV1SendVerificationCodeConfig"
          },
          "responseCode": {
            "type": "string"
          }
        }
      },
      "VngV1StatusResponse": {
        "type": "object",
        "properties": {
          "action_required": {
            "type": "boolean"
          },
          "action_type": {
            "$ref": "#/components/schemas/VngV1ActionRequired"
          },
          "action_url": {
            "type": "string"
          },
          "action_url_raw": {
            "type": "string"
          },
          "required_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VngV1ProfileField"
            }
          }
        }
      },
      "VngV1SubmitProfileResponse": {
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/VngV1SubmitProfileResponseCode"
          }
        }
      },
      "VngV1SubmitProfileResponseCode": {
        "type": "string",
        "enum": [
          "Success",
          "InvalidEmail",
          "InvalidPhone",
          "InvalidGovernmentId",
          "InvalidDatetime",
          "InvalidName",
          "AgeLimited",
          "PhoneVerificationRequired"
        ]
      },
      "VngV1VerificationDetails": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          },
          "otpToken": {
            "type": "string"
          }
        }
      },
      "VngVProfileVerificationResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/VngV1ProfileVerificationError"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "VngVerificationCodeData": {
        "type": "object",
        "properties": {
          "digits": {
            "type": "number",
            "format": "int32"
          },
          "expiresIn": {
            "type": "number",
            "format": "int64"
          },
          "otpToken": {
            "type": "string"
          },
          "retry-after": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "VngVerificationDetails": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          },
          "otpToken": {
            "type": "string"
          }
        }
      },
      "VoiceChatAccessToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "VoiceChatAudioPropertiesResource": {
        "type": "object",
        "properties": {
          "fastEnergyMeter": {
            "type": "number",
            "format": "double"
          },
          "isLoopbackEnabled": {
            "type": "boolean"
          },
          "isMicActive": {
            "type": "boolean"
          },
          "isSpeakerActive": {
            "type": "boolean"
          },
          "micEnergy": {
            "type": "number",
            "format": "int32"
          },
          "micVolume": {
            "type": "number",
            "format": "int32"
          },
          "noiseFloorMeter": {
            "type": "number",
            "format": "double"
          },
          "speakerEnergy": {
            "type": "number",
            "format": "int32"
          },
          "speakerVolume": {
            "type": "number",
            "format": "int32"
          },
          "speechThresholdMeter": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "VoiceChatAuthorization": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          }
        }
      },
      "VoiceChatBlockList": {
        "type": "object",
        "properties": {
          "blockedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatBlockedUser"
            }
          }
        }
      },
      "VoiceChatBlockedUser": {
        "type": "object",
        "properties": {
          "blockedPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatOnlinePlatform"
            }
          },
          "gameName": {
            "type": "string"
          },
          "gameTag": {
            "type": "string"
          },
          "isFriendsOnActiveConsole": {
            "type": "boolean"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "VoiceChatCaptureDevicePermissionStatus": {
        "type": "string",
        "enum": [
          "promptForPermission",
          "permissionDenied",
          "permissionGranted"
        ]
      },
      "VoiceChatChatFriend": {
        "type": "object",
        "properties": {
          "activePlatform": {
            "type": "string"
          },
          "displayGroup": {
            "type": "string"
          },
          "game_name": {
            "type": "string"
          },
          "game_tag": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "last_online_ts": {
            "type": "number",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "puuid": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        }
      },
      "VoiceChatChatFriends": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatChatFriend"
            }
          }
        }
      },
      "VoiceChatDebugCSRFileWritingRequest": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string"
          },
          "productSessionId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "VoiceChatDebugCSRFileWritingResponse": {
        "type": "object",
        "properties": {
          "audioClipsCount": {
            "type": "number",
            "format": "int64"
          },
          "audioDurationMs": {
            "type": "number",
            "format": "int64"
          },
          "audioFramerate": {
            "type": "number",
            "format": "int32"
          },
          "bytesWritten": {
            "type": "number",
            "format": "int64"
          },
          "maxBufferDurationInSeconds": {
            "type": "number",
            "format": "int64"
          },
          "maxRecordingSizeInKb": {
            "type": "number",
            "format": "int64"
          },
          "pcmFrameCount": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatDebugSimulationResource": {
        "type": "object",
        "properties": {
          "audioFilePath": {
            "type": "string"
          },
          "micSimulationTimeoutSeconds": {
            "type": "number",
            "format": "int32"
          },
          "productSessionId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "simulateMicActivity": {
            "type": "boolean"
          }
        }
      },
      "VoiceChatDeviceResource": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string"
          },
          "is_current_device": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "is_effective_device": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VoiceChatFriendUpdateList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatChatFriend"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "VoiceChatGamepadPTTButton": {
        "type": "string",
        "enum": [
          "FaceButton_Top",
          "FaceButton_Bottom",
          "FaceButton_Left",
          "FaceButton_Right",
          "Dpad_Up",
          "Dpad_Down",
          "Dpad_Left",
          "Dpad_Right",
          "LeftShoulder",
          "RightShoulder",
          "LeftTrigger",
          "RightTrigger",
          "LeftThumbstickButton",
          "RightThumbstickButton"
        ]
      },
      "VoiceChatIdToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "VoiceChatJoinSession": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string"
          },
          "matchToken": {
            "type": "string"
          }
        }
      },
      "VoiceChatKeyCombo": {
        "type": "object",
        "properties": {
          "keyBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPushToTalkKey"
            }
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "VoiceChatLogoutReason": {
        "type": "string",
        "enum": [
          "generic",
          "tokens_expired"
        ]
      },
      "VoiceChatOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "VoiceChatPTTMode": {
        "type": "string",
        "enum": [
          "exclusive",
          "inclusive"
        ]
      },
      "VoiceChatParticipantResource": {
        "type": "object",
        "properties": {
          "energy": {
            "type": "number",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "isInteractionAllowed": {
            "type": "boolean"
          },
          "isMuted": {
            "type": "boolean"
          },
          "isSpeaking": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "speakingTimestamp": {
            "type": "number",
            "format": "int32"
          },
          "uri": {
            "type": "string"
          },
          "volume": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatPermissionDetails": {
        "type": "object",
        "properties": {
          "denyReason": {
            "type": "string"
          },
          "hasPermission": {
            "type": "boolean"
          },
          "permissionId": {
            "type": "string"
          }
        }
      },
      "VoiceChatPermissionsRequestParameters": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string"
          }
        }
      },
      "VoiceChatPermissionsResponse": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPermissionDetails"
            }
          }
        }
      },
      "VoiceChatPlatformSocialCommunicationPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "VoiceChatPlatformSocialCommunicationPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationPermission"
          },
          "reason": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationType"
          }
        }
      },
      "VoiceChatPlatformSocialCommunicationType": {
        "type": "string",
        "enum": [
          "Unknown",
          "Text",
          "Voice"
        ]
      },
      "VoiceChatPlatformSocialConsoleFriend": {
        "type": "object",
        "properties": {
          "platformAccountId": {
            "type": "string"
          },
          "platformOnlineId": {
            "type": "string"
          },
          "presence": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialPlatformPresence"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialConsoleFriendsList": {
        "type": "object",
        "properties": {
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialConsoleFriend"
            }
          },
          "platform": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialCrossPlayPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "VoiceChatPlatformSocialCrossPlayPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialCrossPlayPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialMultiplayerPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "VoiceChatPlatformSocialMultiplayerPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialMultiplayerPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialOnlineStatus": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "VoiceChatPlatformSocialPlatformPresence": {
        "type": "object",
        "properties": {
          "isPlayingTheSameTitle": {
            "type": "boolean"
          },
          "onlineStatus": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialOnlineStatus"
          }
        }
      },
      "VoiceChatPlatformSocialTextPermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "VoiceChatPlatformSocialTextPermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialTextPermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialUserCommunicationPermission": {
        "type": "object",
        "properties": {
          "crossNetworkFriendsPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "crossNetworkUsersPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userPermissionsMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialUserCommunicationPermissionsEntry"
            }
          }
        }
      },
      "VoiceChatPlatformSocialUserCommunicationPermissionsEntry": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "userConsoleId": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformSocialVoicePermission": {
        "type": "string",
        "enum": [
          "Allowed",
          "NotAllowed"
        ]
      },
      "VoiceChatPlatformSocialVoicePermissionDetails": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/VoiceChatPlatformSocialVoicePermission"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "VoiceChatPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/VoiceChatOnlinePlatform"
          }
        }
      },
      "VoiceChatPluginStatus": {
        "type": "string",
        "enum": [
          "unknown",
          "awaitingAuth",
          "permissionUnknown",
          "permissionDenied",
          "ready"
        ]
      },
      "VoiceChatProductContext": {
        "type": "object",
        "properties": {
          "patchline": {
            "type": "string"
          },
          "product": {
            "type": "string"
          }
        }
      },
      "VoiceChatProductSession": {
        "type": "object",
        "properties": {
          "patchlineFullName": {
            "type": "string"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "VoiceChatPttVersion": {
        "type": "string",
        "enum": [
          "BindUserInput",
          "SetTransmitOnly"
        ]
      },
      "VoiceChatPushToTalkKey": {
        "type": "object",
        "properties": {
          "gamepadButton": {
            "$ref": "#/components/schemas/VoiceChatGamepadPTTButton"
          },
          "key": {
            "type": "number",
            "format": "int32"
          },
          "mouseButton": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatPushToTalkResource": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "keyCombos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatKeyCombo"
            }
          },
          "mode": {
            "$ref": "#/components/schemas/VoiceChatPTTMode"
          },
          "pttSessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPushToTalkTransmitState"
            }
          },
          "version": {
            "$ref": "#/components/schemas/VoiceChatPttVersion"
          }
        }
      },
      "VoiceChatPushToTalkTransmitState": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string"
          },
          "transmit": {
            "type": "boolean"
          }
        }
      },
      "VoiceChatRiotUser": {
        "type": "object",
        "properties": {
          "platform": {
            "$ref": "#/components/schemas/VoiceChatOnlinePlatform"
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "VoiceChatSessionResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isFocused": {
            "type": "boolean"
          },
          "isMuted": {
            "type": "boolean"
          },
          "isRestricted": {
            "type": "boolean"
          },
          "isTransmitEnabled": {
            "type": "boolean"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatParticipantResource"
            }
          },
          "product": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/VoiceChatSessionStatus"
          },
          "volume": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatSessionStatus": {
        "type": "string",
        "enum": [
          "active",
          "onHold"
        ]
      },
      "VoiceChatSettingsResource": {
        "type": "object",
        "properties": {
          "currentCaptureDeviceHandle": {
            "type": "string"
          },
          "currentRenderDeviceHandle": {
            "type": "string"
          },
          "localMicMuted": {
            "type": "boolean"
          },
          "loopbackEnabled": {
            "type": "boolean"
          },
          "micLevel": {
            "type": "number",
            "format": "int32"
          },
          "speakerLevel": {
            "type": "number",
            "format": "int32"
          },
          "vadHangoverTime": {
            "type": "number",
            "format": "int32"
          },
          "vadSensitivity": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatStateResource": {
        "type": "object",
        "properties": {
          "connected": {
            "type": "boolean"
          }
        }
      },
      "VoiceChatTencentLauncherLoginInfo": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "number",
            "format": "int32"
          },
          "ext": {
            "type": "string"
          },
          "openid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "VoiceChatUnnormalizedKeyCombo": {
        "type": "object",
        "properties": {
          "keyBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatUnnormalizedPushToTalkKey"
            }
          },
          "sessionId": {
            "type": "string"
          }
        }
      },
      "VoiceChatUnnormalizedPushToTalkKey": {
        "type": "object",
        "properties": {
          "gamepadButton": {
            "$ref": "#/components/schemas/VoiceChatGamepadPTTButton"
          },
          "key": {
            "type": "number",
            "format": "int32"
          },
          "mouseButton": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatUnnormalizedPushToTalkResource": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "keyCombos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatUnnormalizedKeyCombo"
            }
          },
          "mode": {
            "$ref": "#/components/schemas/VoiceChatPTTMode"
          }
        }
      },
      "VoiceChatUpdateParticipantResource": {
        "type": "object",
        "properties": {
          "isMuted": {
            "type": "boolean"
          },
          "volume": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatUpdateSessionResource": {
        "type": "object",
        "properties": {
          "isFocused": {
            "type": "boolean"
          },
          "isTransmitEnabled": {
            "type": "boolean"
          },
          "volume": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatUpdateSettingsResource": {
        "type": "object",
        "properties": {
          "currentCaptureDeviceHandle": {
            "type": "string"
          },
          "currentRenderDeviceHandle": {
            "type": "string"
          },
          "localMicMuted": {
            "type": "boolean"
          },
          "loopbackEnabled": {
            "type": "boolean"
          },
          "micLevel": {
            "type": "number",
            "format": "int32"
          },
          "speakerLevel": {
            "type": "number",
            "format": "int32"
          },
          "vadHangoverTime": {
            "type": "number",
            "format": "int32"
          },
          "vadSensitivity": {
            "type": "number",
            "format": "int32"
          }
        }
      },
      "VoiceChatUserCommunicationPermissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPlatformSocialCommunicationPermissionDetails"
            }
          },
          "puuid": {
            "type": "string"
          }
        }
      },
      "VoiceChatUserCommunicationPermissionsV2Request": {
        "type": "object",
        "properties": {
          "queryCache": {
            "type": "boolean"
          },
          "riotUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatRiotUser"
            }
          }
        }
      },
      "VoiceChatV3PushToTalkResource": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "mode": {
            "$ref": "#/components/schemas/VoiceChatPTTMode"
          },
          "pttSessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatPushToTalkTransmitState"
            }
          }
        }
      },
      "VoiceChatVivoxCallStats": {
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string"
          },
          "capture_device_consecutively_read_count_0": {
            "type": "number",
            "format": "int32"
          },
          "capture_device_consecutively_read_count_1": {
            "type": "number",
            "format": "int32"
          },
          "capture_device_consecutively_read_count_2": {
            "type": "number",
            "format": "int32"
          },
          "capture_device_consecutively_read_count_3": {
            "type": "number",
            "format": "int32"
          },
          "capture_device_consecutively_read_count_4": {
            "type": "number",
            "format": "int32"
          },
          "codec_name": {
            "type": "string"
          },
          "current_bars": {
            "type": "number",
            "format": "int32"
          },
          "current_opus_bandwidth": {
            "type": "number",
            "format": "int32"
          },
          "current_opus_bit_rate": {
            "type": "number",
            "format": "int32"
          },
          "current_opus_complexity": {
            "type": "number",
            "format": "int32"
          },
          "current_opus_max_packet_size": {
            "type": "number",
            "format": "int32"
          },
          "current_opus_vbr_mode": {
            "type": "number",
            "format": "int32"
          },
          "incoming_discarded": {
            "type": "number",
            "format": "int32"
          },
          "incoming_out_of_time": {
            "type": "number",
            "format": "int32"
          },
          "incoming_packetloss": {
            "type": "number",
            "format": "int32"
          },
          "incoming_received": {
            "type": "number",
            "format": "int32"
          },
          "last_latency_measured_ms": {
            "type": "number",
            "format": "int32"
          },
          "latency_measurement_count": {
            "type": "number",
            "format": "int32"
          },
          "latency_packets_dropped": {
            "type": "number",
            "format": "int32"
          },
          "latency_packets_lost": {
            "type": "number",
            "format": "int32"
          },
          "latency_packets_malformed": {
            "type": "number",
            "format": "int32"
          },
          "latency_packets_negative_latency": {
            "type": "number",
            "format": "int32"
          },
          "latency_packets_sent": {
            "type": "number",
            "format": "int32"
          },
          "latency_sum_ms": {
            "type": "number",
            "format": "int32"
          },
          "max_latency_ms": {
            "type": "number",
            "format": "int32"
          },
          "min_latency_ms": {
            "type": "number",
            "format": "int32"
          },
          "outgoing_sent": {
            "type": "number",
            "format": "int32"
          },
          "plc_on": {
            "type": "boolean"
          },
          "plc_synthetic_frames": {
            "type": "number",
            "format": "int32"
          },
          "r_factor": {
            "type": "number",
            "format": "double"
          },
          "render_device_errors": {
            "type": "number",
            "format": "int32"
          },
          "render_device_overruns": {
            "type": "number",
            "format": "int32"
          },
          "render_device_underruns": {
            "type": "number",
            "format": "int32"
          },
          "sample_interval_begin_ms": {
            "type": "number",
            "format": "int64"
          },
          "sample_interval_end_ms": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "VoiceChatVoiceChatCSRCaptureEvent": {
        "type": "object",
        "properties": {
          "failedBatchesCount": {
            "type": "number",
            "format": "int64"
          },
          "provider": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/VoiceChatVoiceChatCSRCaptureResult"
          },
          "sessionId": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "totalBatchesCount": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "VoiceChatVoiceChatCSRCaptureResult": {
        "type": "string",
        "enum": [
          "Success",
          "Failure"
        ]
      },
      "VoiceChatVoiceChatCSRInitializationEvent": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/VoiceChatVoiceChatCSRInitializationResult"
          },
          "sessionId": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "VoiceChatVoiceChatCSRInitializationResult": {
        "type": "string",
        "enum": [
          "Success",
          "Failure"
        ]
      },
      "VoiceChatVoiceChatCSRMonitoringEvent": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "VoiceChatVoiceChatCSRUploadEvent": {
        "type": "object",
        "properties": {
          "audioDurationInMs": {
            "type": "number",
            "format": "int64"
          },
          "batchNumber": {
            "type": "number",
            "format": "int32"
          },
          "provider": {
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/VoiceChatVoiceChatCSRUploadReason"
          },
          "result": {
            "$ref": "#/components/schemas/VoiceChatVoiceChatCSRUploadResult"
          },
          "retryCount": {
            "type": "number",
            "format": "int32"
          },
          "sessionId": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "VoiceChatVoiceChatCSRUploadReason": {
        "type": "string",
        "enum": [
          "SessionLeft",
          "GameRequestReceived",
          "MaxRecordingSizeReached"
        ]
      },
      "VoiceChatVoiceChatCSRUploadResult": {
        "type": "string",
        "enum": [
          "Success",
          "Failure"
        ]
      },
      "VoiceChatVoiceChatHeartbeatMetrics": {
        "type": "object",
        "properties": {
          "productsUsingVoice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics_PerProductData"
            }
          },
          "providerData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoiceChatVoiceChatHeartbeatMetrics_PerProviderData"
            }
          }
        }
      },
      "VoiceChatVoiceChatHeartbeatMetrics_PerProductData": {
        "type": "object",
        "properties": {
          "channelsInUse": {
            "type": "number",
            "format": "int32"
          },
          "patchlineId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "VoiceChatVoiceChatHeartbeatMetrics_PerProviderData": {
        "type": "object",
        "properties": {
          "isLoggedIn": {
            "type": "boolean"
          },
          "providerName": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "XBGPRegistryRequest": {
        "type": "object",
        "properties": {
          "exe": {
            "type": "string"
          }
        }
      },
      "XbgpAcceptance": {
        "type": "string",
        "enum": [
          "Authenticated",
          "NotAuthenticated",
          "AccountNotLinked",
          "MismatchedPuuid",
          "NoXToken",
          "XbgpDisabled"
        ]
      },
      "XbgpAcceptanceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/XbgpAcceptance"
          }
        }
      },
      "XboxAccountAccountPluginTelemetryEvent": {
        "type": "object",
        "properties": {
          "durationMs": {
            "type": "number",
            "format": "int32"
          },
          "operation": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "result": {
            "type": "string"
          }
        }
      },
      "XboxAccountAgeGroup": {
        "type": "string",
        "enum": [
          "child",
          "teen",
          "adult"
        ]
      },
      "XboxAccountAuthorization": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "XboxAccountAuthorizationParameters": {
        "type": "object",
        "properties": {
          "authenticatorUrl": {
            "type": "string"
          },
          "minimumAgeGroup": {
            "$ref": "#/components/schemas/XboxAccountAgeGroup"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "XboxAccountAuthorizationResponse": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/XboxAccountAuthorization"
          },
          "error_code": {
            "$ref": "#/components/schemas/XboxAccountErrorCode"
          }
        }
      },
      "XboxAccountConfig": {
        "type": "object",
        "properties": {
          "enable_setting_persistence": {
            "type": "boolean"
          },
          "require_user_confirmation": {
            "type": "boolean"
          }
        }
      },
      "XboxAccountConnectivity": {
        "type": "object",
        "properties": {
          "connectivity": {
            "$ref": "#/components/schemas/XboxAccountConnectivityValue"
          },
          "previousConnectivity": {
            "$ref": "#/components/schemas/XboxAccountConnectivityValue"
          }
        }
      },
      "XboxAccountConnectivityValue": {
        "type": "string",
        "enum": [
          "ConnectionCheckDisabled",
          "Connected",
          "Disconnected"
        ]
      },
      "XboxAccountErrorCode": {
        "type": "string",
        "enum": [
          "aborted",
          "signed_out",
          "user_not_found",
          "no_default_user",
          "too_young",
          "content_update_required"
        ]
      },
      "XboxAccountGamertagType": {
        "type": "string",
        "enum": [
          "classic",
          "modern",
          "modern_suffix",
          "unique_modern"
        ]
      },
      "XboxAccountModernGamertag": {
        "type": "object",
        "properties": {
          "modern": {
            "type": "string"
          },
          "modern_suffix": {
            "type": "string"
          },
          "unique_modern": {
            "type": "string"
          }
        }
      },
      "XboxAccountOnlinePlatform": {
        "type": "string",
        "enum": [
          "absent",
          "unknown",
          "riot",
          "tencent",
          "playstation",
          "switch",
          "xbox"
        ]
      },
      "XboxAccountPlatformUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/XboxAccountOnlinePlatform"
          }
        }
      },
      "XboxAccountPluginConfigResponse": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XboxAccountV1AuthMethodConfig"
            }
          },
          "service_url": {
            "type": "string"
          }
        }
      },
      "XboxAccountSelectUserParameters": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/XboxAccountSignInOptions"
          },
          "shouldRetryOnAbort": {
            "type": "boolean"
          }
        }
      },
      "XboxAccountSignInOptions": {
        "type": "string",
        "enum": [
          "add_default_user_allowing_ui",
          "show_user_selector",
          "allow_guests"
        ]
      },
      "XboxAccountUser": {
        "type": "object",
        "properties": {
          "confirmed": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/XboxAccountErrorCode"
          },
          "require_confirmation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "XboxAccountV1AuthMethodConfig": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isSignupDisabled": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "XboxAccountV1DisplayMode": {
        "type": "string",
        "enum": [
          "page",
          "touch"
        ]
      },
      "XboxAccountV1WebAuthenticationMethod": {
        "type": "string",
        "enum": [
          "none",
          "apple",
          "google",
          "facebook",
          "nintendo",
          "playstation",
          "xbox"
        ]
      },
      "XboxAccountV1WebAuthenticationUrlRequest": {
        "type": "object",
        "properties": {
          "authentication_callback_uri": {
            "type": "string"
          },
          "display": {
            "$ref": "#/components/schemas/XboxAccountV1DisplayMode"
          },
          "locale": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/XboxAccountV1WebAuthenticationMethod"
          },
          "product_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "remember": {
            "type": "boolean"
          },
          "riot_theme": {
            "type": "string"
          }
        }
      },
      "XboxAccountV2AuthorizationError": {
        "type": "string",
        "enum": [
          "Aborted",
          "SignedOut",
          "UserNotFound",
          "NoDefaultUser",
          "EmptyResponse",
          "FailedToGetRsoAuthenticatorUrl",
          "Unknown",
          "MissingResult",
          "MissingCode",
          "ASWebAuthenticationSessionPresentationContextInvalid",
          "ASWebAuthenticationSessionPresentationContextNotProvided",
          "InvalidRedirectPath",
          "InvalidRedirectSchema",
          "RedirectMissingQueryParameters",
          "UnknownASWebAuthenticationSessionError",
          "UnknownSFAuthenticationSessionError",
          "UnknownJavaError",
          "TooYoung",
          "ContentUpdateRequired"
        ]
      },
      "XboxAccountV2AuthorizationParameters": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "showUserSelector": {
            "type": "boolean"
          }
        }
      },
      "XboxAccountV2AuthorizationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/XboxAccountV2AuthorizationError"
          },
          "token": {
            "$ref": "#/components/schemas/XboxAccountV2AuthorizationToken"
          },
          "type": {
            "$ref": "#/components/schemas/XboxAccountV2AuthorizationResponseType"
          }
        }
      },
      "XboxAccountV2AuthorizationResponseType": {
        "type": "string",
        "enum": [
          "None",
          "Cancelled",
          "Error",
          "Code",
          "Token"
        ]
      },
      "XboxAccountV2AuthorizationToken": {
        "type": "object",
        "properties": {
          "user_hash": {
            "type": "string"
          },
          "xsts_token": {
            "type": "string"
          }
        }
      },
      "basicOperatingSystemInfo": {
        "type": "object",
        "properties": {
          "edition": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "versionMajor": {
            "type": "string"
          },
          "versionMinor": {
            "type": "string"
          }
        }
      },
      "basicSystemInfo": {
        "type": "object",
        "properties": {
          "operatingSystem": {
            "$ref": "#/components/schemas/basicOperatingSystemInfo"
          },
          "physicalMemory": {
            "type": "number",
            "format": "int64"
          },
          "physicalProcessorCores": {
            "type": "number",
            "format": "int64"
          },
          "processorSpeed": {
            "type": "number",
            "format": "int64"
          }
        }
      },
      "AnyType": {
        "nullable": true,
        "anyOf": [
          {
            "type": "object"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "type": "integer"
          },
          {
            "type": "array",
            "items": {}
          }
        ]
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}